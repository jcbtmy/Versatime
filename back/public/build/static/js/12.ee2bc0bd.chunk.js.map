{"version":3,"sources":["Common/Buttons.js","Common/Fields.js","Common/TemplateTable.js","Common/Search.js","Common/HeadDisplay.js","RMA/RMARepairs.js","RMA/RMAItem.js","RMA/RMADisplay.js"],"names":["DownloadPackingSlipButton","props","style","padding","color","variant","onClick","UpdatePackingSlipsButton","SubmitButton","marginBottom","width","children","NewButton","title","placement","size","fontSize","EditButton","className","RmaTestBox","component","row","control","checked","passed","onChange","i","label","SaveChangesButton","FileUploadButton","marginLeft","type","display","name","id","value","file","uploadFile","accept","htmlFor","useStyles","makeStyles","textFieldRoot","identifierRoot","height","multilineRoot","fullWidth","flexGrow","noteWidth","labelIdRoot","labelRoot","labelFocused","getInputProps","params","classes","InputProps","root","edit","disableUnderline","CustomerField","options","customers","getOptionLabel","option","customerName","disabled","freeSolo","renderInput","InputLabelProps","shrink","ProductField","products","productName","DateField","now","Date","defaultValue","toISOString","substring","ShippingField","multiline","rows","rowsMax","ToField","IdentifierField","InProps","allowEdit","readOnly","error","helperText","focused","MeshField","BluetoothField","VersionField","NoteField","GeneralField","QuantityField","inputProps","min","SerialField","serials","String","serialNumber","OrderField","orders","orderNumber","RMAField","rmas","RMANumber","TrackingNumberField","POField","ShippingServiceField","BoxNumberField","container","overflowX","flexDirection","alignSelf","overflowY","repairTable","tableHead","backgroundColor","repairHead","expandedElement","alignItems","maxHeight","gap","margin","borderBottom","CollapseRow","React","useState","open","setOpen","Fragment","items","map","item","align","aria-label","colSpan","length","in","timeout","unmountOnExit","subItems","Row","RepairTable","Paper","GenTable","elevation","stickyHeader","GenTableHead","Children","GenTableBody","GenTableRow","TemplateTable","search","paddingBottom","searchBarContainer","justifyContent","marginTop","SearchInput","ListboxProps","SearchBar","noNew","newOrderFunction","rootConatiner","borderRadius","editButton","content","flexFlow","position","maxWidth","paddingTop","Head","changeEdit","state","setState","saveChanges","event","updateHead","this","child","noEdit","cloneElement","change","Component","HeadDisplay","RMARepair","setNote","prevState","tests","notes","target","setPassed","updateSerialTest","a","testingResults","action","note","rmaNumber","headersSerial","method","headers","body","JSON","stringify","fetch","then","res","ok","json","updateMessage","text","message","catch","updateTests","updateBody","itemId","headersTest","err","moduleParts","lightParts","touchScreenParts","prevProps","test","part","e","new","Button","_RMAItem","setSerial","serial","console","log","product","find","prod","productId","setProduct","addItem","push","mesh","issue","RMAItem","RMADisplay","createRMA","customer","RMADate","shipTo","to","newRMA","customerId","_id","resRMA","itemsToRows","updateRoot","updateRMADetails","fetchRecent","recentRMAs","fetchRMA","rma","setRMA","change_RMANumber","num","parseInt","Number","isInteger","RMANUmber","change_RMATo","change_RMAShipTo","change_RMADate","RMADateA","change_RMACustomer","newItem","newItems","response","rmaRepair","cols","location","Display","Search","Message","clear","Typography","Recent","c","date","textTransform","getMonth","getDay","getFullYear"],"mappings":"ogBAgBaA,G,OAA4B,SAACC,GACtC,OACI,cAAC,IAAD,CAAQC,MAAO,CAACC,QAAQ,GAChBC,MAAM,UACNC,QAAQ,YACRC,QAASL,EAAMK,QAHvB,sCAWKC,EAA2B,SAACN,GACrC,OACI,cAAC,IAAD,CACIC,MAAO,CAACC,QAAQ,GAChBC,MAAM,UACNC,QAAQ,YACRC,QAASL,EAAMK,QAJnB,mCAYKE,EAAe,SAACP,GACzB,OACI,cAAC,IAAD,CACIC,MAAO,CAAEO,aAAc,GAAIC,MAAO,OAAQP,QAAS,qBACnDC,MAAM,UACNC,QAAQ,YACRC,QAASL,EAAMK,QAJnB,SAMKL,EAAMU,YAMNC,EAAY,SAACX,GAEtB,OACI,cAAC,IAAD,CAASY,MAAOZ,EAAMY,MAAOC,UAAU,MAAvC,SACI,cAAC,IAAD,CAAYR,QAASL,EAAMK,QAASS,KAAK,QAAzC,SACI,cAAC,IAAD,CAASX,MAAM,UAAUY,SAAS,eAMrCC,EAAa,SAAChB,GACvB,OACI,cAAC,IAAD,CAASY,MAAM,OAAOC,UAAU,MAAhC,SACI,cAAC,IAAD,CAAYR,QAASL,EAAMK,QAASY,UAAWjB,EAAMiB,UAArD,SACI,cAAC,IAAD,CAAUd,MAAOH,EAAMG,aA0B1Be,EAAa,SAAClB,GASvB,OACI,cAAC,IAAD,CAAamB,UAAU,WAAvB,SACgB,eAAC,IAAD,CAAWC,KAAG,EAAd,UACI,cAAC,IAAD,CACIC,QAAS,cAAC,IAAD,CAAUC,QAA2B,OAAjBtB,EAAMuB,SAAoC,IAAjBvB,EAAMuB,OAAoBvB,EAAMuB,OAAS,KAAMtB,MAAO,CAACE,MAAO,SAAUqB,SARtI,WAChBxB,EAAMwB,SAASxB,EAAMyB,GAAG,MAQAC,MAAM,WAEV,cAAC,IAAD,CACIL,QAAS,cAAC,IAAD,CAAUC,SAA2B,IAAjBtB,EAAMuB,QAA2B,KAAOtB,MAAO,CAACE,MAAO,OAAQqB,SAfpG,WAChBxB,EAAMwB,SAASxB,EAAMyB,GAAG,MAeAC,MAAM,iBAOzBC,EAAoB,SAAC3B,GAE9B,OACI,cAAC,IAAD,CAAQK,QAASL,EAAMK,QAASF,MAAM,UAAtC,2BAMKyB,EAAmB,SAAC5B,GAC7B,OACI,sBAAKC,MAAO,CAAC4B,WAAY,QAAzB,UACI,uBAAQC,KAAK,OACL7B,MAAO,CAAC8B,QAAS,QACjBC,KAAK,cACLC,GAAG,cACHC,MAAOlC,EAAMmC,KACbX,SAAUxB,EAAMoC,WAChBC,OAAO,sEAEX,uBAAOC,QAAQ,cAAf,SACI,cAAC,IAAD,CAAQlC,QAAQ,YAAYD,MAAM,UAAUE,QAASL,EAAMwB,SAA3D,gC,otBCvIde,G,iCAAYC,aAAW,iBAAO,CAChCC,cAAe,CACX1B,SAAW,GACX,kBAAmB,CACfZ,MAAO,SAEXM,MAAO,KAEXiC,eAAe,CACX3B,SAAW,GACX,kBAAmB,CACfZ,MAAO,SAEXwC,OAAQ,OACRlC,MAAM,QAGVmC,cAAc,CACV7B,SAAU,GACV,kBAAmB,CACfZ,MAAO,SAEXM,MAAO,KAEXoC,UAAY,CACRC,SAAU,GAEdC,UAAY,CACRtC,MAAO,IACPkC,OAAQ,QAEZK,YAAa,CACTjC,SAAU,IAGdkC,UAAU,CACNlC,SAAU,IAEdmC,aAAc,QAMZC,EAAgB,SAACC,EAAQC,EAASrD,GAEpC,IAAIsD,EAeJ,OAbIA,EADDF,EACW,2BACHA,EAAOE,YADJ,IAEND,QAAS,CAACE,KAAMF,EAAQZ,iBAIf,CAACY,QAAS,CAACE,KAAMF,EAAQZ,gBAGtCzC,EAAMwD,OACNF,EAAWG,kBAAmB,GAG3BH,GAKEI,EAAgB,SAAC1D,GAE1B,IAAMqD,EAAUd,IAEhB,OACI,cAAC,IAAD,CAAcN,GAAG,WACT0B,QAAS3D,EAAM4D,UACfC,eAAgB,SAACC,GAAD,OAAYA,EAAOC,cACnCC,UAAWhE,EAAMwD,KACjBhC,SAAUxB,EAAMwB,SAChBU,MAAOlC,EAAMkC,MACb+B,UAAQ,EACRhD,UAAWoC,EAAQR,UACnBqB,YAAa,SAACd,GAAD,OAAY,cAAC,IAAD,2BAAiBA,GAAjB,IACe1B,MAAM,WACNtB,QAAUJ,EAAMwD,KAAQ,WAAa,WACrCF,WAAYH,EAAcC,EAAQC,EAASrD,GAC3CmE,gBAAe,2BACPf,EAAOe,iBADA,IAEXd,QAAS,CAACE,KAAMF,EAAQJ,WACxBmB,QAAQ,WAQvDC,EAAe,SAACrE,GACzB,IAAMqD,EAAUd,IAEhB,OACI,cAAC,IAAD,CAAcN,GAAG,UACT0B,QAAS3D,EAAMsE,SACfT,eAAgB,SAACC,GAAD,OAAYA,EAAOS,aACnCP,UAAWhE,EAAMwD,KACjBhC,SAAUxB,EAAMwB,SAChBU,MAAOlC,EAAMkC,MACb+B,UAAQ,EACRhD,UAAWoC,EAAQR,UACnBqB,YAAa,SAACd,GAAD,OAAY,cAAC,IAAD,2BAAiBA,GAAjB,IACe1B,MAAM,UACNtB,QAAUJ,EAAMwD,KAAQ,WAAa,WACrCF,WAAYH,EAAcC,EAAQC,EAASrD,GAC3CmE,gBAAe,2BACRf,EAAOe,iBADC,IAEZd,QAAS,CAACE,KAAMF,EAAQJ,WACxBmB,QAAQ,WAOtDI,EAAY,SAACxE,GACtB,IAAMqD,EAAUd,IACVb,EAAU1B,EAAM0B,MAAuB1B,EAAM0B,MAApB,YACzB+C,EAAM,IAAIC,KAEhB,OACI,cAAC,IAAD,CACgBzC,GAAG,OACHP,MAAOA,EACPI,KAAK,OACL6C,aAAa,aACbvE,QAAUJ,EAAMwD,KAAQ,WAAa,WACrCtB,MAAQlC,EAAMkC,MAASlC,EAAMkC,MAAM0C,cAAcC,UAAU,EAAG,IAAMJ,EAAIG,cAAcC,UAAU,EAAE,IAClGb,UAAWhE,EAAMwD,KACjBvC,UAAWoC,EAAQR,UACnBS,WAAYH,EAAc,KAAME,EAASrD,GACzCmE,gBAAiB,CAACd,QAAS,CAACE,KAAMF,EAAQJ,WAAYmB,QAAQ,GAC9D5C,SAAUxB,EAAMwB,YAK3BsD,EAAgB,SAAC9E,GAC1B,IAAMqD,EAAUd,IAChB,OACI,cAAC,IAAD,CACIN,GAAG,mBACHP,MAAM,UACNqD,WAAS,EACTC,KAAM,EACN/D,UAAWoC,EAAQR,UACnBoC,QAAS,GACT/C,MAAQlC,EAAMkC,MAAUlC,EAAMkC,MAAS,GACvC9B,QAAUJ,EAAMwD,KAAQ,WAAa,WACrCF,WAAYH,EAAc,KAAME,EAASrD,GACzCmE,gBAAiB,CAACd,QAAS,CAACE,KAAMF,EAAQJ,WAAYmB,QAAQ,GAC9DJ,UAAWhE,EAAMwD,KACjBhC,SAAUxB,EAAMwB,YAKf0D,EAAU,SAAClF,GACpB,IAAMqD,EAAUd,IAEhB,OACI,cAAC,IAAD,CACIN,GAAG,cACHP,MAAM,KACNQ,MAAQlC,EAAMkC,MAAUlC,EAAMkC,MAAS,GACvC6C,WAAS,EACT9D,UAAWoC,EAAQR,UACnBmC,KAAM,EACNC,QAAS,GACT7E,QAAUJ,EAAMwD,KAAQ,WAAa,WACrCF,WAAYH,EAAc,KAAME,EAASrD,GACzCmE,gBAAiB,CAACd,QAAS,CAACE,KAAMF,EAAQJ,WAAYmB,QAAQ,GAC9DJ,UAAWhE,EAAMwD,KACjBhC,SAAUxB,EAAMwB,YAMf2D,EAAkB,SAACnF,GAC5B,IAAMqD,EAAUd,IACZ6C,EAAU,CACV/B,QAAQ,CAACE,KAAMF,EAAQX,iBAO3B,OALI1C,EAAMqF,YAEND,EAAQE,UAAW,GAInB,cAAC,IAAD,CACQC,OAAQvF,EAAMkC,MACd9B,QAAUJ,EAAMwD,KAAQ,WAAa,WACrCgC,WAAcxF,EAAMkC,MAAqC,GAA5BlC,EAAM0B,MAAQ,YAC3CA,MAAO1B,EAAM0B,MACbQ,MAAQlC,EAAMkC,MAASlC,EAAMkC,MAAQ,GACrCoB,WAAY8B,EACZvC,WAAS,EACTrB,SAAUxB,EAAMwB,SAChB2C,gBAAiB,CACbd,QAAS,CACLE,KAAMF,EAAQL,YACdyC,QAASpC,EAAQH,cAErBkB,QAAQ,MAQfsB,EAAa,SAAC1F,GACvB,IAAMqD,EAAUd,IAChB,OACI,cAAC,IAAD,CACQb,MAAM,OACNQ,MAAQlC,EAAMkC,MAAUlC,EAAMkC,MAAS,IACvC9B,QAAUJ,EAAMwD,KAAQ,WAAa,WACrCF,WAAYH,EAAc,KAAME,EAASrD,GACzCmE,gBAAiB,CAACd,QAAS,CAACE,KAAMF,EAAQJ,WAAYmB,QAAQ,GAC9DnD,UAAWoC,EAAQR,UACnBmB,UAAWhE,EAAMwD,KACjBhC,SAAUxB,EAAMwB,YAMnBmE,EAAiB,SAAC3F,GAC3B,IAAMqD,EAAUd,IAChB,OACI,cAAC,IAAD,CAAYb,MAAM,YACNtB,QAAUJ,EAAMwD,KAAQ,WAAa,WACrCtB,MAAQlC,EAAMkC,MAASlC,EAAMkC,MAAQ,GACrCoB,WAAYH,EAAc,KAAME,EAASrD,GACzCmE,gBAAiB,CAACd,QAAS,CAACE,KAAMF,EAAQJ,WAAYmB,QAAQ,GAC9DnD,UAAWoC,EAAQR,UACnBmB,UAAWhE,EAAMwD,KACjBhC,SAAUxB,EAAMwB,YAMvBoE,EAAe,SAAC5F,GACzB,IAAMqD,EAAUd,IAChB,OACI,cAAC,IAAD,CAAgBb,MAAM,UACNtB,QAAUJ,EAAMwD,KAAQ,WAAa,WACrCtB,MAAQlC,EAAMkC,MAASlC,EAAMkC,MAAQ,GACrCoB,WAAYH,EAAc,KAAME,EAASrD,GACzCmE,gBAAiB,CAACd,QAAS,CAACE,KAAMF,EAAQJ,WAAWmB,QAAQ,GAC7DnD,UAAWoC,EAAQR,UACnBmB,UAAWhE,EAAMwD,KACjBhC,SAAUxB,EAAMwB,YAI3BqE,EAAY,SAAC7F,GACtB,IAAMqD,EAAUd,IAChB,OACI,cAAC,IAAD,CAAYb,MAAM,QACNQ,MAAQlC,EAAMkC,MAASlC,EAAMkC,MAAQ,GACrC9B,QAAUJ,EAAMwD,KAAQ,WAAa,WACrChC,SAAUxB,EAAMwB,SAChBuD,WAAS,EACTC,KAAOhF,EAAMgF,KAAQhF,EAAMgF,KAAO,EAClCC,QAAUjF,EAAMiF,QAAWjF,EAAMiF,QAAU,GAC3C3B,WAAYH,EAAc,KAAME,EAASrD,GACzCmE,gBAAiB,CAACd,QAAS,CAACE,KAAMF,EAAQJ,WAAYmB,QAAQ,MAKrE0B,EAAe,SAAC9F,GACzB,IAAMqD,EAAUd,IAChB,OACQ,cAAC,IAAD,CAAYb,MAAO1B,EAAM0B,MACb4B,WAAYH,EAAc,KAAME,EAASrD,GACzCmE,gBAAiB,CAACd,QAAS,CAACE,KAAMF,EAAQJ,WAAWmB,QAAQ,GAC7DlC,MAAOlC,EAAMkC,MACb9B,QAAUJ,EAAMwD,KAAQ,WAAa,WACrChC,SAAUxB,EAAMwB,YAK3BuE,EAAgB,SAAC/F,GAC1B,IAAMqD,EAAUd,IAChB,OACI,cAAC,IAAD,CACoBe,WAAY,CAACD,QAAS,CAACE,KAAMF,EAAQZ,eAAgBuD,WAAW,CAACC,IAAI,GAAGxC,kBAAmBzD,EAAMwD,MACjGW,gBAAiB,CAACd,QAAS,CAACE,KAAMF,EAAQJ,WAAYmB,QAAQ,GAC9DlC,MAAOlC,EAAMkC,MACbV,SAAUxB,EAAMwB,SAChBS,GAAG,WACHP,MAAM,WACNI,KAAK,SACL1B,QAAUJ,EAAMwD,KAAQ,WAAa,cAMpD0C,EAAc,SAAClG,GACxB,IAAMqD,EAAUd,IAChB,OACI,cAAC,IAAD,CAAcN,GAAG,SACb0B,QAAS3D,EAAMmG,QACftC,eAAgB,SAACC,GAAD,OAAYsC,OAAOtC,EAAOuC,eAC1C7E,SAAUxB,EAAMwB,SAChBU,MAAOlC,EAAMkC,MACb+B,UAAQ,EACRC,YAAa,SAACd,GAAD,OAAY,cAAC,IAAD,yBAAW1B,MAAM,gBACLtB,QAAUJ,EAAMwD,KAAQ,WAAa,YAClCJ,GAFf,IAGWE,WAAYH,EAAcC,EAAQC,EAASrD,GAC3CmE,gBAAe,2BACRf,EAAOe,iBADC,IAEZd,QAAS,CAACE,KAAMF,EAAQJ,WACxBmB,QAAQ,WAO9CkC,EAAa,SAACtG,GACvB,IAAMqD,EAAUd,IAChB,OACI,cAAC,IAAD,CAAcN,GAAG,QACb0B,QAAS3D,EAAMuG,OACf1C,eAAgB,SAACC,GAAD,OAAaA,EAAO0C,YAAeJ,OAAOtC,EAAO0C,aAAe,IAChFhF,SAAUxB,EAAMwB,SAChBU,MAAQlC,EAAMkC,MAAUlC,EAAMkC,MAAS,CAACsE,YAAa,MACrDxC,UAAWhE,EAAMwD,KACjBS,UAAQ,EACRC,YAAa,SAACd,GAAD,OAAY,cAAC,IAAD,yBAAW1B,MAAM,eACNtB,QAAUJ,EAAMwD,KAAQ,WAAa,YACjCJ,GAFf,IAGWE,WAAYH,EAAcC,EAAQC,EAASrD,GAC3CmE,gBAAe,2BACRf,EAAOe,iBADC,IAEZd,QAAS,CAACE,KAAMF,EAAQJ,WACxBmB,QAAQ,WAO9CqC,EAAW,SAACzG,GACrB,IAAMqD,EAAUd,IAChB,OACI,cAAC,IAAD,CAAcN,GAAG,MACb0B,QAAS3D,EAAM0G,KACf7C,eAAgB,SAACC,GAAD,OAAaA,EAAO6C,UAAaP,OAAOtC,EAAO6C,WAAa,IAC5EnF,SAAUxB,EAAMwB,SAChBU,MAAQlC,EAAMkC,MAAUlC,EAAMkC,MAAS,CAACyE,UAAW,MACnD3C,UAAWhE,EAAMwD,KACjBS,UAAQ,EACRC,YAAc,SAACd,GAAD,OAAY,cAAC,IAAD,yBAAW1B,MAAM,aACPtB,QAAUJ,EAAMwD,KAAQ,WAAa,YACjCJ,GAFd,IAGUE,WAAYH,EAAcC,EAAQC,EAASrD,GAC3CmE,gBAAe,2BACRf,EAAOe,iBADC,IAEZd,QAAS,CAACE,KAAMF,EAAQJ,WACxBmB,QAAQ,WAU9CwC,EAAsB,SAAC5G,GAChC,IAAMqD,EAAUd,IAChB,OACQ,cAAC,IAAD,CAAYb,MAAM,kBACN4B,WAAYH,EAAc,KAAME,EAASrD,GACzCmE,gBAAiB,CAACd,QAAS,CAACE,KAAMF,EAAQJ,WAAYmB,QAAQ,GAC9DlC,MAAQlC,EAAMkC,MAASlC,EAAMkC,MAAO,GACpC9B,QAAUJ,EAAMwD,KAAQ,WAAa,WACrChC,SAAUxB,EAAMwB,SAChBwC,UAAWhE,EAAMwD,QAK5BqD,EAAU,SAAC7G,GACpB,IAAMqD,EAAUd,IAChB,OACQ,cAAC,IAAD,CAAYb,MAAM,YACN4B,WAAYH,EAAc,KAAME,EAASrD,GACzCmE,gBAAiB,CAACd,QAAS,CAACE,KAAMF,EAAQJ,WAAYmB,QAAQ,GAC9DlC,MAAQlC,EAAMkC,MAASlC,EAAMkC,MAAQ,IACrC9B,QAAUJ,EAAMwD,KAAQ,WAAa,WACrChC,SAAUxB,EAAMwB,SAChBwC,UAAWhE,EAAMwD,QAK5BsD,EAAuB,SAAC9G,GACjC,IAAMqD,EAAUd,IAChB,OACI,cAAC,IAAD,CAAcN,GAAG,WACjB0B,QAAS3D,EAAM2D,QACfE,eAAgB,SAACC,GAAD,OAAYA,GAC5BtC,SAAUxB,EAAMwB,SAChBU,MAAQlC,EAAMkC,MAAUlC,EAAMkC,MAAS,GACvC8B,UAAWhE,EAAMwD,KACjBS,UAAQ,EACRC,YAAc,SAACd,GAAD,OAAY,cAAC,IAAD,yBAAW1B,MAAM,mBACPtB,QAAUJ,EAAMwD,KAAQ,WAAa,YACjCJ,GAFd,IAGUE,WAAYH,EAAcC,EAAQC,EAASrD,GAC3CmE,gBAAe,2BACRf,EAAOe,iBADC,IAEZd,QAAS,CAACE,KAAMF,EAAQJ,WACxBmB,QAAQ,WAW1C2C,EAAiB,SAAC/G,GAC3B,IAAMqD,EAAUd,IAEhB,OAEK,cAAC,IAAD,CAAWb,MAAM,aACN4B,WAAYH,EAAc,KAAME,EAASrD,GACzCmE,gBAAiB,CAACd,QAAS,CAACE,KAAMF,EAAQJ,WAAYmB,QAAQ,GAC9DlC,MAAOlC,EAAMkC,MACb9B,QAAS,WACT4D,UAAU,M,sbC5bxBzB,EAAYC,YAAW,CAC3Be,KAAM,CACJ9C,MAAO,QAETuG,UAAW,CACTC,UAAW,SACXlF,QAAS,OACTmF,cAAe,SACfzG,MAAO,OACP0G,UAAW,SACXxE,OAAQ,OACRyE,UAAU,UAGZC,YAAa,CACXtF,QAAS,OACTmF,cAAe,SACfzG,MAAO,OACP0G,UAAW,OACXxE,OAAO,OACPyE,UAAW,SACX5G,aAAc,IAEhB8G,UAAW,CACTC,gBAAiB,UACjBpH,MAAO,SAETqH,WAAY,CACVD,gBAAkB,UAClBpH,MAAO,SAGTsH,gBAAkB,CAChB1F,QAAS,OACTmF,cAAe,SACfQ,WAAY,aACZC,UAAW,IACXP,UAAW,SACXQ,IAAK,EACLC,OAAQ,sBAEVzG,IAAK,CACH,QAAS,CACP0G,aAAc,YAKPC,EAAc,SAAC/H,GAExB,IAAMqD,EAAUd,IAFkB,EAGVyF,IAAMC,UAAS,GAHL,mBAG3BC,EAH2B,KAGrBC,EAHqB,KAKlC,OACE,eAAC,IAAMC,SAAP,WACE,eAAC,IAAD,CAAUnH,UAAWoC,EAAQjC,IAA7B,UAEQpB,EAAMqI,MAAMC,KAAI,SAACC,EAAM9G,GAAP,OAAa,cAAC,IAAD,CAAmB+G,MAAc,IAAN/G,EAAW,OAAS,SAA/C,SAA0D8G,GAA1C9G,MAEjD,cAAC,IAAD,UACI,cAAC,IAAD,CAAYgH,aAAW,aAAc3H,KAAK,QAAQT,QAAS,kBAAM8H,GAASD,IAA1E,SACMA,EAAO,cAAC,IAAD,IAA0B,cAAC,IAAD,WAI/C,cAAC,IAAD,UACE,cAAC,IAAD,CAAWQ,QAAS1I,EAAMqI,MAAMM,OAAS,EAAGH,MAAM,SAASvI,MAAO,CAACC,QAAS,mBAA5E,SACI,cAAC,IAAD,CAAU0I,GAAIV,EAAMW,QAAQ,OAAOC,eAAa,EAAhD,SACE,cAAC,IAAD,CAAK7H,UAAWoC,EAAQoE,gBAAxB,SAEIzH,EAAM+I,qBAabC,EAAM,SAAChJ,GACAuC,IAChB,OACI,cAAC,IAAD,UAEQvC,EAAMqI,MAAMC,KAAI,SAACC,EAAM9G,GAAP,OAAY,cAAC,IAAD,CAAmB+G,MAAc,IAAN/G,EAAW,OAAS,SAA/C,SAA0D8G,GAA1C9G,SAM/CwH,EAAc,SAACjJ,GAC1B,IAAMqD,EAAUd,IAChB,OACE,cAAC,IAAD,CAAgBtB,UAAWoC,EAAQgE,YAAalG,UAAW+H,IAA3D,SACE,cAAC,IAAD,UACE,cAAC,IAAD,UAEIlJ,EAAMgF,YAQX,SAASmE,EAASnJ,GACvB,IAAMqD,EAAUd,IAEhB,OACE,cAAC,IAAD,CAAgBpB,UAAW+H,IAAOjI,UAAWoC,EAAQ2D,UAAWoC,UAAW,EAA3E,SACU,cAAC,IAAD,CAAOC,cAAY,EAAnB,SACGrJ,EAAMU,aAMhB,SAAS4I,EAAatJ,GAC3B,IAAMqD,EAAUd,IAChB,OACE,cAAC,IAAD,UACE,cAAC,IAAD,UAEEyF,IAAMuB,SAASjB,IAAKtI,EAAMU,UAAU,SAAC6H,EAAM9G,GAAP,OAAa,cAAC,IAAD,CAAmB+G,MAAc,IAAN/G,EAAW,OAAS,SAAUR,UAAWoC,EAAQiE,UAA5E,SAAwFiB,GAAxE9G,UAOlE,SAAS+H,EAAaxJ,GAC3B,OACE,cAAC,IAAD,UACGA,EAAMU,WAKN,SAAS+I,EAAYzJ,GAE1B,OACI,cAAC,IAAD,UAEIgI,IAAMuB,SAASjB,IAAItI,EAAMU,UAAU,SAAC6H,EAAM9G,GAAP,OAAY,cAAC,IAAD,CAAmB+G,MAAc,IAAN/G,EAAW,OAAS,SAA/C,SAA0D8G,GAA1C9G,QA6B1DiI,IAvBO,SAAC1J,GACnB,IAAMqD,EAAUd,IAChB,OACM,cAAC,IAAD,CAAgBpB,UAAW+H,IAAOjI,UAAWoC,EAAQ2D,UAAWoC,UAAW,EAA3E,SACI,eAAC,IAAD,CAAOC,cAAY,EAAnB,UACE,cAAC,IAAD,UACE,cAAC,IAAD,UAEErJ,EAAMsH,UAAUgB,KAAK,SAACC,EAAM9G,GAAP,OAAa,cAAC,IAAD,CAAmB+G,MAAc,IAAN/G,EAAW,OAAS,SAAUR,UAAWoC,EAAQiE,UAA5E,SAAuF,4BAAIiB,KAA3E9G,UAItD,cAAC,IAAD,UAEIzB,EAAMgF,c,wIC9KpBzC,EAAYC,aAAW,iBAAO,CAChCmH,OAAS,CACL7G,SAAW,EACXf,QAAS,OACTmF,cAAe,MACfzG,MAAO,OACPkC,OAAQ,OACRmF,aAAc,oBACd8B,cAAe,GACfpJ,aAAc,IAEhBqJ,mBAAoB,CAClB9H,QAAQ,OACR2F,WAAY,SACZoC,eAAgB,SAChBlC,IAAK,EACLmC,UAAW,IAEbnB,GAAG,CACD7H,SAAU,QAKZiJ,EAAc,SAAChK,GAGjB,OACI,cAAC,IAAD,CACEiC,GAAG,iBACHT,SAAUxB,EAAMwB,SAChBmC,QAAS3D,EAAM2D,QACfsG,aAAc,CAAEhK,MAAO,CAAE0H,UAAW,UACpC1H,MAAO,CAACQ,MAAO,OAAQ0G,UAAU,UACjCtD,eAAgB7D,EAAM6D,eACtBK,YAAa,SAACd,GAAD,OAAY,cAAC,IAAD,2BACaA,GADb,IAEShD,QAAQ,WACRkD,WAAU,2BAAMF,EAAOE,YAAb,IAAyBD,QAAS,CAACE,KAAMvD,EAAMiB,oBAQvFiJ,EAAY,SAAClK,GACvB,IAAMqD,EAAUd,IAChB,OACI,qBAAKtB,UAAWoC,EAAQsG,OAAxB,SACU,eAAC,IAAD,CAAOvJ,QAAQ,KAAf,UACGJ,EAAM0B,MACP,sBAAKT,UAAWoC,EAAQwG,mBAAxB,UACE,cAACG,EAAD,CAAa/I,UAAWoC,EAAQuF,GAAIpH,SAAUxB,EAAMwB,SAAUmC,QAAS3D,EAAM2D,QAASE,eAAgB7D,EAAM6D,kBAC1G7D,EAAMmK,OAAS,cAAC,IAAD,CAAWvJ,MAAM,MAAMP,QAASL,EAAMoK,6B,+JCvDvE7H,EAAYC,aAAW,iBAAO,CAEhC6H,cAAe,CACXtI,QAAS,OACTmF,cAAc,SACdU,IAAK,GACL1H,QAAU,sBACVoK,aAAc,EACdP,UAAW,IAGfvG,KAAM,CACFzB,QAAS,OACTmF,cAAe,eAEnBqD,WAAW,CACPxJ,SAAU,GACVgB,QAAQ,OACRmF,cAAe,UAEnBsD,QAAS,CACL5C,IAAK,GACL7F,QAAS,OACT0I,SAAU,OACVC,SAAU,WACVhD,WAAY,SACZiD,SAAU,KAGdpC,KAAO,CACHxG,QAAS,OACToF,UAAU,UACVyD,WAAY,EACZhB,cAAe,GAEnB3H,GAAG,CACCxB,MAAO,OACPmJ,cAAe,QAKjBiB,E,kDAEF,WAAY7K,GACX,IAAD,8BACI,cAAMA,IAOV8K,WAAa,WACT,IAAM3K,EAAU,EAAK4K,MAAMvH,KAAoB,UAAZ,UACnC,EAAKwH,SAAS,CACExH,MAAO,EAAKuH,MAAMvH,KAClBrD,MAAOA,KAZ3B,EAiBA8K,YAAc,SAACC,GACX,EAAKJ,aACL,EAAK9K,MAAMmL,WAAWD,IAjBtB,EAAKH,MAAQ,CACTvH,MAAM,EACNrD,MAAO,WAJf,E,qDAsBS,IAAD,OAEGkD,EAAW+H,KAAKpL,MAAhBqD,QAFH,EAGkB+H,KAAKL,MAAd5K,GAHT,EAGGqD,KAHH,EAGSrD,OAGb,OACI,eAAC,IAAD,CAAOc,UAAWoC,EAAQgH,cAAejB,UAAW,EAApD,UACKgC,KAAKpL,MAAMwD,MACR,qBAAKvC,UAAWoC,EAAQG,KAAxB,SACI,cAAC,IAAD,CAAYnD,QAAS+K,KAAKN,WAAY7J,UAAWoC,EAAQkH,WAAYpK,MAAOA,OAI/EiL,KAAKpL,MAAMwD,MAEZ,qBAAKvD,MAAO,CAAC2K,WAAY,MAE7B,qBAAK3J,UAAWoC,EAAQpB,GAAxB,SAA6BmJ,KAAKpL,MAAMU,SAAS,KACjD,sBAAKO,UAAWoC,EAAQmH,QAAxB,UACKxC,IAAMuB,SAASjB,IAAI8C,KAAKpL,MAAMU,UAAU,SAAC2K,EAAO5J,GAE7B,IAAI8G,EADR,GAAG9G,EAAI,EAcH,OATI8G,EAFD8C,EAAMrL,MAAMsL,OAEJtD,IAAMuD,aAAaF,EAAO,CAAC7H,MAAM,IAEpC,EAAKxD,MAAMwD,KAERwE,IAAMuD,aAAaF,EAAO,CAAC7H,KAAM,EAAKuH,MAAMvH,OAG5CwE,IAAMuD,aAAaF,EAAO,CAAC7H,MAAM,IAErC,qBAAKvC,UAAWoC,EAAQkF,KAAxB,SAAuCA,GAAJ9G,MAI9D,qBAAKxB,MAAO,CAAC4B,WAAY,OAAQkI,UAAW,IAA5C,SAAmDqB,KAAKpL,MAAMwD,MAAQ4H,KAAKpL,MAAMwL,QAAU,cAAC,IAAD,CAAmBnL,QAAS+K,KAAKH,0B,GAhE7HjD,IAAMyD,WAuEV,SAASC,EAAY1L,GAChC,IAAMqD,EAAUd,IAChB,OAAO,cAACsI,EAAD,aAAMxH,QAASA,GAAarD,M,mQClHlB2L,E,kDAEjB,WAAY3L,GACX,IAAD,8BACI,cAAMA,IAwCV4L,QAAU,SAACV,EAAOzJ,GACd,EAAKuJ,UAAS,SAACa,GACX,IAAMC,EAAQD,EAAUC,MAExB,OADAA,EAAMrK,GAAGsK,MAAQb,EAAMc,OAAO9J,MACvB4J,MA7Cf,EAiDAG,UAAY,SAACxK,EAAGS,GACZ,EAAK8I,UAAS,SAACa,GACX,IAAMC,EAAQD,EAAUC,MAExB,OADAA,EAAMrK,GAAGF,OAASW,EACX4J,MArDf,EAyDAI,iBAzDA,sBAyDmB,gCAAAC,EAAA,sDAETC,EAAiB,CACnBC,OAAQ,SACRC,KAAM,GACN9F,YAAa,KACbG,UAAW,EAAK3G,MAAMuM,UACtBhL,OAAQ,MAGJE,EAAI,EAVG,YAUAA,EAAI,EAAKsJ,MAAMe,MAAMnD,QAVrB,oBAYsB,GAA9B,EAAKoC,MAAMe,MAAMrK,GAAGF,OAZZ,uBAcP6K,EAAe7K,QAAS,EACxB6K,EAAeE,KAAO,EAAKvB,MAAMe,MAAMrK,GAAGsK,MAfnC,4BAmBPK,EAAe7K,OAAS,EAAKwJ,MAAMe,MAAMrK,GAAGF,OAnBrC,QAU6BE,IAV7B,uBAuBT+K,EAAgB,CAClBC,OAAQ,MACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAUT,IAIzBU,MAAM,2BAA6B,EAAK9M,MAAMqG,aAAcmG,GACvDO,MAAK,SAACC,GACH,GAAGA,EAAIC,GAEH,OAAOD,EAAIE,OAGfF,EAAIE,OAAOH,MAAK,SAACxH,GAAD,OAAW,EAAKvF,MAAMmN,cAAc,CAAC5H,OAAO,EAAM6H,KAAM7H,EAAM8H,gBAEjFC,OAAM,SAAC/H,GACJ,EAAKvF,MAAMmN,cAAc,CAAC5H,OAAO,EAAM6H,KAAM7H,EAAM8H,aAxC5C,4CAzDnB,EAqGAE,YAAc,WAEV,IAAMC,EAAa,CACfC,OAAQ,EAAKzN,MAAMyN,OACnB3B,MAAO,EAAKf,MAAMe,OAGhB4B,EAAc,CAChBjB,OAAQ,MACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAUW,IAGtB,EAAKxN,MAAMqG,cAEV,EAAK6F,mBAGTY,MAAM,yBAA2B,EAAK9M,MAAMuM,UAAWmB,GAClDX,MAAK,SAACC,GACH,GAAGA,EAAIC,GAEH,OAAOD,EAAIE,OAEfF,EAAIE,OAAOH,MAAK,SAACY,GAAD,OAAS,EAAK3N,MAAMmN,cAAc,CAAC5H,OAAM,EAAM6H,KAAMO,EAAIN,gBAE5EN,MAAK,SAACC,GACAA,GAEC,EAAKhN,MAAMmN,cAAc,CAAC5H,OAAO,EAAO6H,KAAM,gCAGrDE,OAAM,SAAAK,GAAG,OAAI,EAAK3N,MAAMmN,cAAc,CAAC5H,OAAO,EAAM6H,KAAMO,EAAIN,cAnInE,EAAKtC,MAAS,CACVe,MAAQ,MAIZ,EAAK8B,YAAc,CACf,QACA,YACA,UACA,WACA,SAGJ,EAAKC,WAAa,CACd,QACA,QACA,OACA,QACA,OAGJ,EAAKC,iBAAmB,CACpB,QACA,cACA,aACA,WA3BR,E,gEAgCI1C,KAAKJ,SAAS,CAACc,MAAOV,KAAKpL,MAAM8L,U,yCAGlBiC,GACZA,GAAa3C,KAAKpL,OACjBoL,KAAKJ,SAAS,CAACc,MAAOV,KAAKpL,MAAM8L,U,+BAmGhC,IAAD,OACGA,EAAQV,KAAKL,MAAbe,MACP,OACI,eAAC,IAAM1D,SAAP,WACA,cAAC,IAAD,yBACC0D,GACG,cAAC,IAAD,CACI9G,KAAM8G,EAAMxD,KAAI,SAAC0F,EAAMvM,GAAP,OAAa,cAAC,IAAD,CAAc4G,MAAO,CAAI,4BAAI2F,EAAKC,OACnB,cAAC,IAAD,CAAY1M,OAAQyM,EAAKzM,OAAQE,EAAGA,EAAGD,SAAU,EAAKyK,YACtD,cAAC,IAAD,CAAY/J,MAAO8L,EAAKjC,MAAOvK,SAAU,SAAC0M,GAAD,OAAO,EAAKtC,QAAQsC,EAAGzM,IAAIuD,KAAM,EAAGC,QAAS,MAF1FxD,SAO3C2J,KAAKpL,MAAMmO,KACZ,cAACC,EAAA,EAAD,CAAQhO,QAAQ,YAAYH,MAAO,CAAC4H,OAAQ,IAAK1H,MAAM,UAAUE,QAAS+K,KAAKmC,YAA/E,iC,GA1JuBvF,IAAMyD,W,gCCDvClJ,EAAYC,aAAW,iBAAO,CAChCe,KAAM,CACFxB,QAAS,OACT6F,IAAK,GACL9E,SAAU,EACV5C,QAAS,sBACT6J,UAAW,GACXvJ,aAAc,QAKhB6N,E,kDAEF,WAAYrO,GACX,IAAD,8BACI,cAAMA,IA8BVsO,UAAY,SAACpD,EAAOqD,GACbA,EACCzB,MAAM,gBAAkByB,EAAOlI,cAC1B0G,MAAK,SAACC,GACH,GAAGA,EAAIC,GACH,OAAOD,EAAIE,OAGXsB,QAAQC,IAAI,6BAGnB1B,MAAK,SAACC,GACH,IAAM0B,EAAW1B,EAAO,EAAKhN,MAAMsE,SAASqK,MAAK,SAACC,GAAD,OAAUA,EAAKC,YAAc7B,EAAI6B,aAAa,KAC/F,EAAK7D,SAAS,CAACuD,OAAQvB,EAAK0B,QAASA,OAExCpB,OAAM,SAACK,GAAD,OAASa,QAAQC,IAAId,MAGhC,EAAK3C,SAAS,CAACuD,OAAQ,QAjD/B,EAqDAO,WAAa,SAAC5D,EAAOwD,GACjB,EAAK1D,SAAS,CAAEuD,OAAQ,KAAMG,QAASA,KAtD3C,EAyDAK,QAAU,WAAO,IAAD,EAEe,EAAKhE,MAAzB2D,EAFK,EAELA,QAASH,EAFJ,EAEIA,OAEhB,GAAGG,GAAWH,EAAQ,CAElB,IAAIzC,EAAQ,GAEa,aAAtB4C,EAAQG,UACP,EAAKf,iBAAiBxF,KAAI,SAAC2F,GAAD,OAAUnC,EAAMkD,KAAK,CAACzN,OAAQ,KAAM0M,KAAMA,EAAMlC,MAAO,QAGjF,EAAK6B,YAAYtF,KAAI,SAAA2F,GAAI,OAAInC,EAAMkD,KAAK,CAACzN,OAAQ,KAAM0M,KAAMA,EAAMlC,MAAQ,QAG/E,EAAK/L,MAAM+O,QAAQ,CACfL,QAASA,EACTrI,aAAekI,EAAUA,EAAOlI,aAAe,KAC/C4I,KAAOV,EAAUA,EAAOU,KAAO,KAC/BC,MAAO,GACPpD,MAAOA,MA3Ef,EAAKf,MAAQ,CACT2D,QAAS,KACTH,OAAQ,MAGZ,EAAKX,YAAc,CACf,QACA,YACA,UACA,WACA,SAGJ,EAAKC,WAAa,CACd,QACA,QACA,OACA,QACA,OAGJ,EAAKC,iBAAmB,CACpB,QACA,cACA,aACA,WA3BR,E,qDAqFC,IAAD,EAC8B1C,KAAKL,MAAxBwD,EADX,EACWA,OAAQG,EADnB,EACmBA,QADnB,EAEyCtD,KAAKpL,MAAnCqD,EAFX,EAEWA,QAASiB,EAFpB,EAEoBA,SAAU6B,EAF9B,EAE8BA,QAG1B,OACI,eAAC+C,EAAA,EAAD,CAAOE,UAAW,EAAGnI,UAAWoC,EAAQE,KAAxC,UACQ,cAAC,IAAD,CAAarB,MAAOqM,EAAQpI,QAASA,EAAS3E,SAAU4J,KAAKkD,UAAW9K,MAAI,IAC5E,cAAC,IAAD,CAActB,MAAOwM,EAASpK,SAAUA,EAAU9C,SAAU4J,KAAK0D,WAAYtL,MAAI,IACjF,cAAC,IAAD,CAAW5C,MAAM,MAAMP,QAAS+K,KAAK2D,iB,GAjGlC/G,IAAMyD,WAwGd,SAAS0D,EAAQnP,GAE5B,IAAMqD,EAAUd,IAChB,OAAO,cAAC,EAAD,aAAUc,QAASA,GAAarD,I,ICpGtBoP,E,kDAEjB,WAAYpP,GACX,IAAD,8BACI,cAAMA,IAiCVqP,UAAY,WAAO,IAAD,EAE4C,EAAKtE,MAAxDpE,EAFO,EAEPA,UAAW2I,EAFJ,EAEIA,SAAUC,EAFd,EAEcA,QAASlH,EAFvB,EAEuBA,MAAOmH,EAF9B,EAE8BA,OAAQC,EAFtC,EAEsCA,GAEpD,GAAG9I,GAAa2I,GAAYC,EAAQ,CAEhC,IAAMG,EAAS,CACX/I,UAAWA,EACXgJ,WAAYL,EAASM,IACrBvH,MAAOA,EACPkH,QAASA,EACTC,OAAQA,EACRC,GAAIA,GAGF/C,EAAU,CACZD,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU6C,IAIzB5C,MAAM,mBAAoBJ,GACrBK,MAAK,SAACC,GACH,GAAGA,EAAIC,GAEH,OAAOD,EAAIE,OAGfF,EAAIE,OAAOH,MAAK,SAAAY,GAAG,OAAI,EAAK3C,SAAS,CAACqC,QAAQ,CAAC9H,OAAM,EAAM6H,KAAMO,EAAIN,iBAGxEN,MAAK,SAAC8C,GACAA,IAEC,EAAKC,YAAYD,EAAOxH,MAAOwH,EAAOlJ,WACtC,EAAK3G,MAAM+P,WAAW,CAACpJ,UAAWkJ,EAAOlJ,UAAW2I,SAAUA,IAC9D,EAAKtE,SAAS,CACV3C,MAAOwH,EAAOxH,MACdiH,SAAUA,EACVC,QAAS,IAAI7K,KAAKmL,EAAON,SACzBE,GAAII,EAAOJ,GACXD,OAAQK,EAAOL,OACfE,QAAQ,EACRlE,QAAQ,QAKnB8B,OAAM,SAAAK,GAAG,OAAI,EAAK3C,SAAS,CAACqC,QAAS,CAAC9H,OAAO,EAAM6H,KAAM,kCAG9D,EAAKpC,SAAS,CAACqC,QAAQ,CACnB9H,OAAO,EACP6H,KAAM,oDAxFlB,EA6FA4C,iBAAmB,WAAO,IAAD,EAE8B,EAAKjF,MAAjD0E,EAFc,EAEdA,GAAID,EAFU,EAEVA,OAAQF,EAFE,EAEFA,SAAUC,EAFR,EAEQA,QAAS5I,EAFjB,EAEiBA,UAEhC+F,EAAU,CACZD,OAAQ,MACRC,QAAS,CAAC,eAAiB,oBAC3BC,KAAMC,KAAKC,UAAU,CACjB4C,GAAIA,EACJD,OAAQA,EACRG,WAAYL,EAASM,IACrBL,QAASA,KAIjBzC,MAAM,2BAA6BnG,EAAU+F,GACxCK,MAAK,SAACC,GACH,GAAGA,EAAIC,GAEH,OAAO,EAAKjC,SAAS,CAACqC,QAAS,CAAC9H,OAAO,EAAO6H,KAAM,4BAA6B5B,QAAQ,IAG7FwB,EAAIE,OAAOH,MAAK,SAACY,GAAD,OAAS,EAAK3C,SAAS,CAACqC,QAAS,CAAC9H,OAAO,EAAM6H,KAAMO,EAAIN,iBAE5EC,OAAM,SAACK,GAAD,OAAS,EAAK3C,SAAS,CAACqC,QAAS,CAAC9H,OAAO,EAAM6H,KAAMO,EAAIN,eArHxE,EAyHA4C,YAAc,WACVnD,MAAM,uBACDC,MAAK,SAACC,GACH,GAAGA,EAAIC,GAEH,OAAOD,EAAIE,OAGfF,EAAIE,OAAOH,MAAK,SAACY,GAAD,OAAS,EAAK3C,SAAS,CAACqC,QAAQ,CAAC9H,OAAO,EAAM6H,KAAMO,EAAIN,iBAG3EN,MAAK,SAACrG,GACCA,GAEJ,EAAKsE,SAAS,CAACkF,WAAYxJ,EACXC,UAAW,KACX0B,MAAO,KACPqH,QAAQ,OAG3BpC,OAAM,SAACK,GAAD,OAAS,EAAK3C,SAAS,CAACqC,QAAS,CAAC9H,OAAO,EAAM6H,KAAMO,EAAIN,eA7IxE,EAgJA8C,SAAW,SAACxJ,GACRmG,MAAM,aAAenG,GAChBoG,MAAK,SAACC,GACH,GAAGA,EAAIC,GAEH,OAAOD,EAAIE,OAGfF,EAAIE,OAAOH,MAAK,SAAAY,GAAG,OAAI,EAAK3C,SAAS,CAACqC,QAAS,CAAC9H,OAAO,EAAM6H,KAAMO,EAAIN,iBAE1EN,MAAK,SAACqD,GAECA,IAEJ,EAAKN,YAAYM,EAAI/H,MAAO+H,EAAIzJ,WAEhC,EAAKqE,SAAS,CACErE,UAAWyJ,EAAIzJ,UACf2I,SAAU,EAAKtP,MAAM4D,UAAU+K,MAAK,SAACW,GAAD,OAAcA,EAASM,MAAQQ,EAAIT,cACvEJ,QAAS,IAAI7K,KAAK0L,EAAIb,SACtBE,GAAIW,EAAIX,GACRD,OAAQY,EAAIZ,OACZnH,MAAO+H,EAAI/H,MACXqH,QAAQ,QAI3BpC,OAAM,SAAAK,GAAG,OAAI,EAAK3C,SAAS,CAACqC,QAAS,CAAC9H,OAAM,EAAM6H,KAAMO,EAAIN,eA3KrE,EA8KAgD,OAAS,SAACnF,EAAOkF,GACTA,EAKA,EAAKD,SAASC,EAAIzJ,WAHlB,EAAKsJ,eAjLb,EAwLAK,iBAAmB,SAACpF,GAEhB,IAAMqF,EAAMC,SAAStF,EAAMc,OAAO9J,OAC/BuO,OAAOC,UAAUH,GAClB,EAAKvF,SAAS,CAACrE,UAAW6J,SAASD,KAGnC,EAAKvF,SAAS,CAAC2F,UAAW,QA/LhC,EAmMAC,aAAe,SAAC1F,GACZ,EAAKF,SAAS,CAACyE,GAAIvE,EAAMc,OAAO9J,MAAOsJ,QAAQ,KApMnD,EAuMAqF,iBAAmB,SAAC3F,GAChB,EAAKF,SAAS,CAACwE,OAAQtE,EAAMc,OAAO9J,MAAOsJ,QAAQ,KAxMvD,EA2MAsF,eAAiB,SAAC5F,GACd,EAAKF,SAAS,CAAC+F,SAAU,IAAIrM,KAAKwG,EAAMc,OAAO9J,OAAQsJ,QAAQ,KA5MnE,EA+MAwF,mBAAqB,SAAC9F,EAAOoE,GACzB,EAAKtE,SAAS,CAACsE,SAAUA,EAAU9D,QAAQ,KAhN/C,EAoNAuD,QAAU,SAACxG,GAEP,IAAM0I,EAAW,CACbpC,UAAWtG,EAAKmG,QAAQG,UACxB/C,MAAOvD,EAAKuD,MACZzF,aAAckC,EAAKlC,aACnB6I,MAAO3G,EAAK2G,OAGhB,EAAKlE,UAAS,SAACa,GACX,IAAMqF,EAAQ,sBAAOrF,EAAUxD,OAAjB,CAAwB4I,IAEtC,OADA,EAAKnB,YAAYoB,EAAUrF,EAAUlF,WAC7B,CAAC0B,MAAQ6I,OAhOzB,EAqOAxB,OAAS,WACL,EAAK1E,SAAS,CAAErE,UAAW,KACX4I,QAAS,IAAI7K,KACb2D,MAAO,GACPrD,KAAM,KACNsK,SAAU,KACVG,GAAI,KACJD,OAAQ,KACRE,QAAQ,KA7O5B,EAgPA7L,eAAiB,SAACC,GACd,OAAYA,EAAO6C,UAAY,MAAQ7C,EAAOwL,SAASvL,cAjP3D,EA4PA+L,YA5PA,uCA4Pc,WAAMzH,EAAOkE,GAAb,mBAAAJ,EAAA,yDAEJnH,EAAO,GAETqD,GAAUA,EAAMM,OAJV,qDAAAwD,EAAA,iBASF1K,GATE,yBAAA0K,EAAA,yDAWFoC,OAXE,EAYFG,OAZE,GAcHrG,EAAM5G,GAAG4E,aAdN,iCAgBqByG,MAAM,gBAAkBzE,EAAM5G,GAAG4E,cAC/BiH,OAAM,SAAC/H,GAAD,OAAU,EAAKyF,SAAS,CAACqC,QAAS,CAAC9H,OAAO,EAAM6H,KAAM7H,EAAM8H,cAjBzF,YAgBI8D,EAhBJ,QAoBUlE,GApBV,iCAsBiBkE,EAASjE,OAtB1B,OAsBEqB,EAtBF,OAuBEG,EAAU,EAAK1O,MAAMsE,SAASqK,MAAK,SAACC,GAAD,OAAUA,EAAKC,YAAcN,EAAOM,aAvBzE,yCA0BsBsC,EAASjE,OA1B/B,QA0BQ3H,EA1BR,OA2BE,EAAKyF,SAAS,CAACqC,QAAS,CAAC9H,OAAO,EAAM6H,KAAM7H,EAAM8H,WA3BpD,gCAgCFqB,EAAU,EAAK1O,MAAMsE,SAASqK,MAAK,SAACC,GAAD,OAAUA,EAAKC,YAAcxG,EAAM5G,GAAGoN,aAhCvE,QAoCAuC,EAAY,cAAC,EAAD,CACMjD,IAAK,EAAKpD,MAAM2E,OAChB5D,MAAOzD,EAAM5G,GAAGqK,MAChB2B,OAAQpF,EAAM5G,GAAGmO,IACjBvJ,aAAegC,EAAM5G,GAAG4E,aAAgBgC,EAAM5G,GAAG4E,aAAe,KAChEkG,UAAWA,EACXY,cAAe,SAACE,GAAD,OAAa,EAAKrC,SAAS,CAACqC,QAASA,OAGtEgE,EAAO,CAAEhJ,EAAM5G,GAAG4E,aACRqI,EAAQnK,YACRmK,EAAQG,UACPN,EAAUA,EAAOU,KAAO,GACzB5G,EAAM5G,GAAGyN,OAGzBlK,EAAKgK,KACD,cAAC,IAAD,CAEY3G,MAAOgJ,EACPtI,SAAU,CAACqI,IAFN3P,IAtDf,2CASFA,EAAI,EATF,YASKA,EAAI4G,EAAMM,QATf,0CASFlH,GATE,eASuBA,IATvB,uBA6DV,EAAKuJ,SAAS,CAAChG,KAAMA,IA7DX,4CA5Pd,wDAEI,EAAK+F,MAAQ,CACT0E,GAAI,KACJD,OAAQ,KACRD,QAAS,KACTlH,MAAO,KACPiH,SAAU,KACV3I,UAAW,KAGX+I,QAAQ,EACRrC,QAAS,KACT7B,QAAQ,EAERxG,KAAM,KAENkL,WAAY,MAjBpB,E,gEAsBI,IAAOnF,EAAQK,KAAKpL,MAAMsR,SAASvG,MAE/BA,EAIIA,EAAMpE,WAEVyE,KAAK+E,SAASpF,EAAMpE,WAJpByE,KAAK6E,gB,+BAkSJ,IAAD,SAaD7E,KAAKL,MAZAmF,EADJ,EACIA,WACAvJ,EAFJ,EAEIA,UACA+I,EAHJ,EAGIA,OACAlE,EAJJ,EAIIA,OACA+D,EALJ,EAKIA,QACAE,EANJ,EAMIA,GACAD,EAPJ,EAOIA,OACAF,EARJ,EAQIA,SACAjC,EATJ,EASIA,QACAhF,EAVJ,EAUIA,MACArD,EAXJ,EAWIA,KAXJ,EAeyCoG,KAAKpL,MAA3C4D,EAfH,EAeGA,UAAWU,EAfd,EAecA,SAAU6B,EAfxB,EAewBA,QAASO,EAfjC,EAeiCA,KAErC,OACI,eAAC6K,EAAA,EAAD,WAEI,cAACC,EAAA,EAAD,CAAW9P,MAAM,OACLiC,QAAS+C,EACT7C,eAAgBuH,KAAKvH,eACrBuG,iBAAkBgB,KAAKsE,OACvBlO,SAAU4J,KAAKiF,SAG1BhD,GAAW,cAACoE,EAAA,EAAD,CAASlM,MAAO8H,EAAQ9H,MAAO6H,KAAMC,EAAQD,KAAMsE,MAAO,kBAAM,EAAK1G,SAAS,CAACqC,QAAS,UAGhG6C,IAAevJ,IAAc+I,GAC7B,eAAC6B,EAAA,EAAD,WACI,cAACI,EAAA,EAAD,CAAYvR,QAAQ,KAApB,yBACA,cAACwR,EAAA,EAAD,UAEQ1B,EAAW5H,KAAI,SAACC,EAAM9G,GAClB,IAAM6N,EAAW1L,EAAU+K,MAAK,SAACkD,GAAD,OAAOA,EAAEjC,MAAQrH,EAAKoH,cAChDmC,EAAO,IAAIpN,KAAK6D,EAAKgH,SAG3B,OACI,cAACnB,EAAA,EAAD,CAAQnO,MAAO,CAAC8R,cAAe,QAAS1R,QAAS,kBAAM,EAAK8P,SAAS5H,EAAK5B,YAA1E,SACI,cAACiL,EAAA,EAAD,UACK,CACG,aAAerJ,EAAK5B,UACpB2I,EAASvL,aACJ+N,EAAKE,WAAa,IAAMF,EAAKG,SAAW,IAAKH,EAAKI,4BAYxFxC,GAAU/I,IACT,eAAC4K,EAAA,EAAD,WACI,cAACI,EAAA,EAAD,CAAYvR,QAAQ,KAApB,yBACA,eAACsL,EAAA,EAAD,CACIlI,MAAOkM,EACPlE,OAAQA,EACRL,WAAYC,KAAK4E,iBAHrB,UAKI,cAAC,IAAD,CACQtO,MAAM,aACNQ,MAAOyE,EACPnF,SAAU4J,KAAKkF,iBACfjL,UAAWqK,IAEnB,cAAC,IAAD,CACQ9L,UAAWA,EACX1B,MAAOoN,EACP9N,SAAU4J,KAAK4F,qBAEvB,cAAC,IAAD,CACItP,MAAM,eACNQ,MAAOqN,EACP/N,SAAU4J,KAAK0F,iBAEnB,cAAC,IAAD,CACI5O,MAAOuN,EACPjO,SAAU4J,KAAKwF,eAEnB,cAAC,IAAD,CACI1O,MAAOsN,EACPhO,SAAU4J,KAAKyF,yBAM3BnB,GACA,eAAC6B,EAAA,EAAD,WACI,cAACI,EAAA,EAAD,CAAYvR,QAAQ,KAApB,sBAGA,cAAC+O,EAAD,CAAShJ,QAASA,EAAS7B,SAAUA,EAAUyK,QAAS3D,KAAK2D,aAIjE1G,GAASrD,GAET,eAACuM,EAAA,EAAD,WACI,cAACI,EAAA,EAAD,CAAYvR,QAAQ,KAApB,uBACA,eAAC,IAAD,WACI,eAAC,IAAD,WACI,8CACA,6CACA,2CACA,qCACA,sCACA,yBAEJ,cAAC,IAAD,UACK4E,UAMb0K,GAEA,cAAC,IAAD,CACIrP,QAAS+K,KAAKiE,UADlB,2B,GA5boBrH,IAAMyD","file":"static/js/12.ee2bc0bd.chunk.js","sourcesContent":["import AddIcon from '@material-ui/icons/Add';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport {Button} from \"@material-ui/core\";\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\nimport {useState} from 'react';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\n\n\nexport const DownloadPackingSlipButton = (props) => {\n    return(\n        <Button style={{padding:7}}\n                color=\"primary\" \n                variant=\"contained\"\n                onClick={props.onClick}\n        >\n            Download Packing Slips\n        </Button>\n    );\n}\n\n\nexport const UpdatePackingSlipsButton = (props) => {\n    return(\n        <Button\n            style={{padding:7}}\n            color=\"primary\" \n            variant=\"contained\"\n            onClick={props.onClick}\n        > \n            Update Packing Slips\n        </Button>\n    );\n}\n\n\nexport const SubmitButton = (props) => {\n    return (\n        <Button\n            style={{ marginBottom: 30, width: '100%', padding: \"15px 0px 15px 0px\"}} \n            color=\"primary\" \n            variant=\"contained\"\n            onClick={props.onClick}\n        >\n            {props.children}\n        </Button>\n    );\n}\n\n\nexport const NewButton = (props) => {\n\n    return(\n        <Tooltip title={props.title} placement=\"top\">\n            <IconButton onClick={props.onClick} size=\"small\">\n                <AddIcon color=\"primary\" fontSize=\"large\"/>\n            </IconButton>\n        </Tooltip>\n    );\n};\n\nexport const EditButton = (props) => {\n    return(\n        <Tooltip title=\"Edit\" placement=\"top\">\n            <IconButton onClick={props.onClick} className={props.className}> \n                <EditIcon color={props.color}/>\n            </IconButton>\n        </Tooltip>\n    );\n}\n\nexport const OrderTestButton = (props) =>{\n\n    return(\n        <Tooltip title=\"Serials\" placement=\"top\">\n            <IconButton \n                    onClick={props.onClick}>\n            {\n                props.open && <KeyboardArrowUpIcon />\n            }\n            {\n                !props.open && <KeyboardArrowDownIcon />\n            }\n            </IconButton>\n        </Tooltip>\n    \n    );\n  \n};\n\n\nexport const RmaTestBox = (props) => {\n\n    const checkFailed = () => {\n        props.onChange(props.i, false);\n    };\n    const checkPassed = () => {\n        props.onChange(props.i, true);\n    }\n    \n    return(\n        <FormControl component=\"fieldset\">\n                        <FormGroup row>\n                            <FormControlLabel\n                                control={<Checkbox checked={(props.passed !== null && props.passed !== false) ? props.passed : null} style={{color: \"green\"}} onChange={checkPassed} />}\n                                label=\"Passed\"\n                            />\n                            <FormControlLabel\n                                control={<Checkbox checked={(props.passed === false) ? true : null } style={{color: \"red\"}} onChange={checkFailed} />}\n                                label=\"Failed\"\n                            />\n                        </FormGroup>\n        </FormControl>\n    );\n}\n\nexport const SaveChangesButton = (props) => {\n\n    return(\n        <Button onClick={props.onClick} color=\"primary\">\n                Save Changes\n        </Button>\n    );\n}\n\nexport const FileUploadButton = (props) => {\n    return(\n        <div style={{marginLeft: \"auto\"}}>\n            <input  type=\"file\" \n                    style={{display: \"none\"}} \n                    name=\"upload-file\"\n                    id=\"upload-file\"\n                    value={props.file}\n                    onChange={props.uploadFile}\n                    accept=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n                />\n                <label htmlFor=\"upload-file\" >\n                    <Button variant=\"contained\" color=\"primary\" onClick={props.onChange}>\n                        Upload File\n                    </Button>\n                </label>\n        </div>\n    );\n}\n\n\nexport const ShippingOrderByInput = (props) => {\n    return( \n        <ToggleButtonGroup exclusive value={props.value}>\n            \n        </ToggleButtonGroup>\n    );\n}\n\n","import TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport {makeStyles, requirePropFactory, useTheme} from \"@material-ui/core\";\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from\"@material-ui/core/Select\";\nimport React from \"react\";\n\nconst useStyles = makeStyles(() => ({\n    textFieldRoot: {\n        fontSize:  18,\n        \"& .Mui-disabled\": {\n            color: \"black\",\n        },\n        width: 275,\n    },\n    identifierRoot:{\n        fontSize:  20,\n        \"& .Mui-disabled\": {\n            color: \"black\",\n        },\n        height: \"auto\",\n        width:\"100%\",\n    },\n\n    multilineRoot:{\n        fontSize: 18,\n        \"& .Mui-disabled\": {\n            color: \"black\",\n        },\n        width: 275,\n    },\n    fullWidth : {\n        flexGrow: 0,\n    },\n    noteWidth : {\n        width: 275,\n        height: \"100%\",\n    },\n    labelIdRoot: {\n        fontSize: 20,\n        \n    },\n    labelRoot:{\n        fontSize: 20\n    },\n    labelFocused: {}\n\n\n}));\n\n\nconst getInputProps = (params, classes, props) => {\n\n    let InputProps;\n    if(params){\n        InputProps = {\n            ...params.InputProps,\n            classes: {root: classes.textFieldRoot},\n        }\n    }\n    else{\n        InputProps = {classes: {root: classes.textFieldRoot}};\n    }\n\n    if(!props.edit){\n        InputProps.disableUnderline = true;\n    }\n\n    return InputProps;\n\n}\n\n\nexport const CustomerField = (props) => {\n    \n    const classes = useStyles();\n\n    return(\n        <Autocomplete id=\"customer\"\n                options={props.customers}\n                getOptionLabel={(option) => option.customerName}\n                disabled={!props.edit}\n                onChange={props.onChange}\n                value={props.value}\n                freeSolo\n                className={classes.fullWidth}\n                renderInput={(params) => <TextField   {...params}\n                                                        label=\"Customer\"\n                                                        variant={(props.edit) ? \"outlined\" : \"standard\" }\n                                                        InputProps={getInputProps(params, classes, props)}\n                                                        InputLabelProps={{\n                                                             ...params.InputLabelProps,\n                                                            classes: {root: classes.labelRoot},\n                                                            shrink: true \n                                                        }}\n                                        \n                                                        />}\n                            />\n    );\n}\n\nexport const ProductField = (props) => {\n    const classes = useStyles();\n    \n    return(\n        <Autocomplete id=\"product\"\n                options={props.products}\n                getOptionLabel={(option) => option.productName}\n                disabled={!props.edit}\n                onChange={props.onChange}\n                value={props.value}\n                freeSolo\n                className={classes.fullWidth}\n                renderInput={(params) => <TextField   {...params}\n                                                        label=\"Product\"\n                                                        variant={(props.edit) ? \"outlined\" : \"standard\" }\n                                                        InputProps={getInputProps(params, classes, props)}\n                                                        InputLabelProps={{\n                                                            ...params.InputLabelProps,\n                                                           classes: {root: classes.labelRoot},\n                                                           shrink: true\n                                                        }}\n                                                        />}\n                            />\n    );\n};\n\nexport const DateField = (props) => {\n    const classes = useStyles();\n    const label = (!props.label) ? \"Expr Date\" : props.label;\n    const now = new Date();\n\n    return(\n        <TextField\n                        id=\"date\"\n                        label={label}    \n                        type=\"date\"\n                        defaultValue=\"yyyy-MM-dd\"\n                        variant={(props.edit) ? \"outlined\" : \"standard\" }\n                        value={(props.value) ? props.value.toISOString().substring(0, 10) : now.toISOString().substring(0,10)}\n                        disabled={!props.edit}\n                        className={classes.fullWidth}\n                        InputProps={getInputProps(null, classes, props)}\n                        InputLabelProps={{classes: {root: classes.labelRoot}, shrink: true}} \n                        onChange={props.onChange}\n            />\n    );\n}\n\nexport const ShippingField = (props) => {\n    const classes = useStyles();\n    return(\n        <TextField\n            id=\"customer-ship-to\"\n            label=\"Ship To\"\n            multiline\n            rows={4}\n            className={classes.fullWidth}\n            rowsMax={10}\n            value={(props.value) ? (props.value) : \"\"}\n            variant={(props.edit) ? \"outlined\" : \"standard\" }\n            InputProps={getInputProps(null, classes, props)}\n            InputLabelProps={{classes: {root: classes.labelRoot}, shrink: true}} \n            disabled={!props.edit}\n            onChange={props.onChange}\n        /> \n    );\n}\n\nexport const ToField = (props) => {\n    const classes = useStyles();\n\n    return(\n        <TextField\n            id=\"customer-to\"\n            label=\"To\"\n            value={(props.value) ? (props.value) : \"\"}\n            multiline\n            className={classes.fullWidth}\n            rows={4}\n            rowsMax={10}\n            variant={(props.edit) ? \"outlined\" : \"standard\" }\n            InputProps={getInputProps(null, classes, props)}\n            InputLabelProps={{classes: {root: classes.labelRoot}, shrink: true}} \n            disabled={!props.edit}\n            onChange={props.onChange}\n        />\n    );\n}\n\n\nexport const IdentifierField = (props) => {\n    const classes = useStyles();\n    let InProps = {\n        classes:{root: classes.identifierRoot}\n    }\n    if(!props.allowEdit)\n    {\n        InProps.readOnly = true;\n    }\n\n    return(\n        <TextField\n                error={!props.value}\n                variant={(props.edit) ? \"outlined\" : \"standard\" }\n                helperText={(!props.value) ? props.label + \" Required\" : \"\"}\n                label={props.label}\n                value={(props.value) ? props.value : \"\"}\n                InputProps={InProps}\n                fullWidth\n                onChange={props.onChange}\n                InputLabelProps={{\n                    classes: {\n                        root: classes.labelIdRoot,\n                        focused: classes.labelFocused\n                    },\n                    shrink: true\n                }}\n                    />\n\n    );\n}\n\n\nexport const MeshField  = (props) => {\n    const classes = useStyles();\n    return(\n        <TextField\n                label=\"Mesh\"\n                value={(props.value) ? (props.value) : \" \"}\n                variant={(props.edit) ? \"outlined\" : \"standard\" }\n                InputProps={getInputProps(null, classes, props)}\n                InputLabelProps={{classes: {root: classes.labelRoot}, shrink: true}} \n                className={classes.fullWidth}\n                disabled={!props.edit}\n                onChange={props.onChange}\n                />\n    );\n}\n\n\nexport const BluetoothField = (props) => {\n    const classes = useStyles();\n    return(\n        <TextField  label=\"BlueTooth\"\n                    variant={(props.edit) ? \"outlined\" : \"standard\" }\n                    value={(props.value) ? props.value : \"\"}\n                    InputProps={getInputProps(null, classes, props)}\n                    InputLabelProps={{classes: {root: classes.labelRoot}, shrink: true}} \n                    className={classes.fullWidth}\n                    disabled={!props.edit}\n                    onChange={props.onChange}\n            />\n    );\n}\n\n\nexport const VersionField = (props) => {\n    const classes = useStyles();\n    return(\n        <TextField      label=\"Version\"\n                        variant={(props.edit) ? \"outlined\" : \"standard\" }\n                        value={(props.value) ? props.value : \"\"}\n                        InputProps={getInputProps(null, classes, props)}\n                        InputLabelProps={{classes: {root: classes.labelRoot},shrink: true}} \n                        className={classes.fullWidth}\n                        disabled={!props.edit}\n                        onChange={props.onChange}\n                />\n    );\n}\nexport const NoteField = (props) => {\n    const classes = useStyles();\n    return(\n        <TextField  label=\"Notes\"\n                    value={(props.value) ? props.value : \"\"}\n                    variant={(props.edit) ? \"outlined\" : \"standard\" }\n                    onChange={props.onChange}\n                    multiline\n                    rows={(props.rows) ? props.rows : 4}\n                    rowsMax={(props.rowsMax) ? props.rowsMax : 10}\n                    InputProps={getInputProps(null, classes, props)}\n                    InputLabelProps={{classes: {root: classes.labelRoot}, shrink: true}}\n        />\n    );\n}\n\nexport const GeneralField = (props) => {\n    const classes = useStyles();\n    return(\n            <TextField  label={props.label}\n                        InputProps={getInputProps(null, classes, props)}\n                        InputLabelProps={{classes: {root: classes.labelRoot},shrink: true}} \n                        value={props.value}\n                        variant={(props.edit) ? \"outlined\" : \"standard\" }\n                        onChange={props.onChange}\n            />\n    );\n}\n\nexport const QuantityField = (props) => {\n    const classes = useStyles();\n    return(\n        <TextField\n                            InputProps={{classes: {root: classes.textFieldRoot}, inputProps:{min:0},disableUnderline: !props.edit,}}\n                            InputLabelProps={{classes: {root: classes.labelRoot}, shrink: true}} \n                            value={props.value}\n                            onChange={props.onChange}\n                            id=\"Quantity\"\n                            label=\"Quantity\"\n                            type=\"number\"\n                            variant={(props.edit) ? \"outlined\" : \"standard\" }\n                        />\n    );\n}\n\n\nexport const SerialField = (props) => {\n    const classes = useStyles();\n    return(\n        <Autocomplete id=\"serial\"\n            options={props.serials}\n            getOptionLabel={(option) => String(option.serialNumber)}\n            onChange={props.onChange}\n            value={props.value}\n            freeSolo\n            renderInput={(params) => <TextField label=\"Serial Number\"\n                                                 variant={(props.edit) ? \"outlined\" : \"standard\" }\n                                                {...params}\n                                                InputProps={getInputProps(params, classes, props)}\n                                                InputLabelProps={{\n                                                    ...params.InputLabelProps,\n                                                   classes: {root: classes.labelRoot},\n                                                   shrink: true \n                                                }}\n                                                />}\n                    />\n    );\n}\n\nexport const OrderField = (props) => {\n    const classes = useStyles();\n    return(\n        <Autocomplete id=\"order\"\n            options={props.orders}\n            getOptionLabel={(option) => (option.orderNumber) ? String(option.orderNumber) : \"\"}\n            onChange={props.onChange}\n            value={(props.value) ? (props.value) : {orderNumber: null}}\n            disabled={!props.edit}\n            freeSolo\n            renderInput={(params) => <TextField label=\"Order Number\"\n                                                variant={(props.edit) ? \"outlined\" : \"standard\" }\n                                                {...params}\n                                                InputProps={getInputProps(params, classes, props)}\n                                                InputLabelProps={{\n                                                    ...params.InputLabelProps,\n                                                   classes: {root: classes.labelRoot}, \n                                                   shrink: true,\n                                                }}\n                                                />}\n                    />\n    );\n}\n\nexport const RMAField = (props) => {\n    const classes = useStyles();\n    return(\n        <Autocomplete id=\"rma\"\n            options={props.rmas}\n            getOptionLabel={(option) => (option.RMANumber) ? String(option.RMANumber) : \"\"}\n            onChange={props.onChange}\n            value={(props.value) ? (props.value) : {RMANumber: null}}\n            disabled={!props.edit}\n            freeSolo\n            renderInput={ (params) => <TextField label=\"RMA Number\"\n                                                variant={(props.edit) ? \"outlined\" : \"standard\" }\n                                                {...params}\n                                                InputProps={getInputProps(params, classes, props)} \n                                                InputLabelProps={{\n                                                    ...params.InputLabelProps,\n                                                   classes: {root: classes.labelRoot}, \n                                                   shrink: true\n                                                }}\n                                        />\n\n            }\n        />\n    );\n}\n\n\nexport const TrackingNumberField = (props) => {\n    const classes = useStyles();\n    return(\n            <TextField  label=\"Tracking Number\"\n                        InputProps={getInputProps(null, classes, props)}\n                        InputLabelProps={{classes: {root: classes.labelRoot}, shrink: true}} \n                        value={(props.value) ? props.value: \"\"}\n                        variant={(props.edit) ? \"outlined\" : \"standard\" }\n                        onChange={props.onChange}\n                        disabled={!props.edit}\n            />\n    );\n}\n\nexport const POField = (props) => {\n    const classes = useStyles();\n    return(\n            <TextField  label=\"PO Number\"\n                        InputProps={getInputProps(null, classes, props)}\n                        InputLabelProps={{classes: {root: classes.labelRoot}, shrink: true}} \n                        value={(props.value) ? props.value : \" \"}\n                        variant={(props.edit) ? \"outlined\" : \"standard\" }\n                        onChange={props.onChange}\n                        disabled={!props.edit}\n            />\n    );\n}\n\nexport const ShippingServiceField = (props) => {\n    const classes = useStyles();\n    return(\n        <Autocomplete id=\"shipping\"\n        options={props.options}\n        getOptionLabel={(option) => option}\n        onChange={props.onChange}\n        value={(props.value) ? (props.value) : \"\"}\n        disabled={!props.edit}\n        freeSolo\n        renderInput={ (params) => <TextField label=\"Shipping Service\"\n                                            variant={(props.edit) ? \"outlined\" : \"standard\" }\n                                            {...params}\n                                            InputProps={getInputProps(params, classes, props)} \n                                            InputLabelProps={{\n                                                ...params.InputLabelProps,\n                                               classes: {root: classes.labelRoot}, \n                                               shrink: true\n                                            }}\n                                    />\n\n        }\n        />\n    );\n}\n\n\n\nexport const BoxNumberField = (props) => {\n    const classes = useStyles();\n\n    return(\n\n         <TextField label=\"Box Number\"\n                    InputProps={getInputProps(null, classes, props)}\n                    InputLabelProps={{classes: {root: classes.labelRoot}, shrink: true}} \n                    value={props.value}\n                    variant={\"standard\" }\n                    disabled={true}\n        />\n    );\n}\n\n\nexport const MultipleSerials = (props) => {\n\n    return (\n        <>\n            <InputLabel id=\"demo-mutiple-name-label\">{props.label}</InputLabel>\n            <Select\n                labelId=\"mutiple-serial-label\"\n                id=\"mutiple-name-serial\"\n                multiple\n                input={<Input />}\n                value={[]}\n                >\n                {props.serials.map((serial) => (\n                    <MenuItem key={serial} value={serial}>\n                        {serial}\n                    </MenuItem>\n                ))}\n            </Select>\n        </>\n    );\n}","import Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { makeStyles, Tab} from \"@material-ui/core\";\nimport Collapse from '@material-ui/core/Collapse';\nimport Box from \"@material-ui/core/Box\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\nimport React from 'react';\n\nconst useStyles = makeStyles({\n  root: {\n    width: '100%',\n  },\n  container: {\n    overflowX: \"hidden\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    width: \"100%\",\n    alignSelf: \"center\",\n    height: \"auto\",\n    overflowY:\"hidden\",\n  },\n\n  repairTable: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    width: \"100%\",\n    alignSelf: \"left\",\n    height:\"100%\",\n    overflowY: \"hidden\",\n    marginBottom: 15\n  },\n  tableHead: {\n    backgroundColor: \"#36435c\",\n    color: \"white\"\n  },\n  repairHead: {\n    backgroundColor: \t\"#1769aa\",\n    color: \"white\",\n  },\n  \n  expandedElement : {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"flex-start\",\n    maxHeight: 600,\n    overflowY: \"scroll\",\n    gap: 5,\n    margin: \"5px 15px 20px 15px\",\n  },\n  row: {\n    '& > *': {\n      borderBottom: 'unset',\n    }, \n  }\n});\n\nexport const CollapseRow = (props) => {\n\n    const classes = useStyles();\n    const [open, setOpen] = React.useState(false);\n\n    return(\n      <React.Fragment>\n        <TableRow className={classes.row}>\n            {\n                props.items.map((item, i) => <TableCell key={i} align={(i === 0) ? \"left\" : \"center\"}>{item}</TableCell>)\n            }\n            <TableCell>\n                <IconButton aria-label=\"expand row\"  size=\"small\" onClick={() => setOpen(!open)}>\n                    { open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n                </IconButton>\n            </TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell colSpan={props.items.length + 1} align=\"center\" style={{padding: \"0px 0px 0px 0px\"}}>\n              <Collapse in={open} timeout=\"auto\" unmountOnExit>\n                <Box className={classes.expandedElement}>\n                  {\n                    props.subItems\n                  }\n                </Box>\n              </Collapse>\n          </TableCell>\n      </TableRow>\n    </React.Fragment>\n    \n    );\n}\n\n\n\nexport const Row = (props) => {\n    const classes = useStyles();\n    return(\n        <TableRow>\n            {\n                props.items.map((item, i) =><TableCell key={i} align={(i === 0) ? \"left\" : \"center\"}>{item}</TableCell>)\n            }\n        </TableRow>\n    );\n}\n\nexport const RepairTable = (props) => {\n  const classes = useStyles();\n  return(\n    <TableContainer className={classes.repairTable} component={Paper}>\n      <Table>\n        <TableBody>\n          {\n            props.rows\n          }\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n\nexport function GenTable(props){\n  const classes = useStyles();\n\n  return(\n    <TableContainer component={Paper} className={classes.container} elevation={2} >\n              <Table stickyHeader>\n                {props.children}\n              </Table>\n    </TableContainer>\n  );\n}\n\nexport function GenTableHead(props){\n  const classes = useStyles();\n  return(\n    <TableHead>\n      <TableRow>\n      {\n        React.Children.map( props.children, (item, i) => <TableCell key={i} align={(i === 0) ? \"left\" : \"center\"} className={classes.tableHead}>{item}</TableCell>)\n      }\n      </TableRow>\n  </TableHead>\n  );\n}\n\nexport function GenTableBody(props){\n  return(\n    <TableBody>\n      {props.children}\n    </TableBody>\n  );\n}\n\nexport function GenTableRow(props){\n\n  return(\n      <TableRow>\n      {\n          React.Children.map(props.children, (item, i) =><TableCell key={i} align={(i === 0) ? \"left\" : \"center\"}>{item}</TableCell>)\n      }\n      </TableRow>\n  );\n}\n\nconst TemplateTable = (props) => {\n    const classes = useStyles(); \n    return(\n          <TableContainer component={Paper} className={classes.container} elevation={2}>\n              <Table stickyHeader>\n                <TableHead>\n                  <TableRow>\n                  {\n                    props.tableHead.map( (item, i) => <TableCell key={i} align={(i === 0) ? \"left\" : \"center\"} className={classes.tableHead}><b>{item}</b></TableCell>)\n                  }\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {\n                    props.rows\n                  }\n                </TableBody>\n              </Table>\n          </TableContainer>\n    );\n}\n\n\nexport default TemplateTable;","import React from 'react';\nimport {makeStyles} from \"@material-ui/core\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport {NewButton} from \"./Buttons\";\nimport {Title} from \"../Text\";\n\n \nconst useStyles = makeStyles(() => ({\n    search : {\n        flexGrow : 1,\n        display: \"flex\",\n        flexDirection: \"row\",\n        width: \"100%\",\n        height: \"auto\",\n        borderBottom: \"1px solid #E0E0E0\",\n        paddingBottom: 20,\n        marginBottom: 15,\n      },\n      searchBarContainer: {\n        display:\"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        gap: 3,\n        marginTop: 15,\n      },\n      in:{\n        fontSize: 20,\n      }\n}));\n\n\nconst SearchInput = (props) => {\n\n    \n    return(\n        <Autocomplete\n          id=\"combo-box-demo\"\n          onChange={props.onChange}\n          options={props.options}\n          ListboxProps={{ style: { maxHeight: \"25rem\" }}}\n          style={{width: \"100%\", alignSelf:\"center\", }}\n          getOptionLabel={props.getOptionLabel}\n          renderInput={(params) => <TextField \n                                            {...params}  \n                                            variant=\"outlined\"\n                                            InputProps={{...params.InputProps, classes: {root: props.className}}}\n                                          \n                                    />}\n          />\n    );\n};\n\n\nexport  const SearchBar = (props) => {\n    const classes = useStyles();\n    return(\n        <div className={classes.search}>\n                  <Title variant=\"h5\">\n                    {props.label}\n                    <div className={classes.searchBarContainer}>\n                      <SearchInput className={classes.in} onChange={props.onChange} options={props.options} getOptionLabel={props.getOptionLabel}/>\n                      {!props.noNew && <NewButton title=\"New\" onClick={props.newOrderFunction} />}\n                    </div>\n                  </Title>\n                  \n        </div>\n    )\n}","import React from 'react';\nimport { makeStyles} from \"@material-ui/core\";\nimport {EditButton} from \"../Common/Buttons\";\nimport Paper from \"@material-ui/core/Paper\";\nimport {SaveChangesButton} from \"../Common/Buttons\";\n\n\nconst useStyles = makeStyles(() => ({\n\n    rootConatiner: {\n        display: \"flex\",\n        flexDirection:\"column\",\n        gap: 10,\n        padding : \"10px 30px 30px 30px\",\n        borderRadius: 1,\n        marginTop: 15,\n    },\n\n    edit: {\n        display: \"flex\",\n        flexDirection: \"row-reverse\",\n    },\n    editButton:{ \n        fontSize: 10,\n        display:\"flex\",\n        flexDirection: \"column\",\n    },\n    content: {\n        gap: 20,\n        display: \"flex\",\n        flexFlow: \"wrap\",\n        position: \"relative\",\n        alignItems: \"center\",\n        maxWidth: 800,\n\n    },\n    item : {\n        display: \"flex\",\n        alignSelf:\"stretch\",\n        paddingTop: 7,\n        paddingBottom: 7,\n    },\n    id:{\n        width: \"100%\",\n        paddingBottom: 17,\n    }\n\n}));\n\nclass Head extends React.Component{\n\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            edit: false,\n            color: \"inherit\",\n        };\n    }\n\n    changeEdit = () => {\n        const color = (!this.state.edit) ? \"primary\" : \"inherit\";\n        this.setState({\n                        edit: !this.state.edit, \n                        color: color,\n        });\n    }\n\n\n    saveChanges = (event) => {\n        this.changeEdit();\n        this.props.updateHead(event);\n    }\n\n    render(){\n\n        const {classes} = this.props;\n        const {edit, color} = this.state;\n        \n\n        return(\n            <Paper className={classes.rootConatiner} elevation={2}>\n                {this.props.edit && \n                    <div className={classes.edit}>\n                        <EditButton onClick={this.changeEdit} className={classes.editButton} color={color} /> \n                    </div>\n                }\n                {\n                    !this.props.edit\n                    &&\n                    <div style={{paddingTop: 20}}></div>\n                }\n                <div className={classes.id}>{this.props.children[0]}</div>\n                <div className={classes.content}>\n                    {React.Children.map(this.props.children, (child, i) => {\n                                    if(i > 0){\n                                        let item;\n\n                                        if(child.props.noEdit)\n                                        {\n                                            item = React.cloneElement(child, {edit: false});\n                                        }\n                                        else if(this.props.edit)\n                                        {\n                                            item = React.cloneElement(child, {edit: this.state.edit});\n                                        }\n                                        else{\n                                            item = React.cloneElement(child, {edit: true});\n                                        }\n                                        return <div className={classes.item} key={i}>{item}</div>;\n                                    }\n                    })}\n                    \n                    <div style={{marginLeft: \"auto\", marginTop: 20,}}>{this.props.edit && this.props.change && <SaveChangesButton onClick={this.saveChanges} />}</div>\n                </div>\n            </Paper>\n        );\n    }\n}\n\nexport default function HeadDisplay(props){\n    const classes = useStyles();\n    return <Head classes={classes} {...props} />\n\n}","\nimport React from 'react';\nimport {NoteField} from \"../Common/Fields\"\nimport {Row, RepairTable} from \"../Common/TemplateTable\";\nimport {RmaTestBox} from \"../Common/Buttons\";\nimport { Button, Typography } from '@material-ui/core';\nimport { Title } from '../Text';\n\nexport default class RMARepair extends React.Component{\n\n    constructor(props)\n    {\n        super(props);\n        this.state  = { \n            tests : null,\n        };\n\n        //different tests\n        this.moduleParts = [\n            \"Radio\", \n            \"Bluetooth\",\n            \"SD Card\",\n            \"Membrane\",\n            \"Board\",\n        ];\n\n        this.lightParts = [\n            \"Green\",\n            \"White\",\n            \"Blue\",\n            \"Amber\",\n            \"Red\",\n        ];\n\n        this.touchScreenParts = [\n            \"Power\",\n            \"Touchscreen\",\n            \"Stylus Pen\",\n            \"Display\",\n        ];\n    }\n\n    componentDidMount(){\n        this.setState({tests: this.props.tests});\n    }\n\n    componentDidUpdate(prevProps){\n        if(prevProps != this.props){\n            this.setState({tests: this.props.tests});\n        }\n    }\n\n    setNote = (event, i) => {\n        this.setState((prevState) => {\n            const tests = prevState.tests;\n            tests[i].notes = event.target.value;\n            return tests\n        });\n    }\n\n    setPassed = (i, value) => {\n        this.setState((prevState) => {\n            const tests = prevState.tests;\n            tests[i].passed = value;\n            return tests;\n        });\n    }\n\n    updateSerialTest = async() => {\n\n        const testingResults = { //test action for serial number\n            action: \"Tested\", \n            note: \"\", \n            orderNumber: null, \n            RMANumber: this.props.rmaNumber,\n            passed: null,\n        };\n\n        for(let i = 0; i < this.state.tests.length; i++) //check if all test passed, else test failed\n        {\n            if(this.state.tests[i].passed == false ) //if failed test update the serial with note and failed test\n            {\n                testingResults.passed = false;\n                testingResults.note = this.state.tests[i].notes;\n                break;\n            }\n            else{\n                testingResults.passed = this.state.tests[i].passed;\n            }\n        }\n\n        const headersSerial = {\n            method: 'PUT',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(testingResults),\n        };\n\n        //update serial history to reflect testing\n        fetch(\"/api/serials/addHistory/\" + this.props.serialNumber, headersSerial)\n            .then((res) => {\n                if(res.ok)\n                {\n                    return res.json();\n                }\n\n                res.json().then((error) => this.props.updateMessage({error: true, text: error.message}));           \n            })\n            .catch((error) => {\n                this.props.updateMessage({error: true, text: error.message});\n            });\n    }\n\n    updateTests = () => { //updates the test for RMA and the serial being tested if exists     \n\n        const updateBody = {\n            itemId: this.props.itemId,\n            tests: this.state.tests,\n        }\n\n        const headersTest = {\n            method: 'PUT',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(updateBody),\n        };\n\n        if(this.props.serialNumber)\n        {\n            this.updateSerialTest();\n        }\n\n        fetch(\"/api/rmas/updateTests/\" + this.props.rmaNumber, headersTest)\n            .then((res) => {\n                if(res.ok)\n                {\n                    return res.json();\n                }\n                res.json().then((err) => this.props.updateMessage({error:true, text: err.message}));\n            })\n            .then((res) => {\n                if(res)\n                {\n                    this.props.updateMessage({error: false, text: \"Test succesfully updated\"});\n                }\n            })\n            .catch(err => this.props.updateMessage({error: true, text: err.message}));\n    }\n\n    render(){\n        const {tests}= this.state;\n        return(\n            <React.Fragment>\n            <Title>Parts Test</Title>\n            {tests &&\n                <RepairTable\n                    rows={tests.map((test, i) => <Row  key={i} items={[   <b>{test.part}</b>,\n                                                                <RmaTestBox passed={test.passed} i={i} onChange={this.setPassed}/>,\n                                                                <NoteField  value={test.notes} onChange={(e) => this.setNote(e, i)} rows={1} rowsMax={2} />]}                     \n                                                />)}\n                />\n            }\n            {\n                !this.props.new && \n                <Button variant=\"contained\" style={{margin: 20}} color=\"primary\" onClick={this.updateTests}>\n                    Update Tests\n                </Button>\n            }\n            </React.Fragment>\n        );\n    }\n};","\nimport React from 'react';\nimport Paper  from \"@material-ui/core/Paper\"\nimport {NoteField, ProductField, SerialField} from \"../Common/Fields\";\nimport {NewButton} from \"../Common/Buttons\";\nimport {makeStyles} from \"@material-ui/core\";\n\nconst useStyles = makeStyles(() => ({\n    root: {\n        display: \"flex\",\n        gap: 10,\n        flexGrow: 1,\n        padding: \"30px 30px 30px 30px\",\n        marginTop: 15,\n        marginBottom: 40,\n    }\n}));\n\n\nclass _RMAItem extends React.Component {\n\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            product: null,\n            serial: null,\n        };\n\n        this.moduleParts = [\n            \"Radio\", \n            \"Bluetooth\",\n            \"SD Card\",\n            \"Membrane\",\n            \"Board\",\n        ];\n\n        this.lightParts = [\n            \"Green\",\n            \"White\",\n            \"Blue\",\n            \"Amber\",\n            \"Red\",\n        ];\n\n        this.touchScreenParts = [\n            \"Power\",\n            \"Touchscreen\",\n            \"Stylus Pen\",\n            \"Display\",\n        ];\n    }\n\n    setSerial = (event, serial) => {\n        if(serial){ //if serial set then go fetch the serial to get data about it\n            fetch(\"/api/serials/\" + serial.serialNumber)\n                .then((res) => { \n                    if(res.ok){\n                        return res.json();\n                    }\n                    else{\n                        console.log(\"Failed network request\");\n                    }\n                })\n                .then((res) => {\n                    const product = (res) ? this.props.products.find((prod) => prod.productId === res.productId) : null;\n                    this.setState({serial: res, product: product});\n                })\n                .catch((err) => console.log(err));\n        }\n        else{\n            this.setState({serial: null});\n        }\n    }\n\n    setProduct = (event, product) => {\n        this.setState({ serial: null, product: product});\n    }\n\n    addItem = () => {\n\n        const {product, serial } = this.state;\n\n        if(product || serial) { //before adding check if either product or serial exists\n\n            let tests = [];\n\n            if(product.productId === \"53060-10\"){ //is it a touchscreen?\n                this.touchScreenParts.map((part) => tests.push({passed: null, part: part, notes: \"\"}));\n            }\n            else{ //else check module\n                this.moduleParts.map(part => tests.push({passed: null, part: part, notes : \"\"}));\n            }\n\n            this.props.addItem({ \n                product: product,\n                serialNumber: (serial) ? serial.serialNumber : null,\n                mesh: (serial) ? serial.mesh : null,\n                issue: \"\",\n                tests: tests,\n            });\n        }\n    }\n\n    \n\n    render()\n    {\n        const {serial, product} = this.state;\n        const {classes, products, serials} = this.props;\n\n\n        return(\n            <Paper elevation={2} className={classes.root}>\n                    <SerialField value={serial} serials={serials} onChange={this.setSerial} edit/>\n                    <ProductField value={product} products={products} onChange={this.setProduct} edit/>\n                    <NewButton title=\"Add\" onClick={this.addItem} />\n            </Paper>\n        );\n    }\n}\n\n\nexport default function RMAItem(props)\n{\n    const classes = useStyles();\n    return <_RMAItem classes={classes} {...props}/>\n}\n","import React from 'react';\nimport {SearchBar} from \"../Common/Search\";\nimport {Display, DisplayItem} from \"../Common/Display\";\nimport HeadDisplay from \"../Common/HeadDisplay\";\nimport {Message} from \"../Common/Message\";\nimport {Recent, RecentItem} from \"../Common/Recent\";\nimport {CollapseRow, GenTable, GenTableBody, GenTableHead} from \"../Common/TemplateTable\";\nimport {\n    IdentifierField,\n    DateField,\n    ToField,\n    ShippingField,\n    CustomerField,\n} from \"../Common/Fields\";\nimport {SubmitButton} from \"../Common/Buttons\";\n\n\n\nimport RMARepair from \"./RMARepairs\";\nimport Button from '@material-ui/core/Button';\nimport { Typography } from '@material-ui/core';\nimport RMAItem from \"./RMAItem\";\n\n\n\n\nexport default class RMADisplay extends React.Component{\n\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            to: null,\n            shipTo: null,\n            RMADate: null,\n            items: null,\n            customer: null,\n            RMANumber: null,\n\n\n            newRMA: false,\n            message: null,\n            change: false,\n\n            rows: null,\n\n            recentRMAs: null,\n        };\n    }\n\n    componentDidMount(){\n        const  state = this.props.location.state;\n\n        if(!state) //did the router render component with a state?\n        {\n            this.fetchRecent();\n        }\n        else if(state.RMANumber) //check if the router passed a prop to the newly rendered component\n        {\n            this.fetchRMA(state.RMANumber);\n        }\n    }\n\n    createRMA = () => {\n        \n        const {RMANumber, customer, RMADate, items, shipTo, to} = this.state;\n\n        if(RMANumber && customer && RMADate){ //check if needed fields are there\n\n            const newRMA = {    \n                RMANumber: RMANumber,\n                customerId: customer._id,\n                items: items,\n                RMADate: RMADate,\n                shipTo: shipTo,\n                to: to,\n            };\n\n            const headers = {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify(newRMA),\n            };\n\n\n            fetch(\"/api/rmas/create\", headers)\n                .then((res) => {\n                    if(res.ok)\n                    {\n                        return res.json();\n                    }\n                  \n                    res.json().then(err => this.setState({message:{error:true, text: err.message}}));\n                    \n                })\n                .then((resRMA) => {\n                    if(resRMA) \n                    {\n                        this.itemsToRows(resRMA.items, resRMA.RMANumber);\n                        this.props.updateRoot({RMANumber: resRMA.RMANumber, customer: customer});\n                        this.setState({\n                            items: resRMA.items,\n                            customer: customer,\n                            RMADate: new Date(resRMA.RMADate),\n                            to: resRMA.to,\n                            shipTo: resRMA.shipTo,\n                            newRMA: false,\n                            change: false,\n                        });\n                    }\n\n                })\n                .catch(err => this.setState({message: {error: true, text: \"Failed to submit rma\"}}));\n        }\n        else{ //set err message else\n            this.setState({message:{\n                error: true,\n                text: \"Required Fields - RMANumber - Customer - Date\", \n            }})\n        }\n    }\n\n    updateRMADetails = () => {\n\n        const {to, shipTo, customer, RMADate, RMANumber} = this.state;\n\n        const headers = {\n            method: \"PUT\",\n            headers: {\"Content-Type\" : \"application/json\"},\n            body: JSON.stringify({\n                to: to,\n                shipTo: shipTo,\n                customerId: customer._id,\n                RMADate: RMADate,\n            })\n        }\n\n        fetch(\"/api/rmas/updateDetails/\" + RMANumber,headers)\n            .then((res) => {\n                if(res.ok)\n                {\n                    return this.setState({message: {error: false, text: \"RMA successfully updated\"}, change: false});\n                }\n\n                res.json().then((err) => this.setState({message: {error: true, text: err.message}}))\n            })\n            .catch((err) => this.setState({message: {error: true, text: err.message}}));\n        \n    }\n\n    fetchRecent = () => {\n        fetch(\"/api/rmas/recent/10\")\n            .then((res) => {\n                if(res.ok)\n                {\n                    return res.json();\n                }\n\n                res.json().then((err) => this.setState({message:{error: true, text: err.message}}));\n\n            })\n            .then((rmas) => {\n                if(!rmas){return;}\n\n                this.setState({recentRMAs: rmas, \n                                RMANumber: null,\n                                items: null,\n                                newRMA: false,      \n                });\n            })\n            .catch((err) => this.setState({message: {error: true, text: err.message}}));\n    }\n\n    fetchRMA = (RMANumber) => {\n        fetch(\"/api/rmas/\" + RMANumber)\n            .then((res) => {\n                if(res.ok)\n                {\n                    return res.json();\n                }\n                \n                res.json().then(err => this.setState({message: {error: true, text: err.message}}));\n            })\n            .then((rma) => {\n\n                if(!rma){return;}\n        \n                this.itemsToRows(rma.items, rma.RMANumber);//update rows\n\n                this.setState({ \n                                RMANumber: rma.RMANumber,\n                                customer: this.props.customers.find((customer) => customer._id === rma.customerId),\n                                RMADate: new Date(rma.RMADate),\n                                to: rma.to,\n                                shipTo: rma.shipTo,\n                                items: rma.items,\n                                newRMA: false,\n                });\n\n            })\n            .catch(err => this.setState({message: {error:true, text: err.message}}));\n    }\n\n    setRMA = (event, rma) =>{\n        if(!rma) //if no rma passed get recent\n        {\n            this.fetchRecent();\n        }\n        else{\n            this.fetchRMA(rma.RMANumber); //get rma\n        }\n    }\n\n    change_RMANumber = (event) => {\n\n        const num = parseInt(event.target.value)\n        if(Number.isInteger(num)){\n          this.setState({RMANumber: parseInt(num)});\n        }\n        else{\n          this.setState({RMANUmber: null});\n        }\n    }\n    \n    change_RMATo = (event) => {\n        this.setState({to: event.target.value, change: true});\n    }\n\n    change_RMAShipTo = (event) => {\n        this.setState({shipTo: event.target.value, change: true});\n    }\n\n    change_RMADate = (event) => {\n        this.setState({RMADateA: new Date(event.target.value), change: true})\n    }\n\n    change_RMACustomer = (event, customer) => {\n        this.setState({customer: customer, change: true});\n    } \n\n\n    addItem = (item) => {\n\n        const newItem =  { \n            productId: item.product.productId,\n            tests: item.tests,\n            serialNumber: item.serialNumber,\n            issue: item.issue,\n        }; //properly format \n\n        this.setState((prevState) => { //update state\n            const newItems = [...prevState.items, newItem];\n            this.itemsToRows(newItems, prevState.RMANumber);\n            return ({items : newItems}); \n        });\n    }\n\n\n    newRMA = () => {\n        this.setState({ RMANumber: null,    //reset the state to null\n                        RMADate: new Date(),\n                        items: [],\n                        rows: null,\n                        customer: null,\n                        to: null,\n                        shipTo: null,\n                        newRMA: true});\n    }\n\n    getOptionLabel = (option) => {\n        return \"\" + option.RMANumber + \" - \" + option.customer.customerName; //render select options choices\n    }\n\n    /*\n        Create table entries based on fetch data requires aysnc\n          -cant move this to render because of fetch\n          -need to await for response to determine how to create rows, therefore nothing will return to render\n          -needed to use setState to update instead\n          -may need to move this to server side with the inital order get function\n          -OrderDisplay has the same problem w/ dependencies\n      */\n    itemsToRows = async(items, rmaNumber) => { //converts json items to table tags\n\n        const rows = [];\n\n        if(!items || !items.length)\n        {\n            return;\n        }\n\n        for(let i = 0; i < items.length; i++)\n        {\n            let serial;\n            let product;\n\n            if(items[i].serialNumber) //if serial exists go grab it\n            {\n                const response = await fetch(\"/api/serials/\" + items[i].serialNumber )\n                                        .catch((error) =>this.setState({message: {error: true, text: error.message}}));\n                                                        \n\n                if(response.ok)\n                {\n                    serial = await response.json();\n                    product = this.props.products.find((prod) => prod.productId === serial.productId)\n                }\n                else{\n                    const error = await response.json();\n                    this.setState({message: {error: true, text: error.message}});\n                }\n            \n            }\n            else{\n                product = this.props.products.find((prod) => prod.productId === items[i].productId);\n            }\n           \n\n            const rmaRepair = <RMARepair //expandable component of the collapse row \n                                    new={this.state.newRMA} \n                                    tests={items[i].tests} \n                                    itemId={items[i]._id} \n                                    serialNumber={(items[i].serialNumber) ? items[i].serialNumber : null}\n                                    rmaNumber={rmaNumber}\n                                    updateMessage={(message) => this.setState({message: message}) }\n                                />;\n\n            const cols = [ items[i].serialNumber,  //columns of the row\n                            product.productName, \n                            product.productId, \n                            (serial) ? serial.mesh : \"\", \n                            items[i].issue,\n                        ];\n\n            rows.push(\n                <CollapseRow \n                            key={i} \n                            items={cols}                       \n                            subItems={[rmaRepair]}\n                />\n            )\n        }\n\n        this.setState({rows: rows});\n    }\n\n    render(){\n        const { recentRMAs,\n                RMANumber, \n                newRMA , \n                change,\n                RMADate,\n                to,\n                shipTo,\n                customer,\n                message,\n                items,\n                rows,\n\n        }= this.state;\n\n        const {customers, products, serials, rmas} = this.props;\n        \n        return(\n            <Display>\n        \n                <SearchBar label=\"RMAs\"\n                            options={rmas}\n                            getOptionLabel={this.getOptionLabel}\n                            newOrderFunction={this.newRMA}\n                            onChange={this.setRMA}    \n                />\n\n                {message && <Message error={message.error} text={message.text} clear={() => this.setState({message: null})}/> }\n\n                {\n                    recentRMAs && !RMANumber && !newRMA && \n                    <DisplayItem>\n                        <Typography variant=\"h5\">Recent RMAs</Typography>\n                        <Recent>\n                            {\n                                recentRMAs.map((item, i) => {\n                                    const customer = customers.find((c) => c._id === item.customerId);\n                                    const date = new Date(item.RMADate);\n            \n\n                                    return(\n                                        <Button style={{textTransform: \"none\"}} onClick={() => this.fetchRMA(item.RMANumber)}>\n                                            <RecentItem>\n                                                {[\n                                                    \"RMANumber \" + item.RMANumber, \n                                                    customer.customerName, \n                                                    \"\" + date.getMonth() + \"/\" + date.getDay() + \"/\"+ date.getFullYear(),\n                                                ]}\n                                            </RecentItem>\n                                        </Button>\n                                    );\n                                })\n                            }\n                        </Recent>\n                    </DisplayItem>\n\n                }\n\n                { (newRMA || RMANumber) && \n                    <DisplayItem>\n                        <Typography variant=\"h5\">RMA Details</Typography>\n                        <HeadDisplay \n                            edit={!newRMA}\n                            change={change}\n                            updateHead={this.updateRMADetails}\n                        >\n                            <IdentifierField\n                                    label=\"RMA Number\"\n                                    value={RMANumber}\n                                    onChange={this.change_RMANumber}\n                                    allowEdit={newRMA}\n                            />\n                            <CustomerField\n                                    customers={customers}\n                                    value={customer}\n                                    onChange={this.change_RMACustomer}\n                            />\n                            <DateField \n                                label=\"Date Created\" \n                                value={RMADate} \n                                onChange={this.change_RMADate}\n                            />\n                            <ToField \n                                value={to} \n                                onChange={this.change_RMATo}\n                            />\n                            <ShippingField \n                                value={shipTo} \n                                onChange={this.change_RMAShipTo}\n                            />     \n                        </HeadDisplay>\n                    </DisplayItem>\n                }   \n                {\n                    newRMA && \n                    <DisplayItem> \n                        <Typography variant=\"h5\">\n                            New Item\n                        </Typography>\n                        <RMAItem serials={serials} products={products} addItem={this.addItem}/>\n                    </DisplayItem>\n                }\n                {\n                    items && rows &&\n\n                    <DisplayItem>\n                        <Typography variant=\"h5\">RMA Items</Typography>\n                        <GenTable>\n                            <GenTableHead>\n                                <b>Serial Number</b>\n                                <b>Product Name</b>\n                                <b>Product Id</b>\n                                <b>Mesh</b>\n                                <b>Issue</b>\n                                <b></b>\n                            </GenTableHead>\n                            <GenTableBody>\n                                {rows}\n                            </GenTableBody>\n                        </GenTable>\n                    </DisplayItem>\n                }\n                {\n                    newRMA\n                    &&\n                    <SubmitButton \n                        onClick={this.createRMA} \n                    >\n                            Submit\n                    </SubmitButton>\n                }\n\n            </Display>\n        );\n    }\n}\n"],"sourceRoot":""}