{"version":3,"sources":["Common/Buttons.js","Common/Fields.js","Common/TemplateTable.js","Common/Search.js","Common/HeadDisplay.js","Common/ItemTabs.js","Shipping/ShippingServices.js","Shipping/ShippingItems.js","Shipping/ShippingPrintSheet.js","Shipping/ShippingDisplay.js"],"names":["DownloadPackingSlipButton","props","style","padding","color","variant","onClick","UpdatePackingSlipsButton","SubmitButton","marginBottom","width","children","NewButton","title","placement","size","fontSize","EditButton","className","RmaTestBox","component","row","control","checked","passed","onChange","i","label","SaveChangesButton","FileUploadButton","marginLeft","type","display","name","id","value","file","uploadFile","accept","htmlFor","useStyles","makeStyles","textFieldRoot","identifierRoot","height","multilineRoot","fullWidth","flexGrow","noteWidth","labelIdRoot","labelRoot","labelFocused","getInputProps","params","classes","InputProps","root","edit","disableUnderline","CustomerField","options","customers","getOptionLabel","option","customerName","disabled","freeSolo","renderInput","InputLabelProps","shrink","ProductField","products","productName","DateField","now","Date","defaultValue","toISOString","substring","ShippingField","multiline","rows","rowsMax","ToField","IdentifierField","InProps","allowEdit","readOnly","error","helperText","focused","MeshField","BluetoothField","VersionField","NoteField","GeneralField","QuantityField","inputProps","min","SerialField","serials","String","serialNumber","OrderField","orders","orderNumber","RMAField","rmas","RMANumber","TrackingNumberField","POField","ShippingServiceField","BoxNumberField","container","overflowX","flexDirection","alignSelf","overflowY","repairTable","tableHead","backgroundColor","repairHead","expandedElement","alignItems","maxHeight","gap","margin","borderBottom","CollapseRow","React","useState","open","setOpen","Fragment","items","map","item","align","aria-label","colSpan","length","in","timeout","unmountOnExit","subItems","Row","RepairTable","Paper","GenTable","elevation","stickyHeader","GenTableHead","Children","GenTableBody","GenTableRow","TemplateTable","search","paddingBottom","searchBarContainer","justifyContent","marginTop","SearchInput","ListboxProps","SearchBar","noNew","newOrderFunction","rootConatiner","borderRadius","editButton","content","flexFlow","position","maxWidth","paddingTop","Head","changeEdit","state","setState","saveChanges","event","updateHead","this","child","noEdit","cloneElement","change","Component","HeadDisplay","ItemTabs","square","indicatorColor","textColor","scrollButtons","tabLabels","module","exports","ItemTypes","ItemDropTable","useDrop","drop","addItem","collect","monitor","isOver","canDrop","Box","ref","DragItem","useDrag","isDragging","drag","quantity","p","Typography","fontWeight","ShippingItems","setSerial","serial","product","find","productId","setProduct","setQuantity","parseInt","target","availableItems","mt","flexWrap","minHeight","overflow","marginRight","notInvoice","textAlign","header","footer","bottom","contactInfo","vLogo","packingSlipNumber","top","locations","locationChild","shipmentDetails","borderTop","shipmentDetailsRow","textDecoration","table","tableLayout","tableHeadRow","ShippingPrintSheet","packingSlips","shipDate","slipIdx","slipIndex","totalQuantity","returnedItems","src","shipTo","split","to","getMonth","getDate","getFullYear","orderDate","shipmentService","trackingNumber","boxNumber","customerPO","ordered","order","QuantityChange","setEdit","onDoubleClick","onKeyDown","key","TextField","ShippingDisplay","downloadPackingSlips","downloadSlips","getSlipImage","jsPDF","window","html2canvas","page","document","getElementById","then","canvas","imgData","toDataURL","pdf","addPage","addImage","downloadSlipIndex","save","createPackingSlips","a","newSlip","headers","method","body","JSON","stringify","fetch","res","ok","json","err","message","text","slip","prevState","pSlips","catch","fetchPackingSlips","searchObject","requestURL","fetchRMA","rma","fetchOrder","push","tab","slips","addReturnedItem","addPackingSlip","updateTab","newValue","updateSlips","updatedSlip","toString","change_ItemQuantity","e","change_ReturnedItemQuantity","change_trackingNumber","change_shipmentService","service","change_customerPO","change_RMA","change_Order","removeItem","index","splice","removeReturnedItem","newShipment","shipment","customer","removePackingSlip","orderandrma","avaiableItems","packingSlip","filter","Display","Search","Message","clear","Button","updateSlipDetails","ShippingServiceList","DndProvider","backend","HTML5Backend","my","getAvailableItems","IconButton","needPackingSlips","RMADate"],"mappings":"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","file":"static/js/9.ae1aeeff.chunk.js","sourcesContent":["import AddIcon from '@material-ui/icons/Add';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport {Button} from \"@material-ui/core\";\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\nimport {useState} from 'react';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\n\n\nexport const DownloadPackingSlipButton = (props) => {\n    return(\n        <Button style={{padding:7}}\n                color=\"primary\" \n                variant=\"contained\"\n                onClick={props.onClick}\n        >\n            Download Packing Slips\n        </Button>\n    );\n}\n\n\nexport const UpdatePackingSlipsButton = (props) => {\n    return(\n        <Button\n            style={{padding:7}}\n            color=\"primary\" \n            variant=\"contained\"\n            onClick={props.onClick}\n        > \n            Update Packing Slips\n        </Button>\n    );\n}\n\n\nexport const SubmitButton = (props) => {\n    return (\n        <Button\n            style={{ marginBottom: 30, width: '100%', padding: \"15px 0px 15px 0px\"}} \n            color=\"primary\" \n            variant=\"contained\"\n            onClick={props.onClick}\n        >\n            {props.children}\n        </Button>\n    );\n}\n\n\nexport const NewButton = (props) => {\n\n    return(\n        <Tooltip title={props.title} placement=\"top\">\n            <IconButton onClick={props.onClick} size=\"small\">\n                <AddIcon color=\"primary\" fontSize=\"large\"/>\n            </IconButton>\n        </Tooltip>\n    );\n};\n\nexport const EditButton = (props) => {\n    return(\n        <Tooltip title=\"Edit\" placement=\"top\">\n            <IconButton onClick={props.onClick} className={props.className}> \n                <EditIcon color={props.color}/>\n            </IconButton>\n        </Tooltip>\n    );\n}\n\nexport const OrderTestButton = (props) =>{\n\n    return(\n        <Tooltip title=\"Serials\" placement=\"top\">\n            <IconButton \n                    onClick={props.onClick}>\n            {\n                props.open && <KeyboardArrowUpIcon />\n            }\n            {\n                !props.open && <KeyboardArrowDownIcon />\n            }\n            </IconButton>\n        </Tooltip>\n    \n    );\n  \n};\n\n\nexport const RmaTestBox = (props) => {\n\n    const checkFailed = () => {\n        props.onChange(props.i, false);\n    };\n    const checkPassed = () => {\n        props.onChange(props.i, true);\n    }\n    \n    return(\n        <FormControl component=\"fieldset\">\n                        <FormGroup row>\n                            <FormControlLabel\n                                control={<Checkbox checked={(props.passed !== null && props.passed !== false) ? props.passed : null} style={{color: \"green\"}} onChange={checkPassed} />}\n                                label=\"Passed\"\n                            />\n                            <FormControlLabel\n                                control={<Checkbox checked={(props.passed === false) ? true : null } style={{color: \"red\"}} onChange={checkFailed} />}\n                                label=\"Failed\"\n                            />\n                        </FormGroup>\n        </FormControl>\n    );\n}\n\nexport const SaveChangesButton = (props) => {\n\n    return(\n        <Button onClick={props.onClick} color=\"primary\">\n                Save Changes\n        </Button>\n    );\n}\n\nexport const FileUploadButton = (props) => {\n    return(\n        <div style={{marginLeft: \"auto\"}}>\n            <input  type=\"file\" \n                    style={{display: \"none\"}} \n                    name=\"upload-file\"\n                    id=\"upload-file\"\n                    value={props.file}\n                    onChange={props.uploadFile}\n                    accept=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n                />\n                <label htmlFor=\"upload-file\" >\n                    <Button variant=\"contained\" color=\"primary\" onClick={props.onChange}>\n                        Upload File\n                    </Button>\n                </label>\n        </div>\n    );\n}\n\n\nexport const ShippingOrderByInput = (props) => {\n    return( \n        <ToggleButtonGroup exclusive value={props.value}>\n            \n        </ToggleButtonGroup>\n    );\n}\n\n","import TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport {makeStyles, requirePropFactory, useTheme} from \"@material-ui/core\";\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from\"@material-ui/core/Select\";\nimport React from \"react\";\n\nconst useStyles = makeStyles(() => ({\n    textFieldRoot: {\n        fontSize:  18,\n        \"& .Mui-disabled\": {\n            color: \"black\",\n        },\n        width: 275,\n    },\n    identifierRoot:{\n        fontSize:  20,\n        \"& .Mui-disabled\": {\n            color: \"black\",\n        },\n        height: \"auto\",\n        width:\"100%\",\n    },\n\n    multilineRoot:{\n        fontSize: 18,\n        \"& .Mui-disabled\": {\n            color: \"black\",\n        },\n        width: 275,\n    },\n    fullWidth : {\n        flexGrow: 0,\n    },\n    noteWidth : {\n        width: 275,\n        height: \"100%\",\n    },\n    labelIdRoot: {\n        fontSize: 20,\n        \n    },\n    labelRoot:{\n        fontSize: 20\n    },\n    labelFocused: {}\n\n\n}));\n\n\nconst getInputProps = (params, classes, props) => {\n\n    let InputProps;\n    if(params){\n        InputProps = {\n            ...params.InputProps,\n            classes: {root: classes.textFieldRoot},\n        }\n    }\n    else{\n        InputProps = {classes: {root: classes.textFieldRoot}};\n    }\n\n    if(!props.edit){\n        InputProps.disableUnderline = true;\n    }\n\n    return InputProps;\n\n}\n\n\nexport const CustomerField = (props) => {\n    \n    const classes = useStyles();\n\n    return(\n        <Autocomplete id=\"customer\"\n                options={props.customers}\n                getOptionLabel={(option) => option.customerName}\n                disabled={!props.edit}\n                onChange={props.onChange}\n                value={props.value}\n                freeSolo\n                className={classes.fullWidth}\n                renderInput={(params) => <TextField   {...params}\n                                                        label=\"Customer\"\n                                                        variant={(props.edit) ? \"outlined\" : \"standard\" }\n                                                        InputProps={getInputProps(params, classes, props)}\n                                                        InputLabelProps={{\n                                                             ...params.InputLabelProps,\n                                                            classes: {root: classes.labelRoot},\n                                                            shrink: true \n                                                        }}\n                                        \n                                                        />}\n                            />\n    );\n}\n\nexport const ProductField = (props) => {\n    const classes = useStyles();\n    \n    return(\n        <Autocomplete id=\"product\"\n                options={props.products}\n                getOptionLabel={(option) => option.productName}\n                disabled={!props.edit}\n                onChange={props.onChange}\n                value={props.value}\n                freeSolo\n                className={classes.fullWidth}\n                renderInput={(params) => <TextField   {...params}\n                                                        label=\"Product\"\n                                                        variant={(props.edit) ? \"outlined\" : \"standard\" }\n                                                        InputProps={getInputProps(params, classes, props)}\n                                                        InputLabelProps={{\n                                                            ...params.InputLabelProps,\n                                                           classes: {root: classes.labelRoot},\n                                                           shrink: true\n                                                        }}\n                                                        />}\n                            />\n    );\n};\n\nexport const DateField = (props) => {\n    const classes = useStyles();\n    const label = (!props.label) ? \"Expr Date\" : props.label;\n    const now = new Date();\n\n    return(\n        <TextField\n                        id=\"date\"\n                        label={label}    \n                        type=\"date\"\n                        defaultValue=\"yyyy-MM-dd\"\n                        variant={(props.edit) ? \"outlined\" : \"standard\" }\n                        value={(props.value) ? props.value.toISOString().substring(0, 10) : now.toISOString().substring(0,10)}\n                        disabled={!props.edit}\n                        className={classes.fullWidth}\n                        InputProps={getInputProps(null, classes, props)}\n                        InputLabelProps={{classes: {root: classes.labelRoot}, shrink: true}} \n                        onChange={props.onChange}\n            />\n    );\n}\n\nexport const ShippingField = (props) => {\n    const classes = useStyles();\n    return(\n        <TextField\n            id=\"customer-ship-to\"\n            label=\"Ship To\"\n            multiline\n            rows={4}\n            className={classes.fullWidth}\n            rowsMax={10}\n            value={(props.value) ? (props.value) : \"\"}\n            variant={(props.edit) ? \"outlined\" : \"standard\" }\n            InputProps={getInputProps(null, classes, props)}\n            InputLabelProps={{classes: {root: classes.labelRoot}, shrink: true}} \n            disabled={!props.edit}\n            onChange={props.onChange}\n        /> \n    );\n}\n\nexport const ToField = (props) => {\n    const classes = useStyles();\n\n    return(\n        <TextField\n            id=\"customer-to\"\n            label=\"To\"\n            value={(props.value) ? (props.value) : \"\"}\n            multiline\n            className={classes.fullWidth}\n            rows={4}\n            rowsMax={10}\n            variant={(props.edit) ? \"outlined\" : \"standard\" }\n            InputProps={getInputProps(null, classes, props)}\n            InputLabelProps={{classes: {root: classes.labelRoot}, shrink: true}} \n            disabled={!props.edit}\n            onChange={props.onChange}\n        />\n    );\n}\n\n\nexport const IdentifierField = (props) => {\n    const classes = useStyles();\n    let InProps = {\n        classes:{root: classes.identifierRoot}\n    }\n    if(!props.allowEdit)\n    {\n        InProps.readOnly = true;\n    }\n\n    return(\n        <TextField\n                error={!props.value}\n                variant={(props.edit) ? \"outlined\" : \"standard\" }\n                helperText={(!props.value) ? props.label + \" Required\" : \"\"}\n                label={props.label}\n                value={(props.value) ? props.value : \"\"}\n                InputProps={InProps}\n                fullWidth\n                onChange={props.onChange}\n                InputLabelProps={{\n                    classes: {\n                        root: classes.labelIdRoot,\n                        focused: classes.labelFocused\n                    },\n                    shrink: true\n                }}\n                    />\n\n    );\n}\n\n\nexport const MeshField  = (props) => {\n    const classes = useStyles();\n    return(\n        <TextField\n                label=\"Mesh\"\n                value={(props.value) ? (props.value) : \" \"}\n                variant={(props.edit) ? \"outlined\" : \"standard\" }\n                InputProps={getInputProps(null, classes, props)}\n                InputLabelProps={{classes: {root: classes.labelRoot}, shrink: true}} \n                className={classes.fullWidth}\n                disabled={!props.edit}\n                onChange={props.onChange}\n                />\n    );\n}\n\n\nexport const BluetoothField = (props) => {\n    const classes = useStyles();\n    return(\n        <TextField  label=\"BlueTooth\"\n                    variant={(props.edit) ? \"outlined\" : \"standard\" }\n                    value={(props.value) ? props.value : \"\"}\n                    InputProps={getInputProps(null, classes, props)}\n                    InputLabelProps={{classes: {root: classes.labelRoot}, shrink: true}} \n                    className={classes.fullWidth}\n                    disabled={!props.edit}\n                    onChange={props.onChange}\n            />\n    );\n}\n\n\nexport const VersionField = (props) => {\n    const classes = useStyles();\n    return(\n        <TextField      label=\"Version\"\n                        variant={(props.edit) ? \"outlined\" : \"standard\" }\n                        value={(props.value) ? props.value : \"\"}\n                        InputProps={getInputProps(null, classes, props)}\n                        InputLabelProps={{classes: {root: classes.labelRoot},shrink: true}} \n                        className={classes.fullWidth}\n                        disabled={!props.edit}\n                        onChange={props.onChange}\n                />\n    );\n}\nexport const NoteField = (props) => {\n    const classes = useStyles();\n    return(\n        <TextField  label=\"Notes\"\n                    value={(props.value) ? props.value : \"\"}\n                    variant={(props.edit) ? \"outlined\" : \"standard\" }\n                    onChange={props.onChange}\n                    multiline\n                    rows={(props.rows) ? props.rows : 4}\n                    rowsMax={(props.rowsMax) ? props.rowsMax : 10}\n                    InputProps={getInputProps(null, classes, props)}\n                    InputLabelProps={{classes: {root: classes.labelRoot}, shrink: true}}\n        />\n    );\n}\n\nexport const GeneralField = (props) => {\n    const classes = useStyles();\n    return(\n            <TextField  label={props.label}\n                        InputProps={getInputProps(null, classes, props)}\n                        InputLabelProps={{classes: {root: classes.labelRoot},shrink: true}} \n                        value={props.value}\n                        variant={(props.edit) ? \"outlined\" : \"standard\" }\n                        onChange={props.onChange}\n            />\n    );\n}\n\nexport const QuantityField = (props) => {\n    const classes = useStyles();\n    return(\n        <TextField\n                            InputProps={{classes: {root: classes.textFieldRoot}, inputProps:{min:0},disableUnderline: !props.edit,}}\n                            InputLabelProps={{classes: {root: classes.labelRoot}, shrink: true}} \n                            value={props.value}\n                            onChange={props.onChange}\n                            id=\"Quantity\"\n                            label=\"Quantity\"\n                            type=\"number\"\n                            variant={(props.edit) ? \"outlined\" : \"standard\" }\n                        />\n    );\n}\n\n\nexport const SerialField = (props) => {\n    const classes = useStyles();\n    return(\n        <Autocomplete id=\"serial\"\n            options={props.serials}\n            getOptionLabel={(option) => String(option.serialNumber)}\n            onChange={props.onChange}\n            value={props.value}\n            freeSolo\n            renderInput={(params) => <TextField label=\"Serial Number\"\n                                                 variant={(props.edit) ? \"outlined\" : \"standard\" }\n                                                {...params}\n                                                InputProps={getInputProps(params, classes, props)}\n                                                InputLabelProps={{\n                                                    ...params.InputLabelProps,\n                                                   classes: {root: classes.labelRoot},\n                                                   shrink: true \n                                                }}\n                                                />}\n                    />\n    );\n}\n\nexport const OrderField = (props) => {\n    const classes = useStyles();\n    return(\n        <Autocomplete id=\"order\"\n            options={props.orders}\n            getOptionLabel={(option) => (option.orderNumber) ? String(option.orderNumber) : \"\"}\n            onChange={props.onChange}\n            value={(props.value) ? (props.value) : {orderNumber: null}}\n            disabled={!props.edit}\n            freeSolo\n            renderInput={(params) => <TextField label=\"Order Number\"\n                                                variant={(props.edit) ? \"outlined\" : \"standard\" }\n                                                {...params}\n                                                InputProps={getInputProps(params, classes, props)}\n                                                InputLabelProps={{\n                                                    ...params.InputLabelProps,\n                                                   classes: {root: classes.labelRoot}, \n                                                   shrink: true,\n                                                }}\n                                                />}\n                    />\n    );\n}\n\nexport const RMAField = (props) => {\n    const classes = useStyles();\n    return(\n        <Autocomplete id=\"rma\"\n            options={props.rmas}\n            getOptionLabel={(option) => (option.RMANumber) ? String(option.RMANumber) : \"\"}\n            onChange={props.onChange}\n            value={(props.value) ? (props.value) : {RMANumber: null}}\n            disabled={!props.edit}\n            freeSolo\n            renderInput={ (params) => <TextField label=\"RMA Number\"\n                                                variant={(props.edit) ? \"outlined\" : \"standard\" }\n                                                {...params}\n                                                InputProps={getInputProps(params, classes, props)} \n                                                InputLabelProps={{\n                                                    ...params.InputLabelProps,\n                                                   classes: {root: classes.labelRoot}, \n                                                   shrink: true\n                                                }}\n                                        />\n\n            }\n        />\n    );\n}\n\n\nexport const TrackingNumberField = (props) => {\n    const classes = useStyles();\n    return(\n            <TextField  label=\"Tracking Number\"\n                        InputProps={getInputProps(null, classes, props)}\n                        InputLabelProps={{classes: {root: classes.labelRoot}, shrink: true}} \n                        value={(props.value) ? props.value: \"\"}\n                        variant={(props.edit) ? \"outlined\" : \"standard\" }\n                        onChange={props.onChange}\n                        disabled={!props.edit}\n            />\n    );\n}\n\nexport const POField = (props) => {\n    const classes = useStyles();\n    return(\n            <TextField  label=\"PO Number\"\n                        InputProps={getInputProps(null, classes, props)}\n                        InputLabelProps={{classes: {root: classes.labelRoot}, shrink: true}} \n                        value={(props.value) ? props.value : \" \"}\n                        variant={(props.edit) ? \"outlined\" : \"standard\" }\n                        onChange={props.onChange}\n                        disabled={!props.edit}\n            />\n    );\n}\n\nexport const ShippingServiceField = (props) => {\n    const classes = useStyles();\n    return(\n        <Autocomplete id=\"shipping\"\n        options={props.options}\n        getOptionLabel={(option) => option}\n        onChange={props.onChange}\n        value={(props.value) ? (props.value) : \"\"}\n        disabled={!props.edit}\n        freeSolo\n        renderInput={ (params) => <TextField label=\"Shipping Service\"\n                                            variant={(props.edit) ? \"outlined\" : \"standard\" }\n                                            {...params}\n                                            InputProps={getInputProps(params, classes, props)} \n                                            InputLabelProps={{\n                                                ...params.InputLabelProps,\n                                               classes: {root: classes.labelRoot}, \n                                               shrink: true\n                                            }}\n                                    />\n\n        }\n        />\n    );\n}\n\n\n\nexport const BoxNumberField = (props) => {\n    const classes = useStyles();\n\n    return(\n\n         <TextField label=\"Box Number\"\n                    InputProps={getInputProps(null, classes, props)}\n                    InputLabelProps={{classes: {root: classes.labelRoot}, shrink: true}} \n                    value={props.value}\n                    variant={\"standard\" }\n                    disabled={true}\n        />\n    );\n}\n\n\nexport const MultipleSerials = (props) => {\n\n    return (\n        <>\n            <InputLabel id=\"demo-mutiple-name-label\">{props.label}</InputLabel>\n            <Select\n                labelId=\"mutiple-serial-label\"\n                id=\"mutiple-name-serial\"\n                multiple\n                input={<Input />}\n                value={[]}\n                >\n                {props.serials.map((serial) => (\n                    <MenuItem key={serial} value={serial}>\n                        {serial}\n                    </MenuItem>\n                ))}\n            </Select>\n        </>\n    );\n}","import Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { makeStyles, Tab} from \"@material-ui/core\";\nimport Collapse from '@material-ui/core/Collapse';\nimport Box from \"@material-ui/core/Box\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\nimport React from 'react';\n\nconst useStyles = makeStyles({\n  root: {\n    width: '100%',\n  },\n  container: {\n    overflowX: \"hidden\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    width: \"100%\",\n    alignSelf: \"center\",\n    height: \"auto\",\n    overflowY:\"hidden\",\n  },\n\n  repairTable: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    width: \"100%\",\n    alignSelf: \"left\",\n    height:\"100%\",\n    overflowY: \"hidden\",\n    marginBottom: 15\n  },\n  tableHead: {\n    backgroundColor: \"#36435c\",\n    color: \"white\"\n  },\n  repairHead: {\n    backgroundColor: \t\"#1769aa\",\n    color: \"white\",\n  },\n  \n  expandedElement : {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"flex-start\",\n    maxHeight: 600,\n    overflowY: \"scroll\",\n    gap: 5,\n    margin: \"5px 15px 20px 15px\",\n  },\n  row: {\n    '& > *': {\n      borderBottom: 'unset',\n    }, \n  }\n});\n\nexport const CollapseRow = (props) => {\n\n    const classes = useStyles();\n    const [open, setOpen] = React.useState(false);\n\n    return(\n      <React.Fragment>\n        <TableRow className={classes.row}>\n            {\n                props.items.map((item, i) => <TableCell key={i} align={(i === 0) ? \"left\" : \"center\"}>{item}</TableCell>)\n            }\n            <TableCell>\n                <IconButton aria-label=\"expand row\"  size=\"small\" onClick={() => setOpen(!open)}>\n                    { open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n                </IconButton>\n            </TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell colSpan={props.items.length + 1} align=\"center\" style={{padding: \"0px 0px 0px 0px\"}}>\n              <Collapse in={open} timeout=\"auto\" unmountOnExit>\n                <Box className={classes.expandedElement}>\n                  {\n                    props.subItems\n                  }\n                </Box>\n              </Collapse>\n          </TableCell>\n      </TableRow>\n    </React.Fragment>\n    \n    );\n}\n\n\n\nexport const Row = (props) => {\n    const classes = useStyles();\n    return(\n        <TableRow>\n            {\n                props.items.map((item, i) =><TableCell key={i} align={(i === 0) ? \"left\" : \"center\"}>{item}</TableCell>)\n            }\n        </TableRow>\n    );\n}\n\nexport const RepairTable = (props) => {\n  const classes = useStyles();\n  return(\n    <TableContainer className={classes.repairTable} component={Paper}>\n      <Table>\n        <TableBody>\n          {\n            props.rows\n          }\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n\nexport function GenTable(props){\n  const classes = useStyles();\n\n  return(\n    <TableContainer component={Paper} className={classes.container} elevation={2} >\n              <Table stickyHeader>\n                {props.children}\n              </Table>\n    </TableContainer>\n  );\n}\n\nexport function GenTableHead(props){\n  const classes = useStyles();\n  return(\n    <TableHead>\n      <TableRow>\n      {\n        React.Children.map( props.children, (item, i) => <TableCell key={i} align={(i === 0) ? \"left\" : \"center\"} className={classes.tableHead}>{item}</TableCell>)\n      }\n      </TableRow>\n  </TableHead>\n  );\n}\n\nexport function GenTableBody(props){\n  return(\n    <TableBody>\n      {props.children}\n    </TableBody>\n  );\n}\n\nexport function GenTableRow(props){\n\n  return(\n      <TableRow>\n      {\n          React.Children.map(props.children, (item, i) =><TableCell key={i} align={(i === 0) ? \"left\" : \"center\"}>{item}</TableCell>)\n      }\n      </TableRow>\n  );\n}\n\nconst TemplateTable = (props) => {\n    const classes = useStyles(); \n    return(\n          <TableContainer component={Paper} className={classes.container} elevation={2}>\n              <Table stickyHeader>\n                <TableHead>\n                  <TableRow>\n                  {\n                    props.tableHead.map( (item, i) => <TableCell key={i} align={(i === 0) ? \"left\" : \"center\"} className={classes.tableHead}><b>{item}</b></TableCell>)\n                  }\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {\n                    props.rows\n                  }\n                </TableBody>\n              </Table>\n          </TableContainer>\n    );\n}\n\n\nexport default TemplateTable;","import React from 'react';\nimport {makeStyles} from \"@material-ui/core\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport {NewButton} from \"./Buttons\";\nimport {Title} from \"../Text\";\n\n \nconst useStyles = makeStyles(() => ({\n    search : {\n        flexGrow : 1,\n        display: \"flex\",\n        flexDirection: \"row\",\n        width: \"100%\",\n        height: \"auto\",\n        borderBottom: \"1px solid #E0E0E0\",\n        paddingBottom: 20,\n        marginBottom: 15,\n      },\n      searchBarContainer: {\n        display:\"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        gap: 3,\n        marginTop: 15,\n      },\n      in:{\n        fontSize: 20,\n      }\n}));\n\n\nconst SearchInput = (props) => {\n\n    \n    return(\n        <Autocomplete\n          id=\"combo-box-demo\"\n          onChange={props.onChange}\n          options={props.options}\n          ListboxProps={{ style: { maxHeight: \"25rem\" }}}\n          style={{width: \"100%\", alignSelf:\"center\", }}\n          getOptionLabel={props.getOptionLabel}\n          renderInput={(params) => <TextField \n                                            {...params}  \n                                            variant=\"outlined\"\n                                            InputProps={{...params.InputProps, classes: {root: props.className}}}\n                                          \n                                    />}\n          />\n    );\n};\n\n\nexport  const SearchBar = (props) => {\n    const classes = useStyles();\n    return(\n        <div className={classes.search}>\n                  <Title variant=\"h5\">\n                    {props.label}\n                    <div className={classes.searchBarContainer}>\n                      <SearchInput className={classes.in} onChange={props.onChange} options={props.options} getOptionLabel={props.getOptionLabel}/>\n                      {!props.noNew && <NewButton title=\"New\" onClick={props.newOrderFunction} />}\n                    </div>\n                  </Title>\n                  \n        </div>\n    )\n}","import React from 'react';\nimport { makeStyles} from \"@material-ui/core\";\nimport {EditButton} from \"../Common/Buttons\";\nimport Paper from \"@material-ui/core/Paper\";\nimport {SaveChangesButton} from \"../Common/Buttons\";\n\n\nconst useStyles = makeStyles(() => ({\n\n    rootConatiner: {\n        display: \"flex\",\n        flexDirection:\"column\",\n        gap: 10,\n        padding : \"10px 30px 30px 30px\",\n        borderRadius: 1,\n        marginTop: 15,\n    },\n\n    edit: {\n        display: \"flex\",\n        flexDirection: \"row-reverse\",\n    },\n    editButton:{ \n        fontSize: 10,\n        display:\"flex\",\n        flexDirection: \"column\",\n    },\n    content: {\n        gap: 20,\n        display: \"flex\",\n        flexFlow: \"wrap\",\n        position: \"relative\",\n        alignItems: \"center\",\n        maxWidth: 800,\n\n    },\n    item : {\n        display: \"flex\",\n        alignSelf:\"stretch\",\n        paddingTop: 7,\n        paddingBottom: 7,\n    },\n    id:{\n        width: \"100%\",\n        paddingBottom: 17,\n    }\n\n}));\n\nclass Head extends React.Component{\n\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            edit: false,\n            color: \"inherit\",\n        };\n    }\n\n    changeEdit = () => {\n        const color = (!this.state.edit) ? \"primary\" : \"inherit\";\n        this.setState({\n                        edit: !this.state.edit, \n                        color: color,\n        });\n    }\n\n\n    saveChanges = (event) => {\n        this.changeEdit();\n        this.props.updateHead(event);\n    }\n\n    render(){\n\n        const {classes} = this.props;\n        const {edit, color} = this.state;\n        \n\n        return(\n            <Paper className={classes.rootConatiner} elevation={2}>\n                {this.props.edit && \n                    <div className={classes.edit}>\n                        <EditButton onClick={this.changeEdit} className={classes.editButton} color={color} /> \n                    </div>\n                }\n                {\n                    !this.props.edit\n                    &&\n                    <div style={{paddingTop: 20}}></div>\n                }\n                <div className={classes.id}>{this.props.children[0]}</div>\n                <div className={classes.content}>\n                    {React.Children.map(this.props.children, (child, i) => {\n                                    if(i > 0){\n                                        let item;\n\n                                        if(child.props.noEdit)\n                                        {\n                                            item = React.cloneElement(child, {edit: false});\n                                        }\n                                        else if(this.props.edit)\n                                        {\n                                            item = React.cloneElement(child, {edit: this.state.edit});\n                                        }\n                                        else{\n                                            item = React.cloneElement(child, {edit: true});\n                                        }\n                                        return <div className={classes.item} key={i}>{item}</div>;\n                                    }\n                    })}\n                    \n                    <div style={{marginLeft: \"auto\", marginTop: 20,}}>{this.props.edit && this.props.change && <SaveChangesButton onClick={this.saveChanges} />}</div>\n                </div>\n            </Paper>\n        );\n    }\n}\n\nexport default function HeadDisplay(props){\n    const classes = useStyles();\n    return <Head classes={classes} {...props} />\n\n}","import Paper from '@material-ui/core/Paper';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\n\n\n\nexport default function ItemTabs(props){\n    \n    return(\n        <Paper square style={{width: \"100%\"}}>\n            <Tabs\n                value={props.value}\n                indicatorColor=\"primary\"\n                textColor=\"primary\"\n                onChange={props.onChange}\n                variant=\"scrollable\"\n                scrollButtons=\"auto\"\n                aria-label=\"scrollable auto tabs example\"\n                \n            >\n                \n                {\n                    props.tabLabels.length && \n                    props.tabLabels.map(\n                        (item, i) => <Tab key={i} label={item} />\n                    )\n                }\n            </Tabs>\n        </Paper>\n    );\n}","\n\nmodule.exports = [\n    //USPS\n    \"USPS Priority Mail Express\",\n    \"USPS Priority Mail\",\n    \"USPS Retail Ground\",\n    \"USPS Media Mail\",\n    \"USPS First-Class Mail\",\n\n    //Fedex\n    \"FedEx Ground\",\n    \"FedEx First Overnight\",\n    \"FedEx Priority Overnight\",\n    \"FedEx Standard Overnight\",\n    \"FedEx 2Day\",\n    \"FedEx Express Saver\",\n\n    //UPS\n    \"UPS Ground Shipping\",\n    \"UPS Next Day Air\",\n    \"UPS Express\",\n];","import React from \"react\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Box from \"@material-ui/core/Box\";\nimport {NewButton} from \"../Common/Buttons\";\n\nimport { useDrag, useDrop} from 'react-dnd'\n\n\nimport { Typography } from \"@material-ui/core\";\n\nconst ItemTypes = {\n    PRODUCT: 'product',\n};\n\nexport function ItemDropTable(props){\n\n    const [{ isOver, canDrop }, drop] = useDrop(\n\n        () => ({\n          accept: ItemTypes.PRODUCT,\n          drop: (item) => props.addItem(item),\n          collect: (monitor) => ({\n            isOver: !!monitor.isOver(),\n          })\n        }),\n    );\n    \n    return(\n        <Box ref={drop}>\n            {props.children}\n        </Box>\n    );\n}\n\n\nfunction DragItem(props) {\n\n    const [{isDragging}, drag] = useDrag({\n        type: ItemTypes.PRODUCT,\n        item: props.item,\n        collect: monitor => ({\n          isDragging: !!monitor.isDragging(),\n        }),\n    });\n\n    return (\n        <React.Fragment>\n        {\n            (props.item.quantity !== 0) && \n            <Paper ref={drag} style={{maxWidth: 300}}>\n                <Box p={3} display=\"flex\" flexDirection=\"column\">\n                    <Typography style={{color: \"#3f51b5\", fontWeight: 600,}}>{props.productName}</Typography>\n                    <Typography>{\"Quantity: \" + props.item.quantity} </Typography>\n                </Box>\n            </Paper>\n        }\n        </React.Fragment>\n        \n    );  \n}\n\nexport default class ShippingItems extends React.Component{\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            serial: null,\n            product: null,\n            quantity: 0,\n        }\n    }\n\n\n    setSerial = (event, serial) => {\n        if(serial){\n            const product = this.props.products.find((product) => serial.productId === product.productId );\n            this.setState({serial: serial, product: product});\n        }\n\n    }\n\n    setProduct = (event, product) => {\n        this.setState({product: product, serial: null});\n    }\n\n    setQuantity = (event) => {\n        this.setState({quantity: parseInt(event.target.value)});\n    }\n\n\n    addItem = () => {\n\n        const {product, serial, quantity} = this.state;\n\n        if(product && quantity && !serial){\n            this.props.addItem({product: product, serial: serial, quantity: quantity});\n        }\n\n        this.setState({product: null, serial: null, quantity: 0});\n    }\n\n    render() \n    {\n        const {products,availableItems} = this.props;\n        const {serial,product, quantity} = this.state;\n\n        return(\n            <Box mt={1}>\n                <Paper elevation={2} >\n                    <Box padding={4} display=\"flex\" flexDirection=\"row\" style={{gap: 15}} flexWrap=\"wrap\">\n                            {\n                                availableItems.map((item, i) => {\n                                    if(item.productId){\n                                        const productName = products.find(p => p.productId === item.productId).productName;\n                                        return (\n                                                <DragItem \n                                                    productName={productName}\n                                                    item={item}\n                                                />\n                                        );\n                                    }\n                                })\n                            }\n                    </Box>\n                </Paper>\n            </Box>\n        )\n    }\n\n} ","import {useState} from 'react';\nimport { makeStyles} from \"@material-ui/core\";\n\n\n\nconst useStyles = makeStyles(() => ({\n    root: {\n        width: '210mm',\n        minHeight: '297mm',\n        overflow: \"hidden\",\n        marginLeft: \"auto\",\n        marginRight: \"auto\",\n        backgroundColor: \"white\",\n        display: \"none\",\n    },\n\n    notInvoice: {\n        textAlign: \"center\",\n        width: \"100%\",\n    },\n\n    header: {\n        display:\"flex\",\n        marginTop: 20,\n        width: \"100%\",\n    },\n\n    footer: {\n        marginTop: 20,\n        bottom: 0,\n        width:\"100%\",\n        textAlign: \"center\",\n    },\n    contactInfo: {  \n        alignSelf: \"flex-start\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        marginLeft: 15,\n        gap: 7,\n        \"& div\": {\n            color: \"#2e75b6\"\n        }\n    },\n    vLogo: {\n        marginRight: \"auto\",\n        marginLeft: 30,\n        \"& img\":{\n            width: 200,\n            height: 150,\n        }\n    },\n    packingSlipNumber : {\n        marginLeft: \"auto\",\n        textAlign:\"right\",\n        display:\"flex\",\n        flexDirection: \"column\",\n        marginRight: 15,\n        top: 0,\n        \"& div\" :{\n            fontSize: 20,\n        }\n    },\n\n    locations: {\n        marginTop: 50,\n        display:\"flex\",\n        justifyContent: \"center\",\n        flexGrow: 1, \n        marginLeft: 15,\n        marginRight: 15,\n        gap: 160,\n\n    },\n\n    locationChild: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        gap: 5,\n    },\n\n    shipmentDetails : {\n        marginTop: 25,\n        marginLeft: 15,\n        marginRight: 15,\n        marginBottom: 25,\n        paddingTop: 20,\n        paddingBottom: 20,\n        borderTop: \"1px solid #E0E0E0\",\n        borderBottom: \"1px solid #E0E0E0\",\n        alignItems:\"center\",\n        justifyContent: \"center\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        gap: 20,\n    },\n\n    shipmentDetailsRow: {\n        display: \"flex\",\n        gap: 20,\n        \"& div\" : {\n            padding: 4,\n            width: 150,\n        },\n        \"& div > b\": {\n            textDecoration: \"underline\",\n        }\n    },\n\n    table: {\n        width:\"90%\",\n        tableLayout: \"fixed\",\n        marginLeft:\"auto\",\n        marginRight: \"auto\",\n        textAlign: \"center\",\n        \"& tr\": {\n            borderBottom: '1px solid black',\n            padding: \"3px 0px 3px 0px\",\n        }\n    },\n\n    tableHeadRow: {\n        width: \"100%\",\n        color: \"white\",\n        backgroundColor: '#9dc3e6',\n        textAlign: \"center\",\n    }\n\n\n}));\n\n\nexport default function ShippingPrintSheet(props){\n\n    const classes = useStyles();\n    const packingSlips = props.packingSlips;\n    const shipDate = new Date();\n    const slipIdx = props.slipIndex;\n\n    let totalQuantity = 0;\n\n    packingSlips[slipIdx].items.map((item) => totalQuantity += item.quantity);\n    packingSlips[slipIdx].returnedItems.map((item) => totalQuantity += item.quantity)\n\n\n    return(\n        <div id=\"printSheet\" className={classes.root}>\n            <div className={classes.notInvoice}>THIS IS NOT AN INVOICE</div>\n            <div className={classes.header}>\n                <div className={classes.contactInfo}>\n                    <div style={{fontSize: 23}}>Versacall Technologies Inc.</div>\n                    <div>7047 Carroll Rd.</div>\n                    <div>San Diego, CA USA 92121</div>\n                    <div>Phone: 858-677-6766</div>\n                    <div>Fax: 858-677-6765</div>\n                    <div>Versacall.com</div>\n                </div>\n                <div className={classes.vLogo}>\n                    <img src=\"/VersaCallImage.png\"></img>\n                </div>\n                <div className={classes.packingSlipNumber}>\n                    <div>\n                        Packing Slip\n                    </div>\n                    <div>\n                        {packingSlips[slipIdx].packingSlipNumber}\n                    </div>\n                </div>\n            </div>\n            <div className={classes.locations}>\n                <div className={classes.locationChild}>\n                    <b style={{fontSize: 16, textDecoration: \"underline\"}}>Ship To: </b>\n                    {\n                        props.shipTo.split(\"\\n\").map((item) => <div>{item}</div>)\n                    }\n                </div>\n                <div className={classes.locationChild}>\n                    <b style={{fontSize: 16, textDecoration: \"underline\"}}>Customer:(if different)</b>\n                    {\n                        props.to.split(\"\\n\").map((item) => <div>{item}</div>)\n                    }\n                </div>\n            </div>\n            <div className={classes.shipmentDetails}>\n                <div className={classes.shipmentDetailsRow}>\n                    <div>\n                        <div>\n                            <b>Date Shipped</b>\n                        </div>\n                        <div>\n                            {`${shipDate.getMonth()}/${shipDate.getDate()}/${shipDate.getFullYear()}`}\n                        </div>\n                    </div>\n                    <div>\n                        <div>\n                            <b>Date Ordered</b>\n                        </div>\n                        <div>\n                            {`${props.orderDate.getMonth()}/${props.orderDate.getDate()}/${props.orderDate.getFullYear()}`}\n                        </div>\n                    </div>\n                    <div>\n                        <div>\n                            <b>Shippment Service</b>\n                        </div>\n                        <div>\n                            {packingSlips[slipIdx].shipmentService}\n                        </div>\n                    </div>\n                    <div>\n                        <div>\n                            <b>Tracking Number</b>\n                        </div>\n                        <div>\n                            {packingSlips[slipIdx].trackingNumber}\n                        </div>\n                    </div>\n                </div>\n                <div className={classes.shipmentDetailsRow}> \n                    <div>\n                        <div>\n                            <b>Package No.</b>\n                        </div>\n                        <div>\n                            {packingSlips[slipIdx].boxNumber}\n                        </div>\n                    </div>\n                    <div>\n                        <div>\n                            <b>Customer PO</b>\n                        </div>\n                        <div>\n                            {packingSlips[slipIdx].customerPO}\n                        </div>\n                    </div>\n                    <div>\n                        <div>\n                            <b>Order Type</b>\n                        </div>\n                        <div>\n                            {packingSlips[slipIdx].orderNumber ? \"Sales\" : null}\n                            {packingSlips[slipIdx].orderNumber && packingSlips[slipIdx].RMANumber ? \"/\" : null}\n                            {packingSlips[slipIdx].RMANumber ? \"RMA\" : null}\n                        </div>\n                    </div>\n                    <div>\n                        <div>\n                            <b>Order Number</b>\n                        </div>\n                        <div>\n                            {packingSlips[slipIdx].orderNumber ? `SO#${packingSlips[slipIdx].orderNumber}`: null}\n                            {packingSlips[slipIdx].orderNumber && packingSlips[slipIdx].RMANumber ? \"/\" : null}\n                            {packingSlips[slipIdx].RMANumber ? `RMA#${packingSlips[slipIdx].RMANumber}` : null}\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <table className={classes.table}>\n                <tr className={classes.tableHeadRow}>\n                    <th style={{width: 75}}>Ordered</th>\n                    <th style={{width: 75}}>Shipped</th>\n                    <th style={{width: 150}}>Item</th>\n                    <th style={{width: 250}}>Descriptor</th>\n                </tr>\n                {       \n                        packingSlips[slipIdx].items.map((item) => {   \n                           const ordered = (props.order) ? props.order.items.find(i => i.productId === item.productId) : null;\n                           return  (\n                                    <tr>\n                                        <td>{(ordered) ? ordered.quantity : item.quantity}</td>\n                                        <td>{item.quantity}</td>\n                                        <td>{item.productId}</td>\n                                        <td>{props.products.find(p => p.productId === item.productId).productName}</td>\n                                    </tr>\n                           );\n                        })\n                }\n            </table>\n            <div style={{ width: \"100%\", textAlign:\"center\", marginTop: 40,}}>\n                <b>Customer Property Being Returned</b>\n            </div>\n            <table className={classes.table}>\n                <tr className={classes.tableHeadRow}>\n                        <th style={{width: 75}}>Ordered</th>\n                        <th style={{width: 75}}>Shipped</th>\n                        <th style={{width: 150}}>Item</th>\n                        <th style={{width: 250}}>Descriptor</th>\n                </tr>\n                {       \n                        packingSlips[slipIdx].returnedItems.map((item) => {\n                           return  (\n                                    <tr>\n                                        <td></td>\n                                        <td>{item.quantity}</td>\n                                        <td>{item.productId}</td>\n                                        <td>{props.products.find(p => p.productId === item.productId).productName}</td>\n                                    </tr>\n                           );\n                        })\n                }\n            </table >\n            <table style={{marginTop: 25, marginLeft: \"5%\"}}>\n                <tr className={classes.tableHeadRow}>\n                    <th style={{padding: \"5px 10px 5px 10px\"}}>Total Items Shipped</th>\n                    <th style={{backgroundColor: \"#E0E0E0\", color: \"black\", padding: \"5px 10px 5px 10px\",}}>\n                        {totalQuantity}\n                    </th>\n                </tr>\n            </table>\n            <div className={classes.footer}>\n                <b>Thank you for your business with Versacall</b>\n            </div>\n        </div>\n    );\n} ","import {SearchBar} from \"../Common/Search\";\nimport React, {useState} from 'react';\nimport {Display, DisplayItem} from \"../Common/Display\";\nimport HeadDisplay from \"../Common/HeadDisplay\";\nimport {Message} from \"../Common/Message\";\nimport ItemTabs from \"../Common/ItemTabs\";\nimport { NewButton, DownloadPackingSlipButton, SubmitButton, UpdatePackingSlipsButton } from \"../Common/Buttons\";\nimport {GenTable, GenTableRow,  GenTableHead, GenTableBody} from \"../Common/TemplateTable\";\nimport { \n        IdentifierField, \n        RMAField, \n        ShippingField, \n        TrackingNumberField,\n        ToField,\n        OrderField,\n        BoxNumberField,\n        POField,\n        ShippingServiceField,\n\n    } from \"../Common/Fields\";\n\nimport ShippingItems, {ItemDropTable} from \"./ShippingItems\";\nimport ShippingServiceList from \"./ShippingServices\";\n\n\nimport Box from \"@material-ui/core/Box\";\nimport Typography from \"@material-ui/core/Typography\";\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nimport { Button, IconButton, TextField } from \"@material-ui/core\";\n\n\nimport { DndProvider } from \"react-dnd\"\nimport { HTML5Backend } from \"react-dnd-html5-backend\"\nimport ShippingPrintSheet from \"./ShippingPrintSheet\";\n\n\nfunction QuantityChange(props){ //component to change quantity of item in packing slip\n\n    const [edit, setEdit] = useState(false);\n\n    const onDoubleClick = (event) => {\n        setEdit(true);\n    }\n\n    const onEnterKey = (event) => {\n        if(event.key === \"Enter\")\n        {\n            setEdit(!edit);\n        }\n    }\n\n    return  (\n        <div \n            onDoubleClick={onDoubleClick}\n            onKeyDown={onEnterKey}\n        >\n            {\n                edit && \n                <TextField\n                    value={props.value}\n                    onChange={props.onChange}\n                    id=\"Quantity\"\n                    label=\"Quantity\"\n                    type=\"number\"\n                    variant=\"outlined\"\n                    style={{width: 100}}\n                />\n            }\n            {\n               !edit &&\n                props.value\n            }\n        </div>\n    )\n\n}\n\nexport default class ShippingDisplay extends React.Component{\n\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            \n            order: null,\n            rma: null,\n            newShipment: false,\n            options: null,\n\n            change: null,\n            message: null,\n\n            packingSlips: null,\n\n            downloadSlips: false,\n\n            tab: 0,\n\n            downloadSlipIndex: 0,\n\n        };\n\n        let pdf = null;\n    }\n\n    componentDidMount(){\n\n        //when component mounts, map all orders and rmas into the same list to choose for packing slips\n        const orderandrma = [];\n        //format {id, text: what to render, type: (rma | order)}\n\n        this.props.orders.map((order) => orderandrma.push({ id: order.orderNumber, text: \"Order - \"  + order.orderNumber, customer: order.customer, type: \"Order\" }));\n\n        this.props.rmas.map((rma) => orderandrma.push({ id: rma.RMANumber, text: \"RMA - \" + rma.RMANumber, customer: rma.customer, type: \"RMA\"}));\n\n        this.setState({options: orderandrma});\n    }\n\n    downloadPackingSlips = () => {\n        this.setState({downloadSlips: true}, this.getSlipImage); //set the slip to download and call the slip image\n        //downloadslips: true renders it to the dom\n    }\n\n    getSlipImage = () => {\n\n        const jsPDF = window.jsPDF; //library for pdf\n        const html2canvas = window.html2canvas; //library for canvas from html\n\n        const page = document.getElementById(\"printSheet\"); //get the rendered dom element \n        page.style.display=\"block\"; //display it\n\n        html2canvas(page) //create a canvas\n           .then((canvas) => {\n                const imgData = canvas.toDataURL('image/png'); //get image data from canvas\n\n                page.style.display=\"none\"; //remove the display\n\n                if(this.pdf)\n                {    \n                    this.pdf.addPage(); //add the page to the pdf if it already exists\n                    this.pdf.addImage(imgData, 'JPEG', 0, 0);\n                }\n                else{   //if does not exists then create new pdf\n                    this.pdf = new jsPDF();\n                    this.pdf.addImage(imgData, 'JPEG', 0, 0);\n                }\n                \n                if(this.state.downloadSlipIndex === this.state.packingSlips.length - 1){\n\n                    //if its that last slip to render then download the page\n                    this.pdf.save(\"PackingSlips.pdf\");\n                    this.pdf = null;\n\n                    this.setState({downloadSlipIndex: 0, downloadSlips: false}); //reset state remove render from dom\n\n                }\n                else{\n                    //probrably an easier way to do this, maybe render all packing slips to the dom at once then take picture\n                    //instead of rendering each page\n                    this.setState({downloadSlipIndex: this.state.downloadSlipIndex + 1} , this.downloadPackingSlips); //go to the next page\n                }\n            });\n    }\n\n    createPackingSlips = async (event) => {\n\n        const packingSlips = this.state.packingSlips;\n\n\n        //loop through all packing slips to get the ones already made and add new ones\n        for(let i = 0; i < packingSlips.length; i++)\n        {\n            if(packingSlips[i].packingSlipNumber !== null) //packing slip already created go to next\n            {\n                continue;\n            }\n\n            const newSlip = { //setup proper format\n                trackingNumber:     packingSlips[i].trackingNumber,\n                boxNumber:          packingSlips[i].boxNumber,  \n                orderNumber:        packingSlips[i].orderNumber,\n                RMANumber:          packingSlips[i].RMANumber,\n                items:              packingSlips[i].items,\n                customerPO:         packingSlips[i].customerPO,\n                shipmentService:    packingSlips[i].shipmentService,\n                returnedItems:      packingSlips[i].returnedItems,\n            };\n\n            const headers = {\n                method: \"POST\",\n                headers: {\"Content-Type\": \"application/json\"},\n                body: JSON.stringify(newSlip),\n            };\n    \n        \n\n            await fetch(\"/api/packingSlips/create/\", headers)\n                .then((res) => {\n                    if(res.ok)\n                    {\n                        return res.json();\n                    }\n                    res.json().then((err) => this.setState({message: { error: true, text:   err.message, }}));\n                })\n                .then((slip) => {\n\n                    if(!slip){return;}\n\n                    this.setState((prevState) => {\n                        //if a successful create, then update the state\n                        const pSlips = prevState.packingSlips;\n                        pSlips[i] = slip;\n\n                        return {    packingSlips: pSlips, \n                                    message:      {error: false, text: \"Packing Slip Successfuly created\"}\n                                };\n                    });\n                })\n                .catch(err => this.setState({message: {error: true, text: err.message}}));\n\n        }\n\n    }\n\n    fetchPackingSlips = (event, searchObject) => { //function to handle input from the search/select bar\n\n        if(!searchObject)\n        {\n            return;\n        }\n\n        let requestURL = \"/api/packingSlips/findMany/\";\n\n        if(searchObject.type === \"Order\") //if order update url\n        {\n            requestURL += \"?orderNumber=\" + searchObject.id;\n        }\n        else if(searchObject.type === \"RMA\") //elif rma update url\n        {\n            requestURL += \"?RMANumber=\" + searchObject.id;\n        }\n\n        fetch(requestURL)\n            .then((res) => {\n                \n                if(res.ok)\n                {\n                    return res.json();\n                }\n                \n                res.json().then((err) => this.setState({message : {error: true, text: err.message }}));\n            })\n            .then((packingSlips) => {\n\n                if(!packingSlips){return;}\n            \n                if(packingSlips.length){ \n                        //go find the order | rma to get items, shipment info etc,\n\n                        if(packingSlips[0].RMANumber) //if rma then go grab the rma for it\n                        {\n                            this.fetchRMA(packingSlips[0].RMANumber);\n                        }\n                        else{\n                            this.setState({rma: null});\n                        }\n\n                        if(packingSlips[0].orderNumber) //if orderr then go grab order for it\n                        {\n                            this.fetchOrder(packingSlips[0].orderNumber);\n                        }\n                        else{\n                            this.setState({order: null});\n                        }\n                }\n                else{\n\n                    //if no packing slips are made for order, go grab the correct (order | rma) to get items, info etc\n                    if(searchObject.type === \"Order\")\n                    {\n                        this.fetchOrder(searchObject.id);\n                        this.setState({rma: null});\n                    }\n\n                    if(searchObject.type === \"RMA\")\n                    {\n                        this.fetchRMA(searchObject.id);\n                        this.setState({order: null});\n                    }\n                    \n                    //add new slip to the list\n                    packingSlips.push({\n                        packingSlipNumber:  null,\n                        trackingNumber:     null,\n                        customerPO:         null,\n                        shipmentService:    null,\n                        items:              [],\n                        returnedItems:      [],\n                        boxNumber:          1,\n                        RMANumber:          (searchObject.type === \"RMA\") ? searchObject.id : null,\n                        orderNumber:        (searchObject.type === \"Order\") ? searchObject.id : null,\n                    });\n                }\n\n\n                this.setState({\n                    packingSlips:       packingSlips, \n                    tab:                0,\n                });\n\n            })\n            .catch((err) => this.setState({message: {error: true, text: err.message}}));\n    }\n\n    fetchOrder = (orderNumber) => {\n\n        fetch(\"/api/orders/\" + orderNumber )\n            .then((res) => {\n                \n                if(res.ok)\n                {\n                    return res.json();\n                }\n                \n                res.json().then((err) => this.setState({ message: {error: true,  text: err.message} }));\n\n            })\n            .then((order) => {\n\n                if(!order){return}\n\n                this.setState({order: order});\n            })\n            .catch((err) => this.setState({message: {error: true, text: err.message}}));\n\n    }\n\n    \n    fetchRMA = (RMANumber) => {\n\n        fetch(\"/api/rmas/\" + RMANumber)\n            .then((res) => {\n\n                if(res.ok)\n                {\n                    return res.json();\n                }\n\n                res.json().then((err) => this.setState({message: {error: true, text: err.message} }));\n            })\n            .then((rma) => {\n                if(!rma){return;}\n\n                this.setState({rma: rma});\n            })\n            .catch((err) => this.setState({message: {error: true, text: err.message} }));\n\n    }\n\n    getAvailableItems(rma, order, packingSlips)\n    {\n        //get all available items from orders, rmas, and remove all items from the packing slips\n        const avaiableItems = [];\n\n        if(order){\n            order.items.map((item) => { //get order items\n                avaiableItems.push({\n                    productId: item.productId,\n                    quantity: item.quantity,\n                });\n            });\n        }\n\n        if(rma && rma.items){ //get rma items\n            rma.items.map((item) => {\n                for(let i = 0; i < avaiableItems.length; i++)\n                {\n                    if(avaiableItems[i].productId === item.productId)\n                    {\n                        avaiableItems[i].quantity += 1;\n                        return;\n                    }\n                }\n\n                avaiableItems.push({\n                    productId: item.productId,\n                    quantity: 1,\n                });\n\n            });\n        }\n\n        if(packingSlips){\n            packingSlips.map((packingSlip) => {\n\n                if(packingSlip.items){ //check items in packing slip\n                    packingSlip.items.map((item) => {\n                        for(let i = 0; i < avaiableItems.length; i++)\n                        {\n                            if(avaiableItems[i].productId === item.productId && avaiableItems[i].quantity - item.quantity >= 0)\n                            {  \n                                avaiableItems[i].quantity -= item.quantity;\n                                return;\n                            }\n                        }\n                    });\n                }\n\n                if(packingSlip.returnedItems){ //check return items in packing slip(for rmas etc)\n                    packingSlip.returnedItems.map((item) => {\n                        for(let i = 0; i < avaiableItems.length; i++)\n                        {\n                            if(avaiableItems[i].productId === item.productId && avaiableItems[i].quantity - item.quantity >= 0)\n                            {  \n                                avaiableItems[i].quantity -= item.quantity;\n                                return;\n                            }\n                        }\n                    });\n                }\n            })\n        }\n\n        return avaiableItems;\n\n    }\n\n    addItem = (item) => {\n\n        //add to packingslip items\n        this.setState((prevState) => {\n\n            const tab = prevState.tab;\n            const slips = prevState.packingSlips;\n            const items = prevState.packingSlips[tab].items;\n\n            for(let i = 0; i < items.length; i++)\n            {\n                if(items[i].productId === item.productId) //if already exists add to quantity\n                {\n                    items[i].quantity += item.quantity;\n                    slips[tab].items = items;\n\n                    return {\n                        packingSlips : slips,\n                    };\n                }\n            }\n\n            slips[tab].items.push(item);\n\n            return {packingSlips: slips};\n        });\n    }\n\n\n    addReturnedItem = (item) => {\n\n        //add to returned items\n\n        this.setState((prevState) => {\n\n            const tab = prevState.tab;\n            const slips = prevState.packingSlips;\n            const items = prevState.packingSlips[tab].returnedItems;\n\n            for(let i = 0; i < items.length; i++)\n            {\n                if(items[i].productId === item.productId)\n                {\n                    items[i].quantity += item.quantity;\n                    slips[tab].returnedItems = items;\n\n                    return {\n                        packingSlips : slips,\n                    };\n                }\n            }\n\n            slips[tab].returnedItems.push(item);\n\n            return {packingSlips: slips};\n        });\n    }\n    \n\n\n    addPackingSlip = () => {\n        //add new packing slip to list\n        this.setState((prevState) => {\n\n            const packingSlips = prevState.packingSlips;\n            const tab = prevState.tab;\n\n            const length = prevState.packingSlips.length;\n\n            packingSlips.push({\n                packingSlipNumber:  null,\n                boxNumber:          packingSlips[length - 1].boxNumber + 1, //add new packing slip\n                trackingNumber:     null,\n                orderNumber:        (prevState.order) ? prevState.order.orderNumber : null,\n                RMANumber:          (prevState.rma) ? prevState.rma.RMANumber : null,\n                customerPO:         null,\n                shipmentService:    null,\n                items: [],\n                returnedItems: [], \n            });\n\n            return {packingSlips: packingSlips, tab: length};\n        })\n    }\n\n    updateTab = (event, newValue) => {\n        this.setState({tab: newValue})\n    }\n    \n    updateSlips = () => {\n\n        const packingSlips = this.state.packingSlips;\n\n        for(let i = 0; i < packingSlips.length; i++){ //loop through all slips and update them seperately\n\n            if(packingSlips[i].packingSlipNumber === null) //if not created yet dont update\n            {\n                continue;\n            }\n\n            const updatedSlip = {\n                packingSlipNumber:  packingSlips[i].packingSlipNumber,\n                orderNumber:        packingSlips[i].orderNumber,\n                RMANumber:          packingSlips[i].RMANumber,\n                trackingNumber:     packingSlips[i].trackingNumber,\n                boxNumber:          packingSlips[i].boxNumber,\n                shipmentService:    packingSlips[i].shipmentService,\n                customerPO:         packingSlips[i].customerPO,\n                items:              packingSlips[i].items,\n                returnedItems:      packingSlips[i].returnedItems,\n            };\n\n            const headers = {\n                method: \"POST\",\n                headers: {\"Content-Type\" : \"application/json\"},\n                body: JSON.stringify(updatedSlip),\n            };\n\n\n            fetch(`/api/packingSlips/update/${packingSlips[i].packingSlipNumber}`, headers)\n                .then((res) => {\n                    if(res.ok)\n                    {\n                        \n                        this.setState({ message:    {\n                                                        error: false,   \n                                                        text: \"Packing slip details successfully updated\"\n                                                    },\n                                        change: false,\n                                    });\n                        return;\n                    }\n\n                    res.json().then((err) => this.setState({message: {error: true, text: err.message}}));\n                })\n                .catch((err) => this.setState({message: {error: true, text: err.toString()}}));\n        }\n    }\n\n    change_ItemQuantity = (e, i) => {\n            //change amount of iten in packing slip\n            this.setState((prevState) => {\n\n                const slips = prevState.packingSlips;\n\n                slips[prevState.tab].items[i].quantity = e.target.value;\n\n                return {packingSlips: slips}\n            });\n    }\n\n    change_ReturnedItemQuantity = (e, i) => {\n        //change amount of returned item in packing slip\n        this.setState((prevState) => {\n            const slips = prevState.packingSlips;\n\n            slips[prevState.tab].returnedItems[i].quantity = e.target.value;\n\n            return {packingSlips: slips}\n        });\n    }\n\n    change_trackingNumber = (event) => {\n        //change tracking number for a slip\n        this.setState((prevState) => {\n            const slips = prevState.packingSlips;\n\n            slips[prevState.tab].trackingNumber = event.target.value;\n\n            return  { packingSlips : slips};\n        })\n    }\n\n    change_shipmentService = (event, service) => {\n        //change shipment service for all slips\n        this.setState((prevState) => {\n            const slips = prevState.packingSlips;\n        \n            for(let i = 0; i < slips.length; i++)\n            {\n                slips[i].shipmentService = service;\n            }\n\n            return {packingSlips: slips};\n        });\n    }\n\n    change_customerPO = (event) => {\n        this.setState((prevState) => {\n            //change po for all slips\n            const slips = prevState.packingSlips;\n        \n            for(let i = 0; i < slips.length; i++)\n            {\n                slips[i].customerPO = event.target.value;\n            }\n\n            return {packingSlips: slips};\n        });\n    }\n\n    change_RMA = (event, rma) => {\n\n        this.setState((prevState) => {\n\n            const slips = prevState.packingSlips;\n            //change rma for all slips\n        \n            for(let i = 0; i < slips.length; i++)\n            {\n                slips[i].RMANumber = (rma) ? rma.RMANumber: null;\n            }\n            return {packingSlips: slips};\n        });\n\n        if(rma){ //if not rma go get it\n            this.fetchRMA(rma.RMANumber);\n        }\n        else{\n            this.setState({rma: null});\n        }\n    }\n\n    change_Order = (event, order) => {\n        //change order for all slips\n\n        this.setState((prevState) => {\n\n            const slips = prevState.packingSlips;\n        \n            for(let i = 0; i < slips.length; i++)\n            {\n                slips[i].orderNumber = (order) ? order.orderNumber: null;\n            }\n            return {packingSlips: slips};\n        });\n\n        if(order){ //if theres not an order then go get it\n            this.fetchOrder(order.orderNumber);\n        }\n        else{\n            this.setState({order: null});\n        }\n    }\n\n\n    removeItem = (item, index) => {\n        this.setState((prevState) => {\n\n            const slips = prevState.packingSlips;\n\n            slips[prevState.tab].items.splice(index, 1);\n\n            return {packingSlips: slips};\n        })\n    }\n\n    removeReturnedItem = (item, index) => {\n\n        this.setState((prevState) => {\n\n            const slips = prevState.packingSlips;\n\n            slips[prevState.tab].returnedItems.splice(index, 1);\n\n            return {packingSlips: slips};\n        })\n    }\n\n    newShipment = () => {\n        this.setState({shipment: null, newShipment: true});\n    }\n\n    getOptionLabel = (option) => {\n        return \"\" + option.text + \" - \" + option.customer.customerName;\n    }\n\n    needPackingSlips (packingSlips){\n\n        const slips = packingSlips.filter((slip) => slip.packingSlipNumber === null);\n\n        return (slips.length !== 0) ? true: false;\n    }\n\n    removePackingSlip = () => {\n        if(this.state.packingSlips.length > 1)\n        {\n            this.setState((prevState) => {\n                const slips = prevState.packingSlips;\n                const tab = prevState.tab;\n                slips.splice(tab, 1);\n                \n                return {\n                    packingSlips: slips,\n                    tab: (tab > 0) ? tab - 1 : 0,\n                }\n            });\n        }\n    }\n\n\n    render()\n    {\n        const {products, customers ,serials, orders, rmas} = this.props;\n        const { \n                newShipment,\n                packingSlips,\n                options, \n                order, \n                rma , \n                tab,\n                message,\n                downloadSlips,\n\n            } = this.state;\n\n        return(\n            <Display>\n                {\n                    options &&\n                    <SearchBar  label=\"Shipping\"\n                                options={options}\n                                getOptionLabel={this.getOptionLabel}\n                                onChange={this.fetchPackingSlips}\n                                noNew\n                    />\n                }\n                <DisplayItem>\n                <Typography variant=\"h5\">Packing Slips</Typography>\n                {\n                    packingSlips && \n                    <Box display=\"flex\" width={1} style={{gap: 15}}>\n                        <ItemTabs onChange={this.updateTab} value={tab} tabLabels={packingSlips.map((slip) => (slip.packingSlipNumber) ? slip.packingSlipNumber : \"Box \" + slip.boxNumber)}/>\n                        <NewButton title=\"New Packing Slip\" onClick={this.addPackingSlip}/>\n                    </Box>\n                }\n                {\n                    message && <Message error={message.error} text={message.text} clear={() => this.setState({message: null})} />\n                }\n                <Box>\n                {   packingSlips && packingSlips[tab].packingSlipNumber !== null &&\n                    <Box width={1} display=\"flex\" style={{gap: 15}}>\n                        <DownloadPackingSlipButton \n                            onClick={this.downloadPackingSlips}\n                        />\n                        <UpdatePackingSlipsButton\n                            onClick={this.updateSlips}\n                        /> \n                    </Box>\n                }\n                {\n                   packingSlips && packingSlips[tab].packingSlipNumber === null &&\n                 \n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={this.removePackingSlip}\n                        >\n                            Remove Slip\n                       </Button>\n                   \n                }\n                </Box>\n                {   \n                    (order || rma) && packingSlips && \n                    <HeadDisplay \n                        edit={!newShipment}\n                        updateHead={this.updateSlipDetails}\n                        change={false}\n                    >\n                        <IdentifierField \n                            value={(packingSlips[tab].packingSlipNumber) ? packingSlips[tab].packingSlipNumber : \"TBD when submitted\"}\n                            label=\"Packing Slip Number\"\n                        />\n                        <OrderField \n                            value={(order)}\n                            orders={orders}\n                            onChange={this.change_Order}    \n                        />\n                        <RMAField\n                            value={(rma)}\n                            rmas={rmas}\n                            onChange={this.change_RMA}\n                        />\n                        <ToField\n                            value={(order) ? order.to : rma.to}\n                            noEdit={true}\n                        />\n                        <ShippingField\n                            value={(order) ? order.shipTo: rma.shipTo}\n                            noEdit={true}\n                        />\n                        <TrackingNumberField\n                            onChange={this.change_trackingNumber}\n                            value={packingSlips[tab].trackingNumber}\n                        />\n                        <BoxNumberField \n                            value={packingSlips[tab].boxNumber}\n                        />\n                        <POField\n                            value={packingSlips[tab].customerPO}\n                            onChange={this.change_customerPO}\n                        />\n                        <ShippingServiceField \n                            options={ShippingServiceList}\n                            onChange={this.change_shipmentService}\n                            value={packingSlips[tab].shipmentService}\n                        />\n                    </HeadDisplay>\n                }\n                </DisplayItem>\n                {\n                    (order || rma) && packingSlips && \n                    <DndProvider backend={HTML5Backend}>\n                            <Box my={3}>\n                                <Typography variant=\"h5\"> Available Items</Typography>\n                                <ShippingItems \n                                    products={products}\n                                    availableItems={this.getAvailableItems(rma, order, packingSlips)}\n                                />\n                            </Box>\n                            <DisplayItem>\n                            <Typography variant=\"h5\">Packing Slip Items</Typography>\n                            <ItemDropTable addItem={this.addItem}>\n                                    <GenTable>\n                                        <GenTableHead>\n                                            <b>Product Id</b>\n                                            <b>Product Name</b>\n                                            <b>Quantity</b>\n                                            <b></b>\n                                        </GenTableHead>\n                                        <GenTableBody>\n                                            {\n                                                packingSlips[tab].items.map((item, i) => {\n                                                    if(item.productId){\n                                                        const productName = products.find(product => product.productId === item.productId).productName;\n                                                        return (<GenTableRow>\n                                                                    <div>{item.productId}</div>\n                                                                    <div>{productName}</div>\n                                                                    <QuantityChange\n                                                                       value={item.quantity}\n                                                                       onChange={(e) => this.change_ItemQuantity(e, i)}\n                                                                    />\n                                                                    <div>\n                                                                        <IconButton onClick={() => this.removeItem(item, i)}>\n                                                                            <DeleteIcon color=\"secondary\"/>\n                                                                        </IconButton>\n                                                                    </div>\n                                                                </GenTableRow>\n                                                        );\n                                                    }\n                                                })\n                                            }\n                                        </GenTableBody>\n                                    </GenTable>\n                                </ItemDropTable>\n                                </DisplayItem>\n                                <DisplayItem>\n                                <Typography variant=\"h5\">Customers Items Being Returned</Typography>\n                                <ItemDropTable addItem={this.addReturnedItem}> \n                                <GenTable>\n                                        <GenTableHead>\n                                            <b>Product Id</b>\n                                            <b>Product Name</b>\n                                            <b>Quantity</b>\n                                            <b></b>\n                                        </GenTableHead>\n                                        <GenTableBody>\n                                            {\n                                                packingSlips[tab].returnedItems.map((item, i) => {\n                                                    if(item.productId){\n                                                        const productName = products.find(product => product.productId === item.productId).productName;\n                                                        return (<GenTableRow>\n                                                                    <div>{item.productId}</div>\n                                                                    <div>{productName}</div>\n                                                                    <QuantityChange\n                                                                       value={item.quantity}\n                                                                       onChange={(e) => this.change_ReturnedItemQuantity(e, i)}\n                                                                    />\n                                                                    <div>\n                                                                        <IconButton onClick={() => this.removeReturnedItem(item, i)}>\n                                                                            <DeleteIcon color=\"secondary\"/>\n                                                                        </IconButton>\n                                                                    </div>\n                                                                </GenTableRow>\n                                                        );\n                                                    }\n                                                })\n                                            }\n                                        </GenTableBody>\n                                    </GenTable>\n                                </ItemDropTable>\n                                </DisplayItem>\n                    </DndProvider>\n                }\n                { packingSlips &&  this.needPackingSlips(packingSlips) &&  \n                        <SubmitButton\n                            onClick={this.createPackingSlips}\n                        >\n                            Submit Packing Slips\n                        </SubmitButton>\n                }\n                {\n                    downloadSlips && packingSlips &&\n\n                    <ShippingPrintSheet \n                        packingSlips={packingSlips}\n                        slipIndex={this.state.downloadSlipIndex}\n                        shipTo={(order) ? order.shipTo : rma.shipTo}\n                        orderDate={(order) ? new Date(order.orderDate) : new Date(rma.RMADate)}\n                        to={(order) ? order.to : rma.to}\n                        products={products}\n                        order={order}\n                        rma={rma}\n                    />\n                }\n            </Display>       \n        );\n    }\n}\n\n"],"sourceRoot":""}