{"version":3,"sources":["Common/Buttons.js","Common/Fields.js","Common/TemplateTable.js","Common/Search.js","Common/HeadDisplay.js","Common/ItemTabs.js","Serials/SerialDymoXML.js","Orders/OrderItemSerial.js","Orders/OrderTestRow.js","Orders/NewOrder.js","Orders/NewItem.js","Orders/OrdersDisplay.js"],"names":["DownloadPackingSlipButton","props","style","padding","color","variant","onClick","UpdatePackingSlipsButton","SubmitButton","marginBottom","width","children","NewButton","title","placement","size","fontSize","EditButton","className","RmaTestBox","component","row","control","checked","passed","onChange","i","label","SaveChangesButton","FileUploadButton","marginLeft","type","display","name","id","value","file","uploadFile","accept","htmlFor","useStyles","makeStyles","textFieldRoot","identifierRoot","height","multilineRoot","fullWidth","flexGrow","noteWidth","labelIdRoot","labelRoot","labelFocused","getInputProps","params","classes","InputProps","root","edit","disableUnderline","CustomerField","options","customers","getOptionLabel","option","customerName","disabled","freeSolo","renderInput","InputLabelProps","shrink","ProductField","products","productName","DateField","now","Date","defaultValue","toISOString","substring","ShippingField","multiline","rows","rowsMax","ToField","IdentifierField","InProps","allowEdit","readOnly","error","helperText","focused","MeshField","BluetoothField","VersionField","NoteField","GeneralField","QuantityField","inputProps","min","SerialField","serials","String","serialNumber","OrderField","orders","orderNumber","RMAField","rmas","RMANumber","TrackingNumberField","POField","ShippingServiceField","BoxNumberField","container","overflowX","flexDirection","alignSelf","overflowY","repairTable","tableHead","backgroundColor","repairHead","expandedElement","alignItems","maxHeight","gap","margin","borderBottom","CollapseRow","React","useState","open","setOpen","Fragment","items","map","item","align","aria-label","colSpan","length","in","timeout","unmountOnExit","subItems","Row","RepairTable","Paper","GenTable","elevation","stickyHeader","GenTableHead","Children","GenTableBody","GenTableRow","TemplateTable","search","paddingBottom","searchBarContainer","justifyContent","marginTop","SearchInput","ListboxProps","SearchBar","noNew","newOrderFunction","rootConatiner","borderRadius","editButton","content","flexFlow","position","maxWidth","paddingTop","Head","changeEdit","state","setState","saveChanges","event","updateHead","this","child","noEdit","cloneElement","change","Component","HeadDisplay","ItemTabs","square","indicatorColor","textColor","scrollButtons","tabLabels","serialXML","serialMeshXML","mesh","serialBluetoothMeshXML","bluetooth","getDymoPrinter","dymo","printers","framework","getPrinters","printer","printerType","getDymoLabel","labelName","openLabelXml","left","marginRight","right","OrderItemSerial","clicked","undefined","test","pass","fail","testClick","settestClick","setPassed","failed","setFailed","err","setErr","testClicked","a","testresult","serialTest","action","note","headers","method","body","JSON","stringify","fetch","serial","then","res","ok","onTest","json","message","catch","Typography","FormControl","FormGroup","FormControlLabel","Checkbox","Button","OrderTestRow","updateCounter","counter","serialTests","addToCounter","prevProps","columns","quantity","ParseOrderFile","newOrders","bstr","target","result","wb","XLSX","read","cellDates","wsname","SheetNames","ws","Sheets","data","utils","sheet_to_json","header","head","shift","order","entry","obj","col","Object","keys","Number","push","shipTo","To","orderDate","customer","stringSimilarity","_id","compareCustomerNames","to","product","find","startsWith","productId","productPackage","isDuplicate","parseInt","itemContainer","flexBasis","Item","setQuantity","setProduct","updateParent","addItem","buttonClicked","key","Autocomplete","TextField","IconButton","NewItem","Orders","updateDetails","customerId","text","msg","getOrder","newOrder","createRows","location","pathname","toString","printSerial","window","printerName","setObjectText","print","resp","createOrder","updateOrders","fetchRecent","recentOrders","valueChange","uploadClick","preventDefault","document","getElementById","click","files","reader","FileReader","onload","uploadedOrders","tab","readAsBinaryString","change_orderNumber","num","isInteger","change_orderDate","change_orderCustomer","change_orderTo","change_shipTo","prevState","updateTab","newValue","nextOrder","createSerials","j","updateSerials","Display","Search","Message","clear","Recent","c","date","textTransform","e","getMonth","getDay","getFullYear","needSerials"],"mappings":"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","file":"static/js/7.92cd6b3a.chunk.js","sourcesContent":["import AddIcon from '@material-ui/icons/Add';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport {Button} from \"@material-ui/core\";\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\nimport {useState} from 'react';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\n\n\nexport const DownloadPackingSlipButton = (props) => {\n    return(\n        <Button style={{padding:7}}\n                color=\"primary\" \n                variant=\"contained\"\n                onClick={props.onClick}\n        >\n            Download Packing Slips\n        </Button>\n    );\n}\n\n\nexport const UpdatePackingSlipsButton = (props) => {\n    return(\n        <Button\n            style={{padding:7}}\n            color=\"primary\" \n            variant=\"contained\"\n            onClick={props.onClick}\n        > \n            Update Packing Slips\n        </Button>\n    );\n}\n\n\nexport const SubmitButton = (props) => {\n    return (\n        <Button\n            style={{ marginBottom: 30, width: '100%', padding: \"15px 0px 15px 0px\"}} \n            color=\"primary\" \n            variant=\"contained\"\n            onClick={props.onClick}\n        >\n            {props.children}\n        </Button>\n    );\n}\n\n\nexport const NewButton = (props) => {\n\n    return(\n        <Tooltip title={props.title} placement=\"top\">\n            <IconButton onClick={props.onClick} size=\"small\">\n                <AddIcon color=\"primary\" fontSize=\"large\"/>\n            </IconButton>\n        </Tooltip>\n    );\n};\n\nexport const EditButton = (props) => {\n    return(\n        <Tooltip title=\"Edit\" placement=\"top\">\n            <IconButton onClick={props.onClick} className={props.className}> \n                <EditIcon color={props.color}/>\n            </IconButton>\n        </Tooltip>\n    );\n}\n\nexport const OrderTestButton = (props) =>{\n\n    return(\n        <Tooltip title=\"Serials\" placement=\"top\">\n            <IconButton \n                    onClick={props.onClick}>\n            {\n                props.open && <KeyboardArrowUpIcon />\n            }\n            {\n                !props.open && <KeyboardArrowDownIcon />\n            }\n            </IconButton>\n        </Tooltip>\n    \n    );\n  \n};\n\n\nexport const RmaTestBox = (props) => {\n\n    const checkFailed = () => {\n        props.onChange(props.i, false);\n    };\n    const checkPassed = () => {\n        props.onChange(props.i, true);\n    }\n    \n    return(\n        <FormControl component=\"fieldset\">\n                        <FormGroup row>\n                            <FormControlLabel\n                                control={<Checkbox checked={(props.passed !== null && props.passed !== false) ? props.passed : null} style={{color: \"green\"}} onChange={checkPassed} />}\n                                label=\"Passed\"\n                            />\n                            <FormControlLabel\n                                control={<Checkbox checked={(props.passed === false) ? true : null } style={{color: \"red\"}} onChange={checkFailed} />}\n                                label=\"Failed\"\n                            />\n                        </FormGroup>\n        </FormControl>\n    );\n}\n\nexport const SaveChangesButton = (props) => {\n\n    return(\n        <Button onClick={props.onClick} color=\"primary\">\n                Save Changes\n        </Button>\n    );\n}\n\nexport const FileUploadButton = (props) => {\n    return(\n        <div style={{marginLeft: \"auto\"}}>\n            <input  type=\"file\" \n                    style={{display: \"none\"}} \n                    name=\"upload-file\"\n                    id=\"upload-file\"\n                    value={props.file}\n                    onChange={props.uploadFile}\n                    accept=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n                />\n                <label htmlFor=\"upload-file\" >\n                    <Button variant=\"contained\" color=\"primary\" onClick={props.onChange}>\n                        Upload File\n                    </Button>\n                </label>\n        </div>\n    );\n}\n\n\nexport const ShippingOrderByInput = (props) => {\n    return( \n        <ToggleButtonGroup exclusive value={props.value}>\n            \n        </ToggleButtonGroup>\n    );\n}\n\n","import TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport {makeStyles, requirePropFactory, useTheme} from \"@material-ui/core\";\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from\"@material-ui/core/Select\";\nimport React from \"react\";\n\nconst useStyles = makeStyles(() => ({\n    textFieldRoot: {\n        fontSize:  18,\n        \"& .Mui-disabled\": {\n            color: \"black\",\n        },\n        width: 275,\n    },\n    identifierRoot:{\n        fontSize:  20,\n        \"& .Mui-disabled\": {\n            color: \"black\",\n        },\n        height: \"auto\",\n        width:\"100%\",\n    },\n\n    multilineRoot:{\n        fontSize: 18,\n        \"& .Mui-disabled\": {\n            color: \"black\",\n        },\n        width: 275,\n    },\n    fullWidth : {\n        flexGrow: 0,\n    },\n    noteWidth : {\n        width: 275,\n        height: \"100%\",\n    },\n    labelIdRoot: {\n        fontSize: 20,\n        \n    },\n    labelRoot:{\n        fontSize: 20\n    },\n    labelFocused: {}\n\n\n}));\n\n\nconst getInputProps = (params, classes, props) => {\n\n    let InputProps;\n    if(params){\n        InputProps = {\n            ...params.InputProps,\n            classes: {root: classes.textFieldRoot},\n        }\n    }\n    else{\n        InputProps = {classes: {root: classes.textFieldRoot}};\n    }\n\n    if(!props.edit){\n        InputProps.disableUnderline = true;\n    }\n\n    return InputProps;\n\n}\n\n\nexport const CustomerField = (props) => {\n    \n    const classes = useStyles();\n\n    return(\n        <Autocomplete id=\"customer\"\n                options={props.customers}\n                getOptionLabel={(option) => option.customerName}\n                disabled={!props.edit}\n                onChange={props.onChange}\n                value={props.value}\n                freeSolo\n                className={classes.fullWidth}\n                renderInput={(params) => <TextField   {...params}\n                                                        label=\"Customer\"\n                                                        variant={(props.edit) ? \"outlined\" : \"standard\" }\n                                                        InputProps={getInputProps(params, classes, props)}\n                                                        InputLabelProps={{\n                                                             ...params.InputLabelProps,\n                                                            classes: {root: classes.labelRoot},\n                                                            shrink: true \n                                                        }}\n                                        \n                                                        />}\n                            />\n    );\n}\n\nexport const ProductField = (props) => {\n    const classes = useStyles();\n    \n    return(\n        <Autocomplete id=\"product\"\n                options={props.products}\n                getOptionLabel={(option) => option.productName}\n                disabled={!props.edit}\n                onChange={props.onChange}\n                value={props.value}\n                freeSolo\n                className={classes.fullWidth}\n                renderInput={(params) => <TextField   {...params}\n                                                        label=\"Product\"\n                                                        variant={(props.edit) ? \"outlined\" : \"standard\" }\n                                                        InputProps={getInputProps(params, classes, props)}\n                                                        InputLabelProps={{\n                                                            ...params.InputLabelProps,\n                                                           classes: {root: classes.labelRoot},\n                                                           shrink: true\n                                                        }}\n                                                        />}\n                            />\n    );\n};\n\nexport const DateField = (props) => {\n    const classes = useStyles();\n    const label = (!props.label) ? \"Expr Date\" : props.label;\n    const now = new Date();\n\n    return(\n        <TextField\n                        id=\"date\"\n                        label={label}    \n                        type=\"date\"\n                        defaultValue=\"yyyy-MM-dd\"\n                        variant={(props.edit) ? \"outlined\" : \"standard\" }\n                        value={(props.value) ? props.value.toISOString().substring(0, 10) : now.toISOString().substring(0,10)}\n                        disabled={!props.edit}\n                        className={classes.fullWidth}\n                        InputProps={getInputProps(null, classes, props)}\n                        InputLabelProps={{classes: {root: classes.labelRoot}, shrink: true}} \n                        onChange={props.onChange}\n            />\n    );\n}\n\nexport const ShippingField = (props) => {\n    const classes = useStyles();\n    return(\n        <TextField\n            id=\"customer-ship-to\"\n            label=\"Ship To\"\n            multiline\n            rows={4}\n            className={classes.fullWidth}\n            rowsMax={10}\n            value={(props.value) ? (props.value) : \"\"}\n            variant={(props.edit) ? \"outlined\" : \"standard\" }\n            InputProps={getInputProps(null, classes, props)}\n            InputLabelProps={{classes: {root: classes.labelRoot}, shrink: true}} \n            disabled={!props.edit}\n            onChange={props.onChange}\n        /> \n    );\n}\n\nexport const ToField = (props) => {\n    const classes = useStyles();\n\n    return(\n        <TextField\n            id=\"customer-to\"\n            label=\"To\"\n            value={(props.value) ? (props.value) : \"\"}\n            multiline\n            className={classes.fullWidth}\n            rows={4}\n            rowsMax={10}\n            variant={(props.edit) ? \"outlined\" : \"standard\" }\n            InputProps={getInputProps(null, classes, props)}\n            InputLabelProps={{classes: {root: classes.labelRoot}, shrink: true}} \n            disabled={!props.edit}\n            onChange={props.onChange}\n        />\n    );\n}\n\n\nexport const IdentifierField = (props) => {\n    const classes = useStyles();\n    let InProps = {\n        classes:{root: classes.identifierRoot}\n    }\n    if(!props.allowEdit)\n    {\n        InProps.readOnly = true;\n    }\n\n    return(\n        <TextField\n                error={!props.value}\n                variant={(props.edit) ? \"outlined\" : \"standard\" }\n                helperText={(!props.value) ? props.label + \" Required\" : \"\"}\n                label={props.label}\n                value={(props.value) ? props.value : \"\"}\n                InputProps={InProps}\n                fullWidth\n                onChange={props.onChange}\n                InputLabelProps={{\n                    classes: {\n                        root: classes.labelIdRoot,\n                        focused: classes.labelFocused\n                    },\n                    shrink: true\n                }}\n                    />\n\n    );\n}\n\n\nexport const MeshField  = (props) => {\n    const classes = useStyles();\n    return(\n        <TextField\n                label=\"Mesh\"\n                value={(props.value) ? (props.value) : \" \"}\n                variant={(props.edit) ? \"outlined\" : \"standard\" }\n                InputProps={getInputProps(null, classes, props)}\n                InputLabelProps={{classes: {root: classes.labelRoot}, shrink: true}} \n                className={classes.fullWidth}\n                disabled={!props.edit}\n                onChange={props.onChange}\n                />\n    );\n}\n\n\nexport const BluetoothField = (props) => {\n    const classes = useStyles();\n    return(\n        <TextField  label=\"BlueTooth\"\n                    variant={(props.edit) ? \"outlined\" : \"standard\" }\n                    value={(props.value) ? props.value : \"\"}\n                    InputProps={getInputProps(null, classes, props)}\n                    InputLabelProps={{classes: {root: classes.labelRoot}, shrink: true}} \n                    className={classes.fullWidth}\n                    disabled={!props.edit}\n                    onChange={props.onChange}\n            />\n    );\n}\n\n\nexport const VersionField = (props) => {\n    const classes = useStyles();\n    return(\n        <TextField      label=\"Version\"\n                        variant={(props.edit) ? \"outlined\" : \"standard\" }\n                        value={(props.value) ? props.value : \"\"}\n                        InputProps={getInputProps(null, classes, props)}\n                        InputLabelProps={{classes: {root: classes.labelRoot},shrink: true}} \n                        className={classes.fullWidth}\n                        disabled={!props.edit}\n                        onChange={props.onChange}\n                />\n    );\n}\nexport const NoteField = (props) => {\n    const classes = useStyles();\n    return(\n        <TextField  label=\"Notes\"\n                    value={(props.value) ? props.value : \"\"}\n                    variant={(props.edit) ? \"outlined\" : \"standard\" }\n                    onChange={props.onChange}\n                    multiline\n                    rows={(props.rows) ? props.rows : 4}\n                    rowsMax={(props.rowsMax) ? props.rowsMax : 10}\n                    InputProps={getInputProps(null, classes, props)}\n                    InputLabelProps={{classes: {root: classes.labelRoot}, shrink: true}}\n        />\n    );\n}\n\nexport const GeneralField = (props) => {\n    const classes = useStyles();\n    return(\n            <TextField  label={props.label}\n                        InputProps={getInputProps(null, classes, props)}\n                        InputLabelProps={{classes: {root: classes.labelRoot},shrink: true}} \n                        value={props.value}\n                        variant={(props.edit) ? \"outlined\" : \"standard\" }\n                        onChange={props.onChange}\n            />\n    );\n}\n\nexport const QuantityField = (props) => {\n    const classes = useStyles();\n    return(\n        <TextField\n                            InputProps={{classes: {root: classes.textFieldRoot}, inputProps:{min:0},disableUnderline: !props.edit,}}\n                            InputLabelProps={{classes: {root: classes.labelRoot}, shrink: true}} \n                            value={props.value}\n                            onChange={props.onChange}\n                            id=\"Quantity\"\n                            label=\"Quantity\"\n                            type=\"number\"\n                            variant={(props.edit) ? \"outlined\" : \"standard\" }\n                        />\n    );\n}\n\n\nexport const SerialField = (props) => {\n    const classes = useStyles();\n    return(\n        <Autocomplete id=\"serial\"\n            options={props.serials}\n            getOptionLabel={(option) => String(option.serialNumber)}\n            onChange={props.onChange}\n            value={props.value}\n            freeSolo\n            renderInput={(params) => <TextField label=\"Serial Number\"\n                                                 variant={(props.edit) ? \"outlined\" : \"standard\" }\n                                                {...params}\n                                                InputProps={getInputProps(params, classes, props)}\n                                                InputLabelProps={{\n                                                    ...params.InputLabelProps,\n                                                   classes: {root: classes.labelRoot},\n                                                   shrink: true \n                                                }}\n                                                />}\n                    />\n    );\n}\n\nexport const OrderField = (props) => {\n    const classes = useStyles();\n    return(\n        <Autocomplete id=\"order\"\n            options={props.orders}\n            getOptionLabel={(option) => (option.orderNumber) ? String(option.orderNumber) : \"\"}\n            onChange={props.onChange}\n            value={(props.value) ? (props.value) : {orderNumber: null}}\n            disabled={!props.edit}\n            freeSolo\n            renderInput={(params) => <TextField label=\"Order Number\"\n                                                variant={(props.edit) ? \"outlined\" : \"standard\" }\n                                                {...params}\n                                                InputProps={getInputProps(params, classes, props)}\n                                                InputLabelProps={{\n                                                    ...params.InputLabelProps,\n                                                   classes: {root: classes.labelRoot}, \n                                                   shrink: true,\n                                                }}\n                                                />}\n                    />\n    );\n}\n\nexport const RMAField = (props) => {\n    const classes = useStyles();\n    return(\n        <Autocomplete id=\"rma\"\n            options={props.rmas}\n            getOptionLabel={(option) => (option.RMANumber) ? String(option.RMANumber) : \"\"}\n            onChange={props.onChange}\n            value={(props.value) ? (props.value) : {RMANumber: null}}\n            disabled={!props.edit}\n            freeSolo\n            renderInput={ (params) => <TextField label=\"RMA Number\"\n                                                variant={(props.edit) ? \"outlined\" : \"standard\" }\n                                                {...params}\n                                                InputProps={getInputProps(params, classes, props)} \n                                                InputLabelProps={{\n                                                    ...params.InputLabelProps,\n                                                   classes: {root: classes.labelRoot}, \n                                                   shrink: true\n                                                }}\n                                        />\n\n            }\n        />\n    );\n}\n\n\nexport const TrackingNumberField = (props) => {\n    const classes = useStyles();\n    return(\n            <TextField  label=\"Tracking Number\"\n                        InputProps={getInputProps(null, classes, props)}\n                        InputLabelProps={{classes: {root: classes.labelRoot}, shrink: true}} \n                        value={(props.value) ? props.value: \"\"}\n                        variant={(props.edit) ? \"outlined\" : \"standard\" }\n                        onChange={props.onChange}\n                        disabled={!props.edit}\n            />\n    );\n}\n\nexport const POField = (props) => {\n    const classes = useStyles();\n    return(\n            <TextField  label=\"PO Number\"\n                        InputProps={getInputProps(null, classes, props)}\n                        InputLabelProps={{classes: {root: classes.labelRoot}, shrink: true}} \n                        value={(props.value) ? props.value : \" \"}\n                        variant={(props.edit) ? \"outlined\" : \"standard\" }\n                        onChange={props.onChange}\n                        disabled={!props.edit}\n            />\n    );\n}\n\nexport const ShippingServiceField = (props) => {\n    const classes = useStyles();\n    return(\n        <Autocomplete id=\"shipping\"\n        options={props.options}\n        getOptionLabel={(option) => option}\n        onChange={props.onChange}\n        value={(props.value) ? (props.value) : \"\"}\n        disabled={!props.edit}\n        freeSolo\n        renderInput={ (params) => <TextField label=\"Shipping Service\"\n                                            variant={(props.edit) ? \"outlined\" : \"standard\" }\n                                            {...params}\n                                            InputProps={getInputProps(params, classes, props)} \n                                            InputLabelProps={{\n                                                ...params.InputLabelProps,\n                                               classes: {root: classes.labelRoot}, \n                                               shrink: true\n                                            }}\n                                    />\n\n        }\n        />\n    );\n}\n\n\n\nexport const BoxNumberField = (props) => {\n    const classes = useStyles();\n\n    return(\n\n         <TextField label=\"Box Number\"\n                    InputProps={getInputProps(null, classes, props)}\n                    InputLabelProps={{classes: {root: classes.labelRoot}, shrink: true}} \n                    value={props.value}\n                    variant={\"standard\" }\n                    disabled={true}\n        />\n    );\n}\n\n\nexport const MultipleSerials = (props) => {\n\n    return (\n        <>\n            <InputLabel id=\"demo-mutiple-name-label\">{props.label}</InputLabel>\n            <Select\n                labelId=\"mutiple-serial-label\"\n                id=\"mutiple-name-serial\"\n                multiple\n                input={<Input />}\n                value={[]}\n                >\n                {props.serials.map((serial) => (\n                    <MenuItem key={serial} value={serial}>\n                        {serial}\n                    </MenuItem>\n                ))}\n            </Select>\n        </>\n    );\n}","import Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { makeStyles, Tab} from \"@material-ui/core\";\nimport Collapse from '@material-ui/core/Collapse';\nimport Box from \"@material-ui/core/Box\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\nimport React from 'react';\n\nconst useStyles = makeStyles({\n  root: {\n    width: '100%',\n  },\n  container: {\n    overflowX: \"hidden\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    width: \"100%\",\n    alignSelf: \"center\",\n    height: \"auto\",\n    overflowY:\"hidden\",\n  },\n\n  repairTable: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    width: \"100%\",\n    alignSelf: \"left\",\n    height:\"100%\",\n    overflowY: \"hidden\",\n    marginBottom: 15\n  },\n  tableHead: {\n    backgroundColor: \"#36435c\",\n    color: \"white\"\n  },\n  repairHead: {\n    backgroundColor: \t\"#1769aa\",\n    color: \"white\",\n  },\n  \n  expandedElement : {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"flex-start\",\n    maxHeight: 600,\n    overflowY: \"scroll\",\n    gap: 5,\n    margin: \"5px 15px 20px 15px\",\n  },\n  row: {\n    '& > *': {\n      borderBottom: 'unset',\n    }, \n  }\n});\n\nexport const CollapseRow = (props) => {\n\n    const classes = useStyles();\n    const [open, setOpen] = React.useState(false);\n\n    return(\n      <React.Fragment>\n        <TableRow className={classes.row}>\n            {\n                props.items.map((item, i) => <TableCell key={i} align={(i === 0) ? \"left\" : \"center\"}>{item}</TableCell>)\n            }\n            <TableCell>\n                <IconButton aria-label=\"expand row\"  size=\"small\" onClick={() => setOpen(!open)}>\n                    { open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n                </IconButton>\n            </TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell colSpan={props.items.length + 1} align=\"center\" style={{padding: \"0px 0px 0px 0px\"}}>\n              <Collapse in={open} timeout=\"auto\" unmountOnExit>\n                <Box className={classes.expandedElement}>\n                  {\n                    props.subItems\n                  }\n                </Box>\n              </Collapse>\n          </TableCell>\n      </TableRow>\n    </React.Fragment>\n    \n    );\n}\n\n\n\nexport const Row = (props) => {\n    const classes = useStyles();\n    return(\n        <TableRow>\n            {\n                props.items.map((item, i) =><TableCell key={i} align={(i === 0) ? \"left\" : \"center\"}>{item}</TableCell>)\n            }\n        </TableRow>\n    );\n}\n\nexport const RepairTable = (props) => {\n  const classes = useStyles();\n  return(\n    <TableContainer className={classes.repairTable} component={Paper}>\n      <Table>\n        <TableBody>\n          {\n            props.rows\n          }\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n\nexport function GenTable(props){\n  const classes = useStyles();\n\n  return(\n    <TableContainer component={Paper} className={classes.container} elevation={2} >\n              <Table stickyHeader>\n                {props.children}\n              </Table>\n    </TableContainer>\n  );\n}\n\nexport function GenTableHead(props){\n  const classes = useStyles();\n  return(\n    <TableHead>\n      <TableRow>\n      {\n        React.Children.map( props.children, (item, i) => <TableCell key={i} align={(i === 0) ? \"left\" : \"center\"} className={classes.tableHead}>{item}</TableCell>)\n      }\n      </TableRow>\n  </TableHead>\n  );\n}\n\nexport function GenTableBody(props){\n  return(\n    <TableBody>\n      {props.children}\n    </TableBody>\n  );\n}\n\nexport function GenTableRow(props){\n\n  return(\n      <TableRow>\n      {\n          React.Children.map(props.children, (item, i) =><TableCell key={i} align={(i === 0) ? \"left\" : \"center\"}>{item}</TableCell>)\n      }\n      </TableRow>\n  );\n}\n\nconst TemplateTable = (props) => {\n    const classes = useStyles(); \n    return(\n          <TableContainer component={Paper} className={classes.container} elevation={2}>\n              <Table stickyHeader>\n                <TableHead>\n                  <TableRow>\n                  {\n                    props.tableHead.map( (item, i) => <TableCell key={i} align={(i === 0) ? \"left\" : \"center\"} className={classes.tableHead}><b>{item}</b></TableCell>)\n                  }\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {\n                    props.rows\n                  }\n                </TableBody>\n              </Table>\n          </TableContainer>\n    );\n}\n\n\nexport default TemplateTable;","import React from 'react';\nimport {makeStyles} from \"@material-ui/core\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport {NewButton} from \"./Buttons\";\nimport {Title} from \"../Text\";\n\n \nconst useStyles = makeStyles(() => ({\n    search : {\n        flexGrow : 1,\n        display: \"flex\",\n        flexDirection: \"row\",\n        width: \"100%\",\n        height: \"auto\",\n        borderBottom: \"1px solid #E0E0E0\",\n        paddingBottom: 20,\n        marginBottom: 15,\n      },\n      searchBarContainer: {\n        display:\"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        gap: 3,\n        marginTop: 15,\n      },\n      in:{\n        fontSize: 20,\n      }\n}));\n\n\nconst SearchInput = (props) => {\n\n    \n    return(\n        <Autocomplete\n          id=\"combo-box-demo\"\n          onChange={props.onChange}\n          options={props.options}\n          ListboxProps={{ style: { maxHeight: \"25rem\" }}}\n          style={{width: \"100%\", alignSelf:\"center\", }}\n          getOptionLabel={props.getOptionLabel}\n          renderInput={(params) => <TextField \n                                            {...params}  \n                                            variant=\"outlined\"\n                                            InputProps={{...params.InputProps, classes: {root: props.className}}}\n                                          \n                                    />}\n          />\n    );\n};\n\n\nexport  const SearchBar = (props) => {\n    const classes = useStyles();\n    return(\n        <div className={classes.search}>\n                  <Title variant=\"h5\">\n                    {props.label}\n                    <div className={classes.searchBarContainer}>\n                      <SearchInput className={classes.in} onChange={props.onChange} options={props.options} getOptionLabel={props.getOptionLabel}/>\n                      {!props.noNew && <NewButton title=\"New\" onClick={props.newOrderFunction} />}\n                    </div>\n                  </Title>\n                  \n        </div>\n    )\n}","import React from 'react';\nimport { makeStyles} from \"@material-ui/core\";\nimport {EditButton} from \"../Common/Buttons\";\nimport Paper from \"@material-ui/core/Paper\";\nimport {SaveChangesButton} from \"../Common/Buttons\";\n\n\nconst useStyles = makeStyles(() => ({\n\n    rootConatiner: {\n        display: \"flex\",\n        flexDirection:\"column\",\n        gap: 10,\n        padding : \"10px 30px 30px 30px\",\n        borderRadius: 1,\n        marginTop: 15,\n    },\n\n    edit: {\n        display: \"flex\",\n        flexDirection: \"row-reverse\",\n    },\n    editButton:{ \n        fontSize: 10,\n        display:\"flex\",\n        flexDirection: \"column\",\n    },\n    content: {\n        gap: 20,\n        display: \"flex\",\n        flexFlow: \"wrap\",\n        position: \"relative\",\n        alignItems: \"center\",\n        maxWidth: 800,\n\n    },\n    item : {\n        display: \"flex\",\n        alignSelf:\"stretch\",\n        paddingTop: 7,\n        paddingBottom: 7,\n    },\n    id:{\n        width: \"100%\",\n        paddingBottom: 17,\n    }\n\n}));\n\nclass Head extends React.Component{\n\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            edit: false,\n            color: \"inherit\",\n        };\n    }\n\n    changeEdit = () => {\n        const color = (!this.state.edit) ? \"primary\" : \"inherit\";\n        this.setState({\n                        edit: !this.state.edit, \n                        color: color,\n        });\n    }\n\n\n    saveChanges = (event) => {\n        this.changeEdit();\n        this.props.updateHead(event);\n    }\n\n    render(){\n\n        const {classes} = this.props;\n        const {edit, color} = this.state;\n        \n\n        return(\n            <Paper className={classes.rootConatiner} elevation={2}>\n                {this.props.edit && \n                    <div className={classes.edit}>\n                        <EditButton onClick={this.changeEdit} className={classes.editButton} color={color} /> \n                    </div>\n                }\n                {\n                    !this.props.edit\n                    &&\n                    <div style={{paddingTop: 20}}></div>\n                }\n                <div className={classes.id}>{this.props.children[0]}</div>\n                <div className={classes.content}>\n                    {React.Children.map(this.props.children, (child, i) => {\n                                    if(i > 0){\n                                        let item;\n\n                                        if(child.props.noEdit)\n                                        {\n                                            item = React.cloneElement(child, {edit: false});\n                                        }\n                                        else if(this.props.edit)\n                                        {\n                                            item = React.cloneElement(child, {edit: this.state.edit});\n                                        }\n                                        else{\n                                            item = React.cloneElement(child, {edit: true});\n                                        }\n                                        return <div className={classes.item} key={i}>{item}</div>;\n                                    }\n                    })}\n                    \n                    <div style={{marginLeft: \"auto\", marginTop: 20,}}>{this.props.edit && this.props.change && <SaveChangesButton onClick={this.saveChanges} />}</div>\n                </div>\n            </Paper>\n        );\n    }\n}\n\nexport default function HeadDisplay(props){\n    const classes = useStyles();\n    return <Head classes={classes} {...props} />\n\n}","import Paper from '@material-ui/core/Paper';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\n\n\n\nexport default function ItemTabs(props){\n    \n    return(\n        <Paper square style={{width: \"100%\"}}>\n            <Tabs\n                value={props.value}\n                indicatorColor=\"primary\"\n                textColor=\"primary\"\n                onChange={props.onChange}\n                variant=\"scrollable\"\n                scrollButtons=\"auto\"\n                aria-label=\"scrollable auto tabs example\"\n                \n            >\n                \n                {\n                    props.tabLabels.length && \n                    props.tabLabels.map(\n                        (item, i) => <Tab key={i} label={item} />\n                    )\n                }\n            </Tabs>\n        </Paper>\n    );\n}","export const serialXML = \n`<DieCutLabel Version=\"8.0\" Units=\"twips\">\n<PaperOrientation>Landscape</PaperOrientation>\n<Id>Small30346</Id>\n<IsOutlined>false</IsOutlined>\n<PaperName>30346 1/2 in x 1-7/8 in</PaperName>\n<DrawCommands>\n    <RoundRectangle X=\"0\" Y=\"0\" Width=\"720\" Height=\"2700\" Rx=\"180\" Ry=\"180\"/>\n</DrawCommands>\n<ObjectInfo>\n    <BarcodeObject>\n        <Name>BARCODE</Name>\n        <ForeColor Alpha=\"255\" Red=\"0\" Green=\"0\" Blue=\"0\"/>\n        <BackColor Alpha=\"0\" Red=\"255\" Green=\"255\" Blue=\"255\"/>\n        <LinkedObjectName/>\n        <Rotation>Rotation0</Rotation>\n        <IsMirrored>False</IsMirrored>\n        <IsVariable>True</IsVariable>\n        <Text></Text>\n        <Type>Code39</Type>\n        <Size>Medium</Size>\n        <TextPosition>Bottom</TextPosition>\n        <TextFont Family=\"Arial\" Size=\"8\" Bold=\"False\" Italic=\"False\" Underline=\"False\" Strikeout=\"False\"/>\n        <CheckSumFont Family=\"Arial\" Size=\"8\" Bold=\"False\" Italic=\"False\" Underline=\"False\" Strikeout=\"False\"/>\n        <TextEmbedding>None</TextEmbedding>\n        <ECLevel>0</ECLevel>\n        <HorizontalAlignment>Center</HorizontalAlignment>\n        <QuietZonesPadding Left=\"0\" Top=\"0\" Right=\"0\" Bottom=\"0\"/>\n    </BarcodeObject>\n    <Bounds X=\"326\" Y=\"57\" Width=\"2080\" Height=\"581\"/>\n</ObjectInfo>\n</DieCutLabel>\n`;\n\n\nexport const serialMeshXML = (mesh) =>{\n\n    return(\n`<DieCutLabel Version=\"8.0\" Units=\"twips\">\n\t<PaperOrientation>Landscape</PaperOrientation>\n\t<Id>Small30346</Id>\n\t<IsOutlined>false</IsOutlined>\n\t<PaperName>30346 1/2 in x 1-7/8 in</PaperName>\n\t<DrawCommands>\n\t\t<RoundRectangle X=\"0\" Y=\"0\" Width=\"720\" Height=\"2700\" Rx=\"180\" Ry=\"180\"/>\n\t</DrawCommands>\n\t<ObjectInfo>\n\t\t<TextObject>\n\t\t\t<Name>MESH_TEXT</Name>\n\t\t\t<ForeColor Alpha=\"255\" Red=\"0\" Green=\"0\" Blue=\"0\"/>\n\t\t\t<BackColor Alpha=\"0\" Red=\"255\" Green=\"255\" Blue=\"255\"/>\n\t\t\t<LinkedObjectName/>\n\t\t\t<Rotation>Rotation0</Rotation>\n\t\t\t<IsMirrored>False</IsMirrored>\n\t\t\t<IsVariable>True</IsVariable>\n\t\t\t<HorizontalAlignment>Right</HorizontalAlignment>\n\t\t\t<VerticalAlignment>Middle</VerticalAlignment>\n\t\t\t<TextFitMode>None</TextFitMode>\n\t\t\t<UseFullFontHeight>True</UseFullFontHeight>\n\t\t\t<Verticalized>False</Verticalized>\n\t\t\t<StyledText>\n\t\t\t\t<Element>\n\t\t\t\t\t<String xml:space=\"preserve\">Mesh:</String>\n\t\t\t\t\t<Attributes>\n\t\t\t\t\t\t<Font Family=\"Arial\" Size=\"8\" Bold=\"False\" Italic=\"False\" Underline=\"False\" Strikeout=\"False\"/>\n\t\t\t\t\t\t<ForeColor Alpha=\"255\" Red=\"0\" Green=\"0\" Blue=\"0\" HueScale=\"100\"/>\n\t\t\t\t\t</Attributes>\n\t\t\t\t</Element>\n\t\t\t</StyledText>\n\t\t</TextObject>\n\t\t<Bounds X=\"326\" Y=\"236.535401943511\" Width=\"460\" Height=\"251.464598056489\"/>\n\t</ObjectInfo>\n\t<ObjectInfo>\n\t\t<TextObject>\n\t\t\t<Name>MESH_FIELD</Name>\n\t\t\t<ForeColor Alpha=\"255\" Red=\"0\" Green=\"0\" Blue=\"0\"/>\n\t\t\t<BackColor Alpha=\"0\" Red=\"255\" Green=\"255\" Blue=\"255\"/>\n\t\t\t<LinkedObjectName/>\n\t\t\t<Rotation>Rotation0</Rotation>\n\t\t\t<IsMirrored>False</IsMirrored>\n\t\t\t<IsVariable>True</IsVariable>\n\t\t\t<HorizontalAlignment>Left</HorizontalAlignment>\n\t\t\t<VerticalAlignment>Middle</VerticalAlignment>\n\t\t\t<TextFitMode>None</TextFitMode>\n\t\t\t<UseFullFontHeight>True</UseFullFontHeight>\n\t\t\t<Verticalized>False</Verticalized>\n\t\t\t<StyledText>\n\t\t\t\t<Element>\n\t\t\t\t\t<String xml:space=\"preserve\">${mesh}</String>\n\t\t\t\t\t<Attributes>\n\t\t\t\t\t\t<Font Family=\"Arial\" Size=\"8\" Bold=\"False\" Italic=\"False\" Underline=\"False\" Strikeout=\"False\"/>\n\t\t\t\t\t\t<ForeColor Alpha=\"255\" Red=\"0\" Green=\"0\" Blue=\"0\" HueScale=\"100\"/>\n\t\t\t\t\t</Attributes>\n\t\t\t\t</Element>\n\t\t\t</StyledText>\n\t\t</TextObject>\n\t\t<Bounds X=\"896\" Y=\"236.535401943511\" Width=\"1720\" Height=\"251\"/>\n\t</ObjectInfo>\n</DieCutLabel>\n`);\n};\n\n\nexport const serialBluetoothMeshXML = (mesh, bluetooth) => {\n\treturn `\n\t\t\n<DieCutLabel>\n<PaperOrientation>Landscape</PaperOrientation>\n<Id>Small30346</Id>\n<IsOutlined>false</IsOutlined>\n<PaperName>30346 1/2 in x 1-7/8 in</PaperName>\n<DrawCommands>\n\t<RoundRectangle X=\"0\" Y=\"0\" Width=\"720\" Height=\"2700\" Rx=\"180\" Ry=\"180\"/>\n</DrawCommands>\n<ObjectInfo>\n\t<TextObject>\n\t\t<Name>TEXT</Name>\n\t\t<ForeColor Alpha=\"255\" Red=\"0\" Green=\"0\" Blue=\"0\"/>\n\t\t<BackColor Alpha=\"0\" Red=\"255\" Green=\"255\" Blue=\"255\"/>\n\t\t<LinkedObjectName/>\n\t\t<Rotation>Rotation0</Rotation>\n\t\t<IsMirrored>False</IsMirrored>\n\t\t<IsVariable>True</IsVariable>\n\t\t<HorizontalAlignment>Left</HorizontalAlignment>\n\t\t<VerticalAlignment>Middle</VerticalAlignment>\n\t\t<TextFitMode>None</TextFitMode>\n\t\t<UseFullFontHeight>True</UseFullFontHeight>\n\t\t<Verticalized>False</Verticalized>\n\t\t<StyledText>\n\t\t\t<Element>\n\t\t\t\t<String xml:space=\"preserve\">Mesh</String>\n\t\t\t\t<Attributes>\n\t\t\t\t\t<Font Family=\"Arial\" Size=\"8\" Bold=\"False\" Italic=\"False\" Underline=\"False\" Strikeout=\"False\"/>\n\t\t\t\t\t<ForeColor Alpha=\"255\" Red=\"0\" Green=\"0\" Blue=\"0\" HueScale=\"100\"/>\n\t\t\t\t</Attributes>\n\t\t\t</Element>\n\t\t</StyledText>\n\t</TextObject>\n\t<Bounds X=\"326\" Y=\"121.767700971755\" Width=\"580\" Height=\"251.464598056489\"/>\n</ObjectInfo>\n<ObjectInfo>\n\t<TextObject>\n\t\t<Name>TEXT_1</Name>\n\t\t<ForeColor Alpha=\"255\" Red=\"0\" Green=\"0\" Blue=\"0\"/>\n\t\t<BackColor Alpha=\"0\" Red=\"255\" Green=\"255\" Blue=\"255\"/>\n\t\t<LinkedObjectName/>\n\t\t<Rotation>Rotation0</Rotation>\n\t\t<IsMirrored>False</IsMirrored>\n\t\t<IsVariable>True</IsVariable>\n\t\t<HorizontalAlignment>Center</HorizontalAlignment>\n\t\t<VerticalAlignment>Middle</VerticalAlignment>\n\t\t<TextFitMode>None</TextFitMode>\n\t\t<UseFullFontHeight>True</UseFullFontHeight>\n\t\t<Verticalized>False</Verticalized>\n\t\t<StyledText>\n\t\t\t<Element>\n\t\t\t\t<String xml:space=\"preserve\">BT</String>\n\t\t\t\t<Attributes>\n\t\t\t\t\t<Font Family=\"Arial\" Size=\"8\" Bold=\"False\" Italic=\"False\" Underline=\"False\" Strikeout=\"False\"/>\n\t\t\t\t\t<ForeColor Alpha=\"255\" Red=\"0\" Green=\"0\" Blue=\"0\" HueScale=\"100\"/>\n\t\t\t\t</Attributes>\n\t\t\t</Element>\n\t\t</StyledText>\n\t</TextObject>\n\t<Bounds X=\"326\" Y=\"386.535401943511\" Width=\"475\" Height=\"251.464598056489\"/>\n</ObjectInfo>\n<ObjectInfo>\n\t<TextObject>\n\t\t<Name>TEXT_2</Name>\n\t\t<ForeColor Alpha=\"255\" Red=\"0\" Green=\"0\" Blue=\"0\"/>\n\t\t<BackColor Alpha=\"0\" Red=\"255\" Green=\"255\" Blue=\"255\"/>\n\t\t<LinkedObjectName/>\n\t\t<Rotation>Rotation0</Rotation>\n\t\t<IsMirrored>False</IsMirrored>\n\t\t<IsVariable>False</IsVariable>\n\t\t<HorizontalAlignment>Left</HorizontalAlignment>\n\t\t<VerticalAlignment>Top</VerticalAlignment>\n\t\t<TextFitMode>None</TextFitMode>\n\t\t<UseFullFontHeight>True</UseFullFontHeight>\n\t\t<Verticalized>False</Verticalized>\n\t\t<StyledText>\n\t\t\t<Element>\n\t\t\t\t<String xml:space=\"preserve\">${mesh}</String>\n\t\t\t\t<Attributes>\n\t\t\t\t\t<Font Family=\"Arial\" Size=\"8\" Bold=\"False\" Italic=\"False\" Underline=\"False\" Strikeout=\"False\"/>\n\t\t\t\t\t<ForeColor Alpha=\"255\" Red=\"0\" Green=\"0\" Blue=\"0\" HueScale=\"100\"/>\n\t\t\t\t</Attributes>\n\t\t\t</Element>\n\t\t</StyledText>\n\t</TextObject>\n\t<Bounds X=\"801\" Y=\"147\" Width=\"1815\" Height=\"251\"/>\n</ObjectInfo>\n<ObjectInfo>\n\t<TextObject>\n\t\t<Name>TEXT__1</Name>\n\t\t<ForeColor Alpha=\"255\" Red=\"0\" Green=\"0\" Blue=\"0\"/>\n\t\t<BackColor Alpha=\"0\" Red=\"255\" Green=\"255\" Blue=\"255\"/>\n\t\t<LinkedObjectName/>\n\t\t<Rotation>Rotation0</Rotation>\n\t\t<IsMirrored>False</IsMirrored>\n\t\t<IsVariable>False</IsVariable>\n\t\t<HorizontalAlignment>Left</HorizontalAlignment>\n\t\t<VerticalAlignment>Top</VerticalAlignment>\n\t\t<TextFitMode>None</TextFitMode>\n\t\t<UseFullFontHeight>True</UseFullFontHeight>\n\t\t<Verticalized>False</Verticalized>\n\t\t<StyledText>\n\t\t\t<Element>\n\t\t\t\t<String xml:space=\"preserve\">${bluetooth}</String>\n\t\t\t\t<Attributes>\n\t\t\t\t\t<Font Family=\"Arial\" Size=\"8\" Bold=\"False\" Italic=\"False\" Underline=\"False\" Strikeout=\"False\"/>\n\t\t\t\t\t<ForeColor Alpha=\"255\" Red=\"0\" Green=\"0\" Blue=\"0\" HueScale=\"100\"/>\n\t\t\t\t</Attributes>\n\t\t\t</Element>\n\t\t</StyledText>\n\t</TextObject>\n\t<Bounds X=\"801\" Y=\"417\" Width=\"1690\" Height=\"206\"/>\n</ObjectInfo>\n</DieCutLabel>\n\t`;\n}\n\n\n\nexport function getDymoPrinter(dymo)\n{\n    const printers = dymo.label.framework.getPrinters();\n    let printerName;\n\n    if(printers.length === 0)\n    {\n        return null;\n    }\n\n    for (let i = 0; i < printers.length; ++i)\n    {\n        let printer = printers[i];\n        if (printer.printerType == \"LabelWriterPrinter\")\n        {\n            return printerName = printer.name;\n            \n        }\n    }\n\n    return null;\n}\n\n\nexport function getDymoLabel(dymo, labelName)\n{\n    const label = dymo.label.framework.openLabelXml(labelName);\n\n    if(!label)\n    {\n        return null;\n    }\n\n    return label;\n}","import { makeStyles, Button} from \"@material-ui/core\";\nimport {useState} from \"react\";\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from \"@material-ui/core/Paper\";\nimport DoneIcon from \"@material-ui/icons/Done\";\nimport ClearIcon from \"@material-ui/icons/Clear\";\nimport Checkbox from '@material-ui/core/Checkbox';\n\nconst useStyles = makeStyles(() => ({\n    container:{\n        display: \"flex\",\n        alignItems:\"center\",\n        width: \"80%\",\n        borderRadius: 2,\n        padding: \"7px 10px 7px 10px\",\n    },\n    left :{\n        marginRight: \"auto\"\n    },\n    right : {\n        alignSelf: \"flex-end\",\n        display: \"flex\", \n        gap: 10,\n        alignItems:\"center\",\n        justifyContent: \"center\",\n    }\n}));\n\n\nexport function OrderItemSerial(props){\n\n    const classes = useStyles();\n\n    const clicked = (props.test === undefined) ? false : true;\n\n    let pass = null;\n    \n    let fail = null;\n\n    if(props.test === true)\n    {\n        pass = true;\n    }\n    else if(props.test === false)\n    {\n        fail = true;\n    }\n\n    const [testClick, settestClick] = useState(clicked);\n\n    const [passed, setPassed] = useState(pass);\n\n    const [failed, setFailed] = useState(fail);\n\n    const [err, setErr] = useState(null);\n\n    const checkPassed = () => {\n        setFailed(false);\n        setPassed(true);\n    }\n\n    const checkFailed = () => {\n        setFailed(true);\n        setPassed(false);\n    }\n\n    const testClicked = async() => {\n\n        let testresult;\n\n        if(failed === true)\n        {\n            testresult = false;\n        }\n        else if(passed === true)\n        {\n            testresult = true;\n        }\n        else{\n            testresult = null;\n        }\n\n        const serialTest = {\n            orderNumber: props.orderNumber,\n            action: \"Tested\",\n            note: \"\",\n            passed: testresult,\n            RMANumber: null,\n        };\n\n\n        const headers = {\n                method: 'PUT',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify(serialTest),\n            };\n\n\n        fetch(\"/api/serials/addHistory/\" + props.serial, headers)\n            .then((res) => {\n                if(res.ok)\n                {\n                    props.onTest();\n                    settestClick(true);\n                }\n                else{\n                    res.json().then((error) => setErr(error.message));\n            \n                }\n            })\n            .catch((err) => {\n                setErr(err.message);\n            })\n    }\n\n    return(\n        <Paper className={classes.container}>\n            <Typography className={classes.left}><b>Serial Number</b> : <b>{ props.serial }</b></Typography>\n            <div className={classes.right}>\n                <Typography>Testing</Typography>\n                {err && <Typography style={{color: \"red\"}}>{err}</Typography>}\n                { \n                    !testClick\n                    &&\n                    <>\n                    <FormControl component=\"fieldset\">\n                            <FormGroup row>\n                                <FormControlLabel\n                                    control={<Checkbox checked={passed} style={{color: \"green\"}} onChange={checkPassed} />}\n                                    label=\"Passed\"\n                                />\n                                <FormControlLabel\n                                    control={<Checkbox checked={failed} style={{color: \"red\"}} onChange={checkFailed} />}\n                                    label=\"Failed\"\n                                />\n                            </FormGroup>\n                    </FormControl>\n                    <Button variant=\"contained\"\n                                color=\"primary\"\n                                style={{backgroundColor: \"green\"}}\n                                size=\"small\"\n                                onClick={testClicked}\n                        >\n                            Test\n                    </Button>\n                    </>\n                    \n                }\n\n                {\n                    (testClick && passed)\n                    &&\n                    <>\n                        <DoneIcon style={{color: \"green\"}}/>\n                        <Typography style={{color: \"green\",width: 100}}>Passed</Typography>\n                    </>\n                }\n                {\n                    (testClick && failed)\n                    &&\n                    <>\n                        <ClearIcon style={{color: \"red\"}}/>\n                        <Typography style={{color: \"red\", width: 100}}>Failed</Typography>\n                    </>\n                }\n                </div>\n        </Paper>\n    )\n}","import React, {useState} from 'react';\nimport {CollapseRow} from '../Common/TemplateTable';\nimport {OrderItemSerial} from \"./OrderItemSerial\";\nimport Typography from \"@material-ui/core/Typography\";\nimport DoneIcon from \"@material-ui/icons/Done\";\n\n\nexport class OrderTestRow extends React.Component{\n\n\n    constructor(props)\n    {\n        super(props);\n        this.state  ={\n            counter: 0,\n        };\n    }\n\n    updateCounter = () => {\n        let counter = 0;\n\n        this.props.serials.map(\n                (serial) => {\n                    if(this.props.serialTests[serial])\n                    {\n                        counter += 1;\n                    }\n                }\n        );\n\n        this.setState({counter: counter});\n    }\n    \n    componentDidMount(){\n        this.updateCounter();\n    }\n\n    componentDidUpdate(prevProps){\n\n        if(prevProps != this.props)\n        {\n            this.updateCounter();\n        }\n    }\n\n    addToCounter = () => {\n        this.setState({counter : this.state.counter + 1});\n    }\n\n    serialTests = () => {\n        return this.props.serials.map((serial ) => {\n            return  <OrderItemSerial \n                        serial={serial} \n                        test={this.props.serialTests[serial]}\n                        onTest={this.addToCounter}\n                        orderNumber={this.props.orderNumber}\n                        />\n        });\n    }\n\n\n    render() {\n        const {counter} = this.state;\n\n        return (\n            <CollapseRow   \n                items={[ ...this.props.columns,\n                        (counter !== this.props.quantity) ? <div>{counter}</div> : <DoneIcon style={{color:\"green\"}} />\n                ]} \n                subItems={this.serialTests()}\n            />\n        );\n    }\n}\n\n","\nimport { stringSimilarity } from \"string-similarity-js\";\n\nimport XLSX from \"xlsx\";\n\n\nfunction compareCustomerNames(customerName, customers) {\n    for(let i = 0; i < customers.length; i++)\n    {\n        if(stringSimilarity(customerName, customers[i].customerName) > 0.60 )\n        {\n            return customers[i];\n        }\n    }\n    return {customerName: \"\", _id: \"\"};\n}\n\n\nexport function ParseOrderFile(event, products, customers, newOrders){\n           \n        const bstr = event.target.result;\n        const wb = XLSX.read(bstr, {type:'binary', cellDates: true});\n           \n        const wsname = wb.SheetNames[0];\n        const ws = wb.Sheets[wsname];\n           \n        const data = XLSX.utils.sheet_to_json(ws, {header:1});\n\n            const head = data[0]; //get the head of the data\n            data.shift(); //move head out of the data\n            let order = {};\n            \n            data.map( (entry) => {\n\n                let obj = {};\n            \n                entry.map((col, i) => {\n                    obj[head[i]] = col; //set each column to its column name\n                });\n\n                if(!obj[\"SO No\"] || obj[\"SO No\"] === undefined) //check if entries match the head\n                {\n                    return;\n                }\n\n                \n           \n                if(Object.keys(order).length !== 0 && Number(obj[\"SO No\"]) !== order.orderNumber)\n                {\n                    //if a new order push old order into array\n                    newOrders.push(order);\n                    order = {}\n                }\n\n                if(Object.keys(order).length === 0){\n\n                    let shipTo = \"\";\n                    let To = \"\";\n                    //Get all the info about the order\n                    order.orderNumber= Number(obj[\"SO No\"]);\n                    order.orderDate = new Date(obj[\"SO Date\"]);\n                    order.customer = compareCustomerNames(obj[\"Customer Name\"], customers);\n                    order.to = obj[\"Customer Name\"] + \"\\n\";\n                    order.shipTo = \"\";\n                    order.items = [];\n\n                    //columns for customer address\n                    for(let i = 11; i < 17; i++){\n                        //catch city,state column\n                        if(entry[i] === \"\")\n                            continue;\n                         To += (i != 13 ) ? \"\" + entry[i] + \"\\n\": entry[i] + \", \" ;\n                    }\n                    //column for shipping address\n                    for(let i = 17; i < 24; i++ ){\n                        //catch city, state column\n                        if(entry[i] === \"\")\n                            continue;\n                        shipTo += (i !== 20) ?  \"\" + entry[i] + \"\\n\": entry[i] + \", \";\n                    }\n                      \n                    \n                    order.shipTo = shipTo;\n                    order.to = To;\n                }\n\n                const product  = products.find((product) =>  obj[\"Item ID\"].startsWith(product.productId)); //find the product\n\n                if(product){\n\n                    if(product.productPackage.length) //handle package items with tablets, modules, and mounts\n                    {\n                       product.productPackage.map((productId) => {\n\n                           const isDuplicate = order.items.find((item) => (item.productId === productId)); //find duplicate\n \n                            if(isDuplicate){ //if duplicate add to quantity\n                                isDuplicate.quantity += parseInt(obj[\"Qty Ordered\"]); \n                            }\n                            else{ //add to items list\n                                order.items.push({  quantity: parseInt(obj[\"Qty Ordered\"]), \n                                                    productId: productId,\n                                                    productName: obj[\"Line Description\"],\n                                                    serials: [],\n                                });\n                            }\n                       });\n                    }\n                    else{ \n\n                        const isDuplicate = order.items.find((item) => (item.productId === product.productId));\n\n                        if(isDuplicate){\n                            isDuplicate.quantity += parseInt(obj[\"Qty Ordered\"]); \n                        }\n                        else{\n                            order.items.push({  quantity: parseInt(obj[\"Qty Ordered\"]), \n                                                productId: product.productId,\n                                                productName: obj[\"Line Description\"],\n                                                serials: [],\n                                            });\n                        }\n                    }\n                }\n                \n\n            });\n\n}\n","import React from 'react';\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport AddIcon from '@material-ui/icons/Add';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from \"@material-ui/core/Button\";\nimport {makeStyles} from \"@material-ui/core\";\nimport Paper from \"@material-ui/core/Paper\"\n\nconst useStyles = makeStyles(() => ({\n    container: { \n        paddingBottom: 30, \n        width: \"100%\",\n    },\n    itemContainer: {\n        display:\"flex\",\n        gap: 20,\n        padding:\"20px 30px 20px 30px\"\n    },\n    item:{\n        flexBasis: \"49%\",\n    }\n}));\n\nclass Item extends React.Component{\n\n    constructor(props)\n    {\n        super(props);\n        this.state =  {\n            product: {productName: \"\"},\n            quantity: 0,\n            buttonClicked: false,\n        };\n    }\n\n    setQuantity = (event) => {\n        this.setState({quantity: parseInt(event.target.value)});\n    }\n\n    setProduct = (event, value) => {\n        this.setState({product: value});\n    }\n\n    updateParent = () => {\n        const {quantity, product} = this.state;\n        if(!(quantity && product))\n            return;\n\n        this.props.addItem({quantity: quantity, productName: product.productName, productId: product.productId});\n        this.setState({quantity: 0, product: \"\"});\n        \n    }\n\n    onClick = (event) => {\n        this.setState({buttonClicked: true});\n    }\n\n    render(){\n        const {product,quantity, buttonClicked} = this.state;\n        const {classes, products, key} = this.props;\n\n        return(\n            <div className={classes.container}>\n                <Paper className={classes.itemContainer}>\n                    <Autocomplete\n                        value={product}\n                        key={key}\n                        id=\"product\"\n                        options={products}\n                        getOptionLabel={(option) => option.productName}\n                        style={{width: 300}}\n                        onChange={this.setProduct}\n                        renderInput={(params) => <TextField {...params} variant=\"outlined\" label=\"Product\"/>}\n                    />\n                    <div  className={classes.item}>\n                        <TextField\n                            value={quantity}\n                            id=\"Quantity\"\n                            label=\"Quantity\"\n                            type=\"number\"\n                            variant=\"outlined\"\n                            InputProps={{ inputProps:{min:0}}}\n                            style={{flexGrow: 1}}\n                            onChange={this.setQuantity}\n                        />\n                        \n                        <IconButton size=\"medium\" onClick={this.updateParent}>\n                            <AddIcon fontSize=\"large\" color=\"primary\"/>\n                        </IconButton>\n                    </div>\n                </Paper>\n            </div>\n        );\n    }\n}\n\n\nexport default function NewItem(props){\n    const classes = useStyles();\n    \n    return <Item classes={classes} {...props} />\n}","\nimport React, { lazy } from \"react\";\nimport {SearchBar} from \"../Common/Search\";\nimport {Display, DisplayItem} from \"../Common/Display\";\nimport {Recent, RecentItem} from \"../Common/Recent\";\nimport HeadDisplay from \"../Common/HeadDisplay\";\nimport ItemTabs from \"../Common/ItemTabs\";\nimport {FileUploadButton, SubmitButton} from \"../Common/Buttons\";\nimport {GenTable, GenTableHead, GenTableBody, Row} from \"../Common/TemplateTable\";\nimport {Message} from \"../Common/Message\";\nimport {\n  IdentifierField,\n  DateField,\n  CustomerField,\n  ShippingField,\n  ToField,\n  } from \"../Common/Fields\";\n\nimport {serialXML, getDymoLabel, getDymoPrinter} from \"../Serials/SerialDymoXML\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\n\nimport {OrderTestRow} from \"./OrderTestRow\";\nimport {ParseOrderFile} from \"./NewOrder\";\nimport NewItem from \"./NewItem\";\n\n\n\n\n\n\n\nexport default class Orders extends React.Component {\n\n      constructor(props)\n      {\n        super(props);\n        this.state = {\n\n          recentOrders: null,\n\n          rows: null,\n\n          orderNumber: null,\n          customer: null,\n          to: null,\n          shipTo: null,\n          items: null,\n          orderDate: null,\n\n          change: false,\n          message: null,\n      \n          uploadedOrders: null,\n          file: null,\n          newOrder: false,\n\n\n          tab: null,\n        };\n      }\n\n\n      updateDetails = () =>\n      {\n\n        const headers = {\n\n            method: 'PUT',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ \n                customerId:   this.state.customer._id,\n                orderDate:    this.state.orderDate,\n                to:           this.state.to,\n                shipTo:       this.state.shipTo,\n            }),\n        };\n\n        fetch(\"/api/orders/updateDetails/\" + this.state.orderNumber, headers)\n        .then((res) => {\n\n          if(res.ok)\n          {\n            return this.setState({\n                                      message: {\n                                          error: false, \n                                          text: \"Order details successfully updated\"\n                                      }, \n                                      change: false,\n                                  });\n          }\n\n          res.json().then((err) => this.setState({\n                                                    message: {  \n                                                                error: true, \n                                                                text: err.msg\n                                                    }\n                                                  }));\n        })\n        .catch(err => this.setState({message: {error: true, text: err.msg}}));\n        \n      }\n\n      getOrder = async(orderNumber) => {\n\n\n        fetch(\"/api/orders/\" + orderNumber)\n            .then((res) => {\n\n                if(res.ok)\n                {\n                  return res.json();\n                }  \n\n                res.json().then((err) => this.setState({message: { \n                      error: true,\n                      text: err.message\n                    }\n                }));\n            })\n            .then(order => {\n\n                    if(!order) {return;}\n\n                    const customer = this.props.customers.find(customer => customer._id === order.customerId);//find customer from id\n\n                    //update state with fetched order\n                    this.setState({\n                              orderNumber:  order.orderNumber,\n                              customer:     customer,\n                              to:           order.to,\n                              shipTo:       order.shipTo,\n                              orderDate:    new Date(order.orderDate),\n                              items:        order.items,\n                              newOrder:     false,\n                              change:       false,\n                    });\n\n                    this.createRows(order);\n\n                    this.props.location.pathname += `/${order.orderNumber}`;\n            })\n            .catch(err => this.setState({message: {error: true, text: err.toString()}}));\n\n      }\n\n      componentDidMount(){\n\n        const  state = this.props.location.state;\n\n        if(!state) //did the router render component with a state?\n        {\n          this.fetchRecent();\n        }\n        else if(state.orderNumber) //check if the router passed a prop to the newly rendered component\n        {\n          this.getOrder(state.orderNumber);\n        }\n\n      }\n      printSerial = (serialNumber) =>{\n\n        const dymo = window.dymo;\n\n        const printerName = getDymoPrinter(dymo);\n\n        if(!printerName)\n        {\n            this.setState({message: {error: true , text: \"No Printer Found\"}});\n            return;\n        }\n\n        const label = getDymoLabel(dymo, serialXML);\n\n        if(!label)\n        {\n            this.setState({message: {error: true, text: \"Could not create label\"}});\n            return;\n        }\n\n        label.setObjectText(\"BARCODE\", serialNumber);\n        label.print(printerName);\n      }\n\n\n      /*\n        Create table entries based on fetch data requires aysnc\n          -cant move this to render because of fetch\n          -need to await for response to determine how to create rows, therefore nothing will return to render\n          -needed to use setState to update instead\n          -may need to move this to server side with the inital order get function\n      */\n      createRows = async(order) => {\n\n        const items = order.items;\n        const products = this.props.products;\n        const rows  = [];\n\n        \n        let serialTests;\n        \n        if(!this.state.newOrder) //if not new order, ask server for the tests of order's serial numbers\n        {\n            const resp  = await fetch(\"/api/orders/testedSerials/\" + order.orderNumber);\n\n            if(resp.ok)\n            {\n                serialTests = await resp.json();\n            }\n        \n            else{\n                const error = await resp.json();\n                this.setState({message: {error: true, text: error.message}});\n            }\n        }\n\n        if(items !== undefined && items.length){\n\n            items.map(\n                (item, i) => {\n\n                    const productName = this.props.products.find((product) => product.productId === item.productId).productName;\n\n                    const columns = [productName, item.productId, <b>{item.quantity}</b>]; \n\n                    if(item.serials && item.serials.length){ //if there are serials create testable rows \n                       \n                        rows.push(  <OrderTestRow \n                                        columns={columns} \n                                        serials={item.serials}\n                                        serialTests={serialTests}\n                                        orderNumber={order.orderNumber}\n                                        quantity={item.quantity}\n                                    />);\n                    }\n                    else{ //create a standard row\n                        columns.push(\"\");\n                        columns.push(\"\");\n                        rows.push(<Row key={i} items={columns}/>);\n                    }\n                    \n                }\n            );\n        }\n\n          this.setState({rows: rows});\n    }\n\n    createOrder = () => {\n\n        const {orderNumber, orderDate, to, shipTo, customer, items} = this.state;\n\n        if(orderNumber && customer && to && shipTo && items){ //check if neccesary items are there to prevent error\n \n            const newOrder = {  //create json obj to send to server\n                            orderNumber:  orderNumber, \n                            customerId:     customer._id,\n                            to:             to,\n                            shipTo:         shipTo,\n                            orderDate:      orderDate,\n                            items:          items.map((item) => ({productId: item.productId, quantity: item.quantity, serials: []})),  \n            };\n            \n            const headers = {\n\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify(newOrder),\n\n            };\n\n            fetch(\"/api/orders/create\", headers)\n                .then((res) => {\n\n                        if(res.ok)\n                        {\n                            return res.json();\n                        }\n                        else\n                        {\n                            res.json().then((error) => this.setState({message: {error: true, text: error.message}}));\n                        }\n                })\n                .then((order) => {\n\n                    if(order) {\n\n                        const customer = this.props.customers.find((customer) => customer._id === order.customerId);\n\n                        this.setState({ //set state to what the order has\n\n                              orderNumber:  order.orderNumber,\n                              customer:     customer,\n                              orderDate:    order.orderDate,\n                              to:           order.to,\n                              shipTo:       order.shipTo,\n                              newOrder:     false,\n                              items:        order.items,\n                              message: {\n                                  error: false,\n                                  text: `${order.orderNumber} successfully created`,\n                              }\n                        });\n\n                        this.props.updateOrders({orderNumber: order.orderNumber, customer: customer}); //update the root dependency in VersaTime\n\n\n                    }\n                })\n                .catch((error) => this.setState({message : {error:true, text: error.message}}));\n        }\n      }\n      \n      fetchRecent = () => \n      {\n          fetch(\"/api/orders/recent/6\") //get last 6 orders from server\n            .then((res) => {\n\n                if(res.ok)\n                {\n                  return res.json();\n                }\n                \n                res.json().then((err) => this.setState({\n                  message: { \n                      error: true,\n                      text: err.message\n                    }\n                }));\n\n            })\n            .then((orders) => {\n\n              this.setState({ \n                              orderNumber:  null,\n                              items:        null,\n                              orderDate:    null,\n                              shipTo:       null,\n                              to:           null,\n                              recentOrders: orders\n              });\n\n            })\n            .catch((err) => this.setState({message: {error: true, text: err.message}}));\n\n      }\n\n      valueChange = (event, order) => \n      {\n        //if no order selected then go back to recents\n        if(!order)\n        {\n          this.fetchRecent();\n        }\n        else\n        {\n          this.getOrder(order.orderNumber);\n        }\n\n      }\n\n      uploadClick = (event) => \n      {\n          //prevent default submit then trigger click() for upload new order file\n          event.preventDefault();\n\n          document.getElementById(\"upload-file\").click();\n\n      }\n\n      uploadFile = (event) => \n      {\n          \n          const file = event.target.files[0]; //get name of file to upload\n\n          const reader = new FileReader();\n\n          reader.onload = (event) => {\n\n            \n            const newOrders = []; //create empty obj list for multiple orders\n\n            ParseOrderFile(event, this.props.products,  this.props.customers, newOrders); //fills new orders list\n\n            this.setState({           //make the current order the first entry from the order file\n                        uploadedOrders: newOrders, \n                        tab:            0, \n                        orderNumber:    newOrders[0].orderNumber,\n                        orderDate:      newOrders[0].orderDate,\n                        customer:       newOrders[0].customer,\n                        items:          newOrders[0].items,\n                        to:             newOrders[0].to,\n                        shipTo:         newOrders[0].shipTo,\n            });\n\n            this.createRows(newOrders[0]); //create the rows for the products\n\n          };\n\n          reader.readAsBinaryString(file); \n      }\n\n      newOrderFunction = () => \n      {   \n          //create an entirely new order \n          this.setState({\n                        orderNumber: null,\n                        customer:   null,\n                        to:         null,\n                        shipTo:     null,\n                        items:      [],\n                        orderDate:  new Date(),\n                        newOrder:   true, \n                        recentOrders: null,\n                        change:      false,\n                        rows: [],\n          });\n          \n      }\n\n      getOptionLabel = (option) => \n      {\n        return \"\" + option.orderNumber + \" - \" + option.customer.customerName; //how to render options for order selection\n      }\n\n\n      //state setters for order\n\n      change_orderNumber = (event) => \n      {\n        const num = parseInt(event.target.value);\n\n        if(Number.isInteger(num))\n        {\n          this.setState({orderNumber: parseInt(num)});\n        }\n        else\n        {\n          this.setState({orderNumber: null});\n        }\n      }\n\n      change_orderDate = (event) =>\n      {\n          this.setState({orderDate: new Date(event.target.value), change: true})\n      }\n\n      change_orderCustomer = (event, customer) => \n      {\n          this.setState({customer: customer, change: true});\n      }\n\n      change_orderTo = (event) => \n      {\n          this.setState({to: event.target.value, change: true});\n      }\n\n      change_shipTo = (event) => \n      {\n          this.setState({shipTo: event.target.value, change: true});\n      }\n\n      needSerials(items)\n      {\n        //checks the state of the order to see if serials has been created for it or not\n        for(let i = 0; i < items.length; i++)\n        {\n            if(items[i].serials.length )\n                return false;\n        }\n        return true;\n      }\n\n\n      addItem = (item) => {\n\n          this.setState((prevState) => {\n  \n            const items = [...prevState.items, item]; //append to end of current state items list\n\n            this.createRows({items: items}); //recreate the new rows\n\n            return {items: items};\n          });\n      }\n\n      updateTab = (event, newValue) =>{ //when there is a new order update the tab\n         \n          this.setState((prevState) => {\n\n            const uploadedOrders = prevState.uploadedOrders; \n\n            const nextOrder = prevState.uploadedOrders[newValue]; //get the next order selected from the list\n\n            uploadedOrders[prevState.tab] = { //save the current order state to the list before updating to next\n\n                ...uploadedOrders[prevState.tab],\n                orderNumber:  prevState.orderNumber,\n                customer:     prevState.customer,\n                orderDate:    prevState.orderDate,\n                to:           prevState.to,\n                shipTo:       prevState.shipTo,\n                items:        prevState.items,\n\n            };\n\n            this.createRows(nextOrder); //create product table for new order\n\n            return {  //finally update current to next and save the changes made to the previous order\n\n                orderNumber:  nextOrder.orderNumber,\n                customer:     nextOrder.customer,\n                orderDate:    nextOrder.orderDate,\n                to:           nextOrder.to,\n                shipTo:       nextOrder.shipTo,\n                items:        nextOrder.items,\n\n                uploadedOrders: uploadedOrders,\n\n                tab: newValue,\n            }\n\n          });\n          \n      }\n\n\n      createSerials = () => {\n\n                const headers = {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                };\n\n\n                fetch(\"/api/orders/createSerials/\" + this.state.orderNumber, headers) //server handles checking for if serials are needed\n                    .then((res) => {\n                        if(res.ok)\n                        {\n                            return res.json();\n                        }\n\n                        res.json().then((err) => this.setState({message: {error:true, text: err.message}}));\n                    })\n                    .then((order) => {\n\n                        if(order)\n                        {\n                            this.createRows(order); //create the new product table\n                            \n                          \n                            //update the items table to reflect the serials created for order\n                            this.setState({items: order.items, message:{error: false, text: \"Successfully created serials\"}});\n\n                            for(let i = 0 ; i < order.items.length; i++ )\n                            {\n                                for(let j = 0; j < order.items[i].serials.length; j++)\n                                {\n                                    //update root Serial dependency to reflect serials added to db\n                                    this.props.updateSerials({serialNumber: order.items[i].serials[j], customer: this.state.customer});\n                                    this.printSerial(order.items[i].serials[j]);\n                                }\n\n                            }\n                        }\n                    })\n                    .catch((err) => this.setState({message: {error:true, text: err.message}}));\n      }\n\n      render() {\n\n        const { newOrder, \n                recentOrders, \n                change,\n                orderNumber,\n                to,\n                rows,\n                customer,\n                shipTo,\n                orderDate,\n                items,\n                uploadedOrders,\n                tab,\n                file,\n                message,\n              } = this.state;\n\n        const {customers, products}= this.props;\n\n        return(\n          <Display>\n              <SearchBar  label=\"Sales Orders\"\n                          options={this.props.orders}\n                          getOptionLabel={this.getOptionLabel}\n                          newOrderFunction={this.newOrderFunction}\n                          onChange={this.valueChange}    \n              />\n\n              {message && <Message text={message.text} error={message.error} clear={() => this.setState({message: null})} />}\n\n             \n              {\n                newOrder &&  \n                <DisplayItem>\n                  <FileUploadButton         \n                    uploadFile={this.uploadFile}\n                    onChange={this.uploadClick}\n                    file={file} \n                  />\n  \n\n                {   uploadedOrders &&\n                            <ItemTabs onChange={this.updateTab} value={tab} tabLabels={uploadedOrders.map((order) => order.orderNumber)}/>\n                }\n                </DisplayItem>\n              }\n\n              {\n                recentOrders && !newOrder && !orderNumber &&\n                <DisplayItem>\n                  <Typography variant=\"h5\">Recent Orders</Typography>\n                  <Recent>\n                    {\n                      recentOrders.map((item) => {\n\n                        const customer = customers.find((c) => c._id === item.customerId);\n                        const date = new Date(item.orderDate);\n\n                        return (\n                                <Button style={{textTransform: \"none\"}} onClick={(e) => this.getOrder(item.orderNumber)}>\n                                    <RecentItem>\n                                                {[  \"Order: \" + item.orderNumber, \n                                                  customer.customerName, \n                                                  \"\" + date.getMonth() + \"/\" + date.getDay() + \"/\"+ date.getFullYear(),\n                                                ]}\n                                    </RecentItem>\n                                </Button>\n                        );\n                      })\n                    }\n                  </Recent>\n                </DisplayItem>\n              }\n\n             { (newOrder || orderNumber) \n                &&\n                <DisplayItem>\n                  <Typography variant=\"h5\">Order Details</Typography>\n                  <HeadDisplay \n                    edit={!newOrder}\n                    updateHead={this.updateDetails}\n                    change={change}\n                  >\n                        <IdentifierField  \n                                  label=\"Order Number\"         \n                                  value={orderNumber} \n                                  onChange={this.change_orderNumber}\n                                  allowEdit={newOrder}\n                          />\n                        <CustomerField  \n                                customers={customers} \n                                value={customer}\n                                key={orderNumber}\n                                onChange={this.change_orderCustomer}\n                        />\n                        <DateField   \n                                value={new Date(orderDate)} \n                                label={\"Order Date\"}  \n                                onChange={this.change_orderDate}\n                        />\n                        <ToField     \n                                value={to}\n                                onChange={this.change_orderTo}\n                        />\n                        <ShippingField\n                                value={shipTo}\n                                onChange={this.change_shipTo}\n                        />\n                  </HeadDisplay>\n                </DisplayItem>\n              }\n              {\n                newOrder &&\n                    <DisplayItem>\n                      <Typography variant=\"h5\">\n                          New Item\n                      </Typography>\n                      <NewItem products={products}\n                                      key={items}\n                                      addItem={this.addItem}\n                                />\n                    </DisplayItem>\n              }\n              {\n                items && rows &&\n                <DisplayItem>\n                        <Typography variant=\"h5\">Order Items</Typography>\n                        <GenTable>\n                          <GenTableHead>\n                            <b>Item Name</b>\n                            <b>Product ID</b>\n                            <b>Quantity</b>\n                            <b>Tested</b>\n                            <b></b>\n                          </GenTableHead>\n                          <GenTableBody>\n                            {rows}\n                          </GenTableBody>\n                        </GenTable>\n                </DisplayItem>\n                \n              }\n\n              {   !this.state.newOrder \n                  && \n                  items\n                  &&\n                  this.needSerials(items)\n                  &&\n                  <Button style={{marginLeft:\"auto\", marginTop: 20, alignSelf: \"flex-start\"}} \n                          onClick={this.createSerials} \n                          color=\"primary\" \n                          variant=\"contained\" \n                          size=\"large\" >\n                              Create Serials\n                  </Button>\n              }\n              {   this.state.newOrder \n                  && \n                  <SubmitButton     \n                      onClick={this.createOrder} \n                  >\n                          Submit Order\n                  </SubmitButton>\n               }\n             \n          </Display>\n          \n      );\n\n\n    }\n\n}\n\n  "],"sourceRoot":""}