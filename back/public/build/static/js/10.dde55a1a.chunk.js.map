{"version":3,"sources":["Common/Buttons.js","Common/Fields.js","Common/TemplateTable.js","Common/Search.js","Common/HeadDisplay.js","Serials/SerialDymoXML.js","Serials/NewSerial.js","../node_modules/@material-ui/lab/esm/ToggleButton/ToggleButton.js","Serials/NewAction.js","Serials/SerialsDisplay.js"],"names":["DownloadPackingSlipButton","props","style","padding","color","variant","onClick","UpdatePackingSlipsButton","SubmitButton","marginBottom","width","children","NewButton","title","placement","size","fontSize","EditButton","className","RmaTestBox","component","row","control","checked","passed","onChange","i","label","SaveChangesButton","FileUploadButton","marginLeft","type","display","name","id","value","file","uploadFile","accept","htmlFor","useStyles","makeStyles","textFieldRoot","identifierRoot","height","multilineRoot","fullWidth","flexGrow","noteWidth","labelIdRoot","labelRoot","labelFocused","getInputProps","params","classes","InputProps","root","edit","disableUnderline","CustomerField","options","customers","getOptionLabel","option","customerName","disabled","freeSolo","renderInput","InputLabelProps","shrink","ProductField","products","productName","DateField","now","Date","defaultValue","toISOString","substring","ShippingField","multiline","rows","rowsMax","ToField","IdentifierField","InProps","allowEdit","readOnly","error","helperText","focused","MeshField","BluetoothField","VersionField","NoteField","GeneralField","QuantityField","inputProps","min","SerialField","serials","String","serialNumber","OrderField","orders","orderNumber","RMAField","rmas","RMANumber","TrackingNumberField","POField","ShippingServiceField","BoxNumberField","container","overflowX","flexDirection","alignSelf","overflowY","repairTable","tableHead","backgroundColor","repairHead","expandedElement","alignItems","maxHeight","gap","margin","borderBottom","CollapseRow","React","useState","open","setOpen","Fragment","items","map","item","align","aria-label","colSpan","length","in","timeout","unmountOnExit","subItems","Row","RepairTable","Paper","GenTable","elevation","stickyHeader","GenTableHead","Children","GenTableBody","GenTableRow","TemplateTable","search","paddingBottom","searchBarContainer","justifyContent","marginTop","SearchInput","ListboxProps","SearchBar","noNew","newOrderFunction","rootConatiner","borderRadius","editButton","content","flexFlow","position","maxWidth","paddingTop","Head","changeEdit","state","setState","saveChanges","event","updateHead","this","child","noEdit","cloneElement","change","Component","HeadDisplay","serialXML","serialMeshXML","mesh","serialBluetoothMeshXML","bluetooth","getDymoPrinter","dymo","printers","framework","getPrinters","printer","printerType","getDymoLabel","labelName","openLabelXml","childFlex","button","New_Serial","setQuantity","quantity","parseInt","target","setCustomer","customer","setProduct","product","setOrder","order","setRMA","rma","createSerials","newSerial","customerId","_id","productId","headers","method","body","JSON","stringify","fetch","then","res","ok","json","updated","msg","serial","updateRoot","catch","toString","Message","clear","Button","NewSerial","ToggleButton","ref","_props$disabled","_props$disableFocusRi","disableFocusRipple","selected","_props$size","other","_objectWithoutProperties","ButtonBase","_extends","clsx","concat","capitalize","focusRipple","isDefaultPrevented","withStyles","theme","typography","boxSizing","shape","border","fade","palette","action","active","borderLeft","textDecoration","text","primary","sizeSmall","pxToRem","sizeLarge","borderTop","numberFields","btnGroup","test","ship","receive","Action","setRma","buttonClick","buttonClicked","setNote","note","setPassed","addAction","addHistory","ToggleButtonGroup","exclusive","rowMax","NewAction","SerialDisplay","printSerial","window","printerName","setObjectText","print","message","printSerialDetails","prevstate","history","err","serialObj","version","fetchSerial","a","find","fetchRecent","recentSerials","setBluetooth","setMesh","setVersion","setSerial","data","location","serialHistory","entry","date","getMonth","getDate","getFullYear","author","Display","Search","Recent","textTransform","e","Typography","Box","historyToRows"],"mappings":"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","file":"static/js/10.dde55a1a.chunk.js","sourcesContent":["import AddIcon from '@material-ui/icons/Add';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport {Button} from \"@material-ui/core\";\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\nimport {useState} from 'react';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\n\n\nexport const DownloadPackingSlipButton = (props) => {\n    return(\n        <Button style={{padding:7}}\n                color=\"primary\" \n                variant=\"contained\"\n                onClick={props.onClick}\n        >\n            Download Packing Slips\n        </Button>\n    );\n}\n\n\nexport const UpdatePackingSlipsButton = (props) => {\n    return(\n        <Button\n            style={{padding:7}}\n            color=\"primary\" \n            variant=\"contained\"\n            onClick={props.onClick}\n        > \n            Update Packing Slips\n        </Button>\n    );\n}\n\n\nexport const SubmitButton = (props) => {\n    return (\n        <Button\n            style={{ marginBottom: 30, width: '100%', padding: \"15px 0px 15px 0px\"}} \n            color=\"primary\" \n            variant=\"contained\"\n            onClick={props.onClick}\n        >\n            {props.children}\n        </Button>\n    );\n}\n\n\nexport const NewButton = (props) => {\n\n    return(\n        <Tooltip title={props.title} placement=\"top\">\n            <IconButton onClick={props.onClick} size=\"small\">\n                <AddIcon color=\"primary\" fontSize=\"large\"/>\n            </IconButton>\n        </Tooltip>\n    );\n};\n\nexport const EditButton = (props) => {\n    return(\n        <Tooltip title=\"Edit\" placement=\"top\">\n            <IconButton onClick={props.onClick} className={props.className}> \n                <EditIcon color={props.color}/>\n            </IconButton>\n        </Tooltip>\n    );\n}\n\nexport const OrderTestButton = (props) =>{\n\n    return(\n        <Tooltip title=\"Serials\" placement=\"top\">\n            <IconButton \n                    onClick={props.onClick}>\n            {\n                props.open && <KeyboardArrowUpIcon />\n            }\n            {\n                !props.open && <KeyboardArrowDownIcon />\n            }\n            </IconButton>\n        </Tooltip>\n    \n    );\n  \n};\n\n\nexport const RmaTestBox = (props) => {\n\n    const checkFailed = () => {\n        props.onChange(props.i, false);\n    };\n    const checkPassed = () => {\n        props.onChange(props.i, true);\n    }\n    \n    return(\n        <FormControl component=\"fieldset\">\n                        <FormGroup row>\n                            <FormControlLabel\n                                control={<Checkbox checked={(props.passed !== null && props.passed !== false) ? props.passed : null} style={{color: \"green\"}} onChange={checkPassed} />}\n                                label=\"Passed\"\n                            />\n                            <FormControlLabel\n                                control={<Checkbox checked={(props.passed === false) ? true : null } style={{color: \"red\"}} onChange={checkFailed} />}\n                                label=\"Failed\"\n                            />\n                        </FormGroup>\n        </FormControl>\n    );\n}\n\nexport const SaveChangesButton = (props) => {\n\n    return(\n        <Button onClick={props.onClick} color=\"primary\">\n                Save Changes\n        </Button>\n    );\n}\n\nexport const FileUploadButton = (props) => {\n    return(\n        <div style={{marginLeft: \"auto\"}}>\n            <input  type=\"file\" \n                    style={{display: \"none\"}} \n                    name=\"upload-file\"\n                    id=\"upload-file\"\n                    value={props.file}\n                    onChange={props.uploadFile}\n                    accept=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n                />\n                <label htmlFor=\"upload-file\" >\n                    <Button variant=\"contained\" color=\"primary\" onClick={props.onChange}>\n                        Upload File\n                    </Button>\n                </label>\n        </div>\n    );\n}\n\n\nexport const ShippingOrderByInput = (props) => {\n    return( \n        <ToggleButtonGroup exclusive value={props.value}>\n            \n        </ToggleButtonGroup>\n    );\n}\n\n","import TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport {makeStyles, requirePropFactory, useTheme} from \"@material-ui/core\";\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from\"@material-ui/core/Select\";\nimport React from \"react\";\n\nconst useStyles = makeStyles(() => ({\n    textFieldRoot: {\n        fontSize:  18,\n        \"& .Mui-disabled\": {\n            color: \"black\",\n        },\n        width: 275,\n    },\n    identifierRoot:{\n        fontSize:  20,\n        \"& .Mui-disabled\": {\n            color: \"black\",\n        },\n        height: \"auto\",\n        width:\"100%\",\n    },\n\n    multilineRoot:{\n        fontSize: 18,\n        \"& .Mui-disabled\": {\n            color: \"black\",\n        },\n        width: 275,\n    },\n    fullWidth : {\n        flexGrow: 0,\n    },\n    noteWidth : {\n        width: 275,\n        height: \"100%\",\n    },\n    labelIdRoot: {\n        fontSize: 20,\n        \n    },\n    labelRoot:{\n        fontSize: 20\n    },\n    labelFocused: {}\n\n\n}));\n\n\nconst getInputProps = (params, classes, props) => {\n\n    let InputProps;\n    if(params){\n        InputProps = {\n            ...params.InputProps,\n            classes: {root: classes.textFieldRoot},\n        }\n    }\n    else{\n        InputProps = {classes: {root: classes.textFieldRoot}};\n    }\n\n    if(!props.edit){\n        InputProps.disableUnderline = true;\n    }\n\n    return InputProps;\n\n}\n\n\nexport const CustomerField = (props) => {\n    \n    const classes = useStyles();\n\n    return(\n        <Autocomplete id=\"customer\"\n                options={props.customers}\n                getOptionLabel={(option) => option.customerName}\n                disabled={!props.edit}\n                onChange={props.onChange}\n                value={props.value}\n                freeSolo\n                className={classes.fullWidth}\n                renderInput={(params) => <TextField   {...params}\n                                                        label=\"Customer\"\n                                                        variant={(props.edit) ? \"outlined\" : \"standard\" }\n                                                        InputProps={getInputProps(params, classes, props)}\n                                                        InputLabelProps={{\n                                                             ...params.InputLabelProps,\n                                                            classes: {root: classes.labelRoot},\n                                                            shrink: true \n                                                        }}\n                                        \n                                                        />}\n                            />\n    );\n}\n\nexport const ProductField = (props) => {\n    const classes = useStyles();\n    \n    return(\n        <Autocomplete id=\"product\"\n                options={props.products}\n                getOptionLabel={(option) => option.productName}\n                disabled={!props.edit}\n                onChange={props.onChange}\n                value={props.value}\n                freeSolo\n                className={classes.fullWidth}\n                renderInput={(params) => <TextField   {...params}\n                                                        label=\"Product\"\n                                                        variant={(props.edit) ? \"outlined\" : \"standard\" }\n                                                        InputProps={getInputProps(params, classes, props)}\n                                                        InputLabelProps={{\n                                                            ...params.InputLabelProps,\n                                                           classes: {root: classes.labelRoot},\n                                                           shrink: true\n                                                        }}\n                                                        />}\n                            />\n    );\n};\n\nexport const DateField = (props) => {\n    const classes = useStyles();\n    const label = (!props.label) ? \"Expr Date\" : props.label;\n    const now = new Date();\n\n    return(\n        <TextField\n                        id=\"date\"\n                        label={label}    \n                        type=\"date\"\n                        defaultValue=\"yyyy-MM-dd\"\n                        variant={(props.edit) ? \"outlined\" : \"standard\" }\n                        value={(props.value) ? props.value.toISOString().substring(0, 10) : now.toISOString().substring(0,10)}\n                        disabled={!props.edit}\n                        className={classes.fullWidth}\n                        InputProps={getInputProps(null, classes, props)}\n                        InputLabelProps={{classes: {root: classes.labelRoot}, shrink: true}} \n                        onChange={props.onChange}\n            />\n    );\n}\n\nexport const ShippingField = (props) => {\n    const classes = useStyles();\n    return(\n        <TextField\n            id=\"customer-ship-to\"\n            label=\"Ship To\"\n            multiline\n            rows={4}\n            className={classes.fullWidth}\n            rowsMax={10}\n            value={(props.value) ? (props.value) : \"\"}\n            variant={(props.edit) ? \"outlined\" : \"standard\" }\n            InputProps={getInputProps(null, classes, props)}\n            InputLabelProps={{classes: {root: classes.labelRoot}, shrink: true}} \n            disabled={!props.edit}\n            onChange={props.onChange}\n        /> \n    );\n}\n\nexport const ToField = (props) => {\n    const classes = useStyles();\n\n    return(\n        <TextField\n            id=\"customer-to\"\n            label=\"To\"\n            value={(props.value) ? (props.value) : \"\"}\n            multiline\n            className={classes.fullWidth}\n            rows={4}\n            rowsMax={10}\n            variant={(props.edit) ? \"outlined\" : \"standard\" }\n            InputProps={getInputProps(null, classes, props)}\n            InputLabelProps={{classes: {root: classes.labelRoot}, shrink: true}} \n            disabled={!props.edit}\n            onChange={props.onChange}\n        />\n    );\n}\n\n\nexport const IdentifierField = (props) => {\n    const classes = useStyles();\n    let InProps = {\n        classes:{root: classes.identifierRoot}\n    }\n    if(!props.allowEdit)\n    {\n        InProps.readOnly = true;\n    }\n\n    return(\n        <TextField\n                error={!props.value}\n                variant={(props.edit) ? \"outlined\" : \"standard\" }\n                helperText={(!props.value) ? props.label + \" Required\" : \"\"}\n                label={props.label}\n                value={(props.value) ? props.value : \"\"}\n                InputProps={InProps}\n                fullWidth\n                onChange={props.onChange}\n                InputLabelProps={{\n                    classes: {\n                        root: classes.labelIdRoot,\n                        focused: classes.labelFocused\n                    },\n                    shrink: true\n                }}\n                    />\n\n    );\n}\n\n\nexport const MeshField  = (props) => {\n    const classes = useStyles();\n    return(\n        <TextField\n                label=\"Mesh\"\n                value={(props.value) ? (props.value) : \" \"}\n                variant={(props.edit) ? \"outlined\" : \"standard\" }\n                InputProps={getInputProps(null, classes, props)}\n                InputLabelProps={{classes: {root: classes.labelRoot}, shrink: true}} \n                className={classes.fullWidth}\n                disabled={!props.edit}\n                onChange={props.onChange}\n                />\n    );\n}\n\n\nexport const BluetoothField = (props) => {\n    const classes = useStyles();\n    return(\n        <TextField  label=\"BlueTooth\"\n                    variant={(props.edit) ? \"outlined\" : \"standard\" }\n                    value={(props.value) ? props.value : \"\"}\n                    InputProps={getInputProps(null, classes, props)}\n                    InputLabelProps={{classes: {root: classes.labelRoot}, shrink: true}} \n                    className={classes.fullWidth}\n                    disabled={!props.edit}\n                    onChange={props.onChange}\n            />\n    );\n}\n\n\nexport const VersionField = (props) => {\n    const classes = useStyles();\n    return(\n        <TextField      label=\"Version\"\n                        variant={(props.edit) ? \"outlined\" : \"standard\" }\n                        value={(props.value) ? props.value : \"\"}\n                        InputProps={getInputProps(null, classes, props)}\n                        InputLabelProps={{classes: {root: classes.labelRoot},shrink: true}} \n                        className={classes.fullWidth}\n                        disabled={!props.edit}\n                        onChange={props.onChange}\n                />\n    );\n}\nexport const NoteField = (props) => {\n    const classes = useStyles();\n    return(\n        <TextField  label=\"Notes\"\n                    value={(props.value) ? props.value : \"\"}\n                    variant={(props.edit) ? \"outlined\" : \"standard\" }\n                    onChange={props.onChange}\n                    multiline\n                    rows={(props.rows) ? props.rows : 4}\n                    rowsMax={(props.rowsMax) ? props.rowsMax : 10}\n                    InputProps={getInputProps(null, classes, props)}\n                    InputLabelProps={{classes: {root: classes.labelRoot}, shrink: true}}\n        />\n    );\n}\n\nexport const GeneralField = (props) => {\n    const classes = useStyles();\n    return(\n            <TextField  label={props.label}\n                        InputProps={getInputProps(null, classes, props)}\n                        InputLabelProps={{classes: {root: classes.labelRoot},shrink: true}} \n                        value={props.value}\n                        variant={(props.edit) ? \"outlined\" : \"standard\" }\n                        onChange={props.onChange}\n            />\n    );\n}\n\nexport const QuantityField = (props) => {\n    const classes = useStyles();\n    return(\n        <TextField\n                            InputProps={{classes: {root: classes.textFieldRoot}, inputProps:{min:0},disableUnderline: !props.edit,}}\n                            InputLabelProps={{classes: {root: classes.labelRoot}, shrink: true}} \n                            value={props.value}\n                            onChange={props.onChange}\n                            id=\"Quantity\"\n                            label=\"Quantity\"\n                            type=\"number\"\n                            variant={(props.edit) ? \"outlined\" : \"standard\" }\n                        />\n    );\n}\n\n\nexport const SerialField = (props) => {\n    const classes = useStyles();\n    return(\n        <Autocomplete id=\"serial\"\n            options={props.serials}\n            getOptionLabel={(option) => String(option.serialNumber)}\n            onChange={props.onChange}\n            value={props.value}\n            freeSolo\n            renderInput={(params) => <TextField label=\"Serial Number\"\n                                                 variant={(props.edit) ? \"outlined\" : \"standard\" }\n                                                {...params}\n                                                InputProps={getInputProps(params, classes, props)}\n                                                InputLabelProps={{\n                                                    ...params.InputLabelProps,\n                                                   classes: {root: classes.labelRoot},\n                                                   shrink: true \n                                                }}\n                                                />}\n                    />\n    );\n}\n\nexport const OrderField = (props) => {\n    const classes = useStyles();\n    return(\n        <Autocomplete id=\"order\"\n            options={props.orders}\n            getOptionLabel={(option) => (option.orderNumber) ? String(option.orderNumber) : \"\"}\n            onChange={props.onChange}\n            value={(props.value) ? (props.value) : {orderNumber: null}}\n            disabled={!props.edit}\n            freeSolo\n            renderInput={(params) => <TextField label=\"Order Number\"\n                                                variant={(props.edit) ? \"outlined\" : \"standard\" }\n                                                {...params}\n                                                InputProps={getInputProps(params, classes, props)}\n                                                InputLabelProps={{\n                                                    ...params.InputLabelProps,\n                                                   classes: {root: classes.labelRoot}, \n                                                   shrink: true,\n                                                }}\n                                                />}\n                    />\n    );\n}\n\nexport const RMAField = (props) => {\n    const classes = useStyles();\n    return(\n        <Autocomplete id=\"rma\"\n            options={props.rmas}\n            getOptionLabel={(option) => (option.RMANumber) ? String(option.RMANumber) : \"\"}\n            onChange={props.onChange}\n            value={(props.value) ? (props.value) : {RMANumber: null}}\n            disabled={!props.edit}\n            freeSolo\n            renderInput={ (params) => <TextField label=\"RMA Number\"\n                                                variant={(props.edit) ? \"outlined\" : \"standard\" }\n                                                {...params}\n                                                InputProps={getInputProps(params, classes, props)} \n                                                InputLabelProps={{\n                                                    ...params.InputLabelProps,\n                                                   classes: {root: classes.labelRoot}, \n                                                   shrink: true\n                                                }}\n                                        />\n\n            }\n        />\n    );\n}\n\n\nexport const TrackingNumberField = (props) => {\n    const classes = useStyles();\n    return(\n            <TextField  label=\"Tracking Number\"\n                        InputProps={getInputProps(null, classes, props)}\n                        InputLabelProps={{classes: {root: classes.labelRoot}, shrink: true}} \n                        value={(props.value) ? props.value: \"\"}\n                        variant={(props.edit) ? \"outlined\" : \"standard\" }\n                        onChange={props.onChange}\n                        disabled={!props.edit}\n            />\n    );\n}\n\nexport const POField = (props) => {\n    const classes = useStyles();\n    return(\n            <TextField  label=\"PO Number\"\n                        InputProps={getInputProps(null, classes, props)}\n                        InputLabelProps={{classes: {root: classes.labelRoot}, shrink: true}} \n                        value={(props.value) ? props.value : \" \"}\n                        variant={(props.edit) ? \"outlined\" : \"standard\" }\n                        onChange={props.onChange}\n                        disabled={!props.edit}\n            />\n    );\n}\n\nexport const ShippingServiceField = (props) => {\n    const classes = useStyles();\n    return(\n        <Autocomplete id=\"shipping\"\n        options={props.options}\n        getOptionLabel={(option) => option}\n        onChange={props.onChange}\n        value={(props.value) ? (props.value) : \"\"}\n        disabled={!props.edit}\n        freeSolo\n        renderInput={ (params) => <TextField label=\"Shipping Service\"\n                                            variant={(props.edit) ? \"outlined\" : \"standard\" }\n                                            {...params}\n                                            InputProps={getInputProps(params, classes, props)} \n                                            InputLabelProps={{\n                                                ...params.InputLabelProps,\n                                               classes: {root: classes.labelRoot}, \n                                               shrink: true\n                                            }}\n                                    />\n\n        }\n        />\n    );\n}\n\n\n\nexport const BoxNumberField = (props) => {\n    const classes = useStyles();\n\n    return(\n\n         <TextField label=\"Box Number\"\n                    InputProps={getInputProps(null, classes, props)}\n                    InputLabelProps={{classes: {root: classes.labelRoot}, shrink: true}} \n                    value={props.value}\n                    variant={\"standard\" }\n                    disabled={true}\n        />\n    );\n}\n\n\nexport const MultipleSerials = (props) => {\n\n    return (\n        <>\n            <InputLabel id=\"demo-mutiple-name-label\">{props.label}</InputLabel>\n            <Select\n                labelId=\"mutiple-serial-label\"\n                id=\"mutiple-name-serial\"\n                multiple\n                input={<Input />}\n                value={[]}\n                >\n                {props.serials.map((serial) => (\n                    <MenuItem key={serial} value={serial}>\n                        {serial}\n                    </MenuItem>\n                ))}\n            </Select>\n        </>\n    );\n}","import Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { makeStyles, Tab} from \"@material-ui/core\";\nimport Collapse from '@material-ui/core/Collapse';\nimport Box from \"@material-ui/core/Box\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\nimport React from 'react';\n\nconst useStyles = makeStyles({\n  root: {\n    width: '100%',\n  },\n  container: {\n    overflowX: \"hidden\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    width: \"100%\",\n    alignSelf: \"center\",\n    height: \"auto\",\n    overflowY:\"hidden\",\n  },\n\n  repairTable: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    width: \"100%\",\n    alignSelf: \"left\",\n    height:\"100%\",\n    overflowY: \"hidden\",\n    marginBottom: 15\n  },\n  tableHead: {\n    backgroundColor: \"#36435c\",\n    color: \"white\"\n  },\n  repairHead: {\n    backgroundColor: \t\"#1769aa\",\n    color: \"white\",\n  },\n  \n  expandedElement : {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"flex-start\",\n    maxHeight: 600,\n    overflowY: \"scroll\",\n    gap: 5,\n    margin: \"5px 15px 20px 15px\",\n  },\n  row: {\n    '& > *': {\n      borderBottom: 'unset',\n    }, \n  }\n});\n\nexport const CollapseRow = (props) => {\n\n    const classes = useStyles();\n    const [open, setOpen] = React.useState(false);\n\n    return(\n      <React.Fragment>\n        <TableRow className={classes.row}>\n            {\n                props.items.map((item, i) => <TableCell key={i} align={(i === 0) ? \"left\" : \"center\"}>{item}</TableCell>)\n            }\n            <TableCell>\n                <IconButton aria-label=\"expand row\"  size=\"small\" onClick={() => setOpen(!open)}>\n                    { open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n                </IconButton>\n            </TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell colSpan={props.items.length + 1} align=\"center\" style={{padding: \"0px 0px 0px 0px\"}}>\n              <Collapse in={open} timeout=\"auto\" unmountOnExit>\n                <Box className={classes.expandedElement}>\n                  {\n                    props.subItems\n                  }\n                </Box>\n              </Collapse>\n          </TableCell>\n      </TableRow>\n    </React.Fragment>\n    \n    );\n}\n\n\n\nexport const Row = (props) => {\n    const classes = useStyles();\n    return(\n        <TableRow>\n            {\n                props.items.map((item, i) =><TableCell key={i} align={(i === 0) ? \"left\" : \"center\"}>{item}</TableCell>)\n            }\n        </TableRow>\n    );\n}\n\nexport const RepairTable = (props) => {\n  const classes = useStyles();\n  return(\n    <TableContainer className={classes.repairTable} component={Paper}>\n      <Table>\n        <TableBody>\n          {\n            props.rows\n          }\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n\nexport function GenTable(props){\n  const classes = useStyles();\n\n  return(\n    <TableContainer component={Paper} className={classes.container} elevation={2} >\n              <Table stickyHeader>\n                {props.children}\n              </Table>\n    </TableContainer>\n  );\n}\n\nexport function GenTableHead(props){\n  const classes = useStyles();\n  return(\n    <TableHead>\n      <TableRow>\n      {\n        React.Children.map( props.children, (item, i) => <TableCell key={i} align={(i === 0) ? \"left\" : \"center\"} className={classes.tableHead}>{item}</TableCell>)\n      }\n      </TableRow>\n  </TableHead>\n  );\n}\n\nexport function GenTableBody(props){\n  return(\n    <TableBody>\n      {props.children}\n    </TableBody>\n  );\n}\n\nexport function GenTableRow(props){\n\n  return(\n      <TableRow>\n      {\n          React.Children.map(props.children, (item, i) =><TableCell key={i} align={(i === 0) ? \"left\" : \"center\"}>{item}</TableCell>)\n      }\n      </TableRow>\n  );\n}\n\nconst TemplateTable = (props) => {\n    const classes = useStyles(); \n    return(\n          <TableContainer component={Paper} className={classes.container} elevation={2}>\n              <Table stickyHeader>\n                <TableHead>\n                  <TableRow>\n                  {\n                    props.tableHead.map( (item, i) => <TableCell key={i} align={(i === 0) ? \"left\" : \"center\"} className={classes.tableHead}><b>{item}</b></TableCell>)\n                  }\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {\n                    props.rows\n                  }\n                </TableBody>\n              </Table>\n          </TableContainer>\n    );\n}\n\n\nexport default TemplateTable;","import React from 'react';\nimport {makeStyles} from \"@material-ui/core\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport {NewButton} from \"./Buttons\";\nimport {Title} from \"../Text\";\n\n \nconst useStyles = makeStyles(() => ({\n    search : {\n        flexGrow : 1,\n        display: \"flex\",\n        flexDirection: \"row\",\n        width: \"100%\",\n        height: \"auto\",\n        borderBottom: \"1px solid #E0E0E0\",\n        paddingBottom: 20,\n        marginBottom: 15,\n      },\n      searchBarContainer: {\n        display:\"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        gap: 3,\n        marginTop: 15,\n      },\n      in:{\n        fontSize: 20,\n      }\n}));\n\n\nconst SearchInput = (props) => {\n\n    \n    return(\n        <Autocomplete\n          id=\"combo-box-demo\"\n          onChange={props.onChange}\n          options={props.options}\n          ListboxProps={{ style: { maxHeight: \"25rem\" }}}\n          style={{width: \"100%\", alignSelf:\"center\", }}\n          getOptionLabel={props.getOptionLabel}\n          renderInput={(params) => <TextField \n                                            {...params}  \n                                            variant=\"outlined\"\n                                            InputProps={{...params.InputProps, classes: {root: props.className}}}\n                                          \n                                    />}\n          />\n    );\n};\n\n\nexport  const SearchBar = (props) => {\n    const classes = useStyles();\n    return(\n        <div className={classes.search}>\n                  <Title variant=\"h5\">\n                    {props.label}\n                    <div className={classes.searchBarContainer}>\n                      <SearchInput className={classes.in} onChange={props.onChange} options={props.options} getOptionLabel={props.getOptionLabel}/>\n                      {!props.noNew && <NewButton title=\"New\" onClick={props.newOrderFunction} />}\n                    </div>\n                  </Title>\n                  \n        </div>\n    )\n}","import React from 'react';\nimport { makeStyles} from \"@material-ui/core\";\nimport {EditButton} from \"../Common/Buttons\";\nimport Paper from \"@material-ui/core/Paper\";\nimport {SaveChangesButton} from \"../Common/Buttons\";\n\n\nconst useStyles = makeStyles(() => ({\n\n    rootConatiner: {\n        display: \"flex\",\n        flexDirection:\"column\",\n        gap: 10,\n        padding : \"10px 30px 30px 30px\",\n        borderRadius: 1,\n        marginTop: 15,\n    },\n\n    edit: {\n        display: \"flex\",\n        flexDirection: \"row-reverse\",\n    },\n    editButton:{ \n        fontSize: 10,\n        display:\"flex\",\n        flexDirection: \"column\",\n    },\n    content: {\n        gap: 20,\n        display: \"flex\",\n        flexFlow: \"wrap\",\n        position: \"relative\",\n        alignItems: \"center\",\n        maxWidth: 800,\n\n    },\n    item : {\n        display: \"flex\",\n        alignSelf:\"stretch\",\n        paddingTop: 7,\n        paddingBottom: 7,\n    },\n    id:{\n        width: \"100%\",\n        paddingBottom: 17,\n    }\n\n}));\n\nclass Head extends React.Component{\n\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            edit: false,\n            color: \"inherit\",\n        };\n    }\n\n    changeEdit = () => {\n        const color = (!this.state.edit) ? \"primary\" : \"inherit\";\n        this.setState({\n                        edit: !this.state.edit, \n                        color: color,\n        });\n    }\n\n\n    saveChanges = (event) => {\n        this.changeEdit();\n        this.props.updateHead(event);\n    }\n\n    render(){\n\n        const {classes} = this.props;\n        const {edit, color} = this.state;\n        \n\n        return(\n            <Paper className={classes.rootConatiner} elevation={2}>\n                {this.props.edit && \n                    <div className={classes.edit}>\n                        <EditButton onClick={this.changeEdit} className={classes.editButton} color={color} /> \n                    </div>\n                }\n                {\n                    !this.props.edit\n                    &&\n                    <div style={{paddingTop: 20}}></div>\n                }\n                <div className={classes.id}>{this.props.children[0]}</div>\n                <div className={classes.content}>\n                    {React.Children.map(this.props.children, (child, i) => {\n                                    if(i > 0){\n                                        let item;\n\n                                        if(child.props.noEdit)\n                                        {\n                                            item = React.cloneElement(child, {edit: false});\n                                        }\n                                        else if(this.props.edit)\n                                        {\n                                            item = React.cloneElement(child, {edit: this.state.edit});\n                                        }\n                                        else{\n                                            item = React.cloneElement(child, {edit: true});\n                                        }\n                                        return <div className={classes.item} key={i}>{item}</div>;\n                                    }\n                    })}\n                    \n                    <div style={{marginLeft: \"auto\", marginTop: 20,}}>{this.props.edit && this.props.change && <SaveChangesButton onClick={this.saveChanges} />}</div>\n                </div>\n            </Paper>\n        );\n    }\n}\n\nexport default function HeadDisplay(props){\n    const classes = useStyles();\n    return <Head classes={classes} {...props} />\n\n}","export const serialXML = \n`<DieCutLabel Version=\"8.0\" Units=\"twips\">\n<PaperOrientation>Landscape</PaperOrientation>\n<Id>Small30346</Id>\n<IsOutlined>false</IsOutlined>\n<PaperName>30346 1/2 in x 1-7/8 in</PaperName>\n<DrawCommands>\n    <RoundRectangle X=\"0\" Y=\"0\" Width=\"720\" Height=\"2700\" Rx=\"180\" Ry=\"180\"/>\n</DrawCommands>\n<ObjectInfo>\n    <BarcodeObject>\n        <Name>BARCODE</Name>\n        <ForeColor Alpha=\"255\" Red=\"0\" Green=\"0\" Blue=\"0\"/>\n        <BackColor Alpha=\"0\" Red=\"255\" Green=\"255\" Blue=\"255\"/>\n        <LinkedObjectName/>\n        <Rotation>Rotation0</Rotation>\n        <IsMirrored>False</IsMirrored>\n        <IsVariable>True</IsVariable>\n        <Text></Text>\n        <Type>Code39</Type>\n        <Size>Medium</Size>\n        <TextPosition>Bottom</TextPosition>\n        <TextFont Family=\"Arial\" Size=\"8\" Bold=\"False\" Italic=\"False\" Underline=\"False\" Strikeout=\"False\"/>\n        <CheckSumFont Family=\"Arial\" Size=\"8\" Bold=\"False\" Italic=\"False\" Underline=\"False\" Strikeout=\"False\"/>\n        <TextEmbedding>None</TextEmbedding>\n        <ECLevel>0</ECLevel>\n        <HorizontalAlignment>Center</HorizontalAlignment>\n        <QuietZonesPadding Left=\"0\" Top=\"0\" Right=\"0\" Bottom=\"0\"/>\n    </BarcodeObject>\n    <Bounds X=\"326\" Y=\"57\" Width=\"2080\" Height=\"581\"/>\n</ObjectInfo>\n</DieCutLabel>\n`;\n\n\nexport const serialMeshXML = (mesh) =>{\n\n    return(\n`<DieCutLabel Version=\"8.0\" Units=\"twips\">\n\t<PaperOrientation>Landscape</PaperOrientation>\n\t<Id>Small30346</Id>\n\t<IsOutlined>false</IsOutlined>\n\t<PaperName>30346 1/2 in x 1-7/8 in</PaperName>\n\t<DrawCommands>\n\t\t<RoundRectangle X=\"0\" Y=\"0\" Width=\"720\" Height=\"2700\" Rx=\"180\" Ry=\"180\"/>\n\t</DrawCommands>\n\t<ObjectInfo>\n\t\t<TextObject>\n\t\t\t<Name>MESH_TEXT</Name>\n\t\t\t<ForeColor Alpha=\"255\" Red=\"0\" Green=\"0\" Blue=\"0\"/>\n\t\t\t<BackColor Alpha=\"0\" Red=\"255\" Green=\"255\" Blue=\"255\"/>\n\t\t\t<LinkedObjectName/>\n\t\t\t<Rotation>Rotation0</Rotation>\n\t\t\t<IsMirrored>False</IsMirrored>\n\t\t\t<IsVariable>True</IsVariable>\n\t\t\t<HorizontalAlignment>Right</HorizontalAlignment>\n\t\t\t<VerticalAlignment>Middle</VerticalAlignment>\n\t\t\t<TextFitMode>None</TextFitMode>\n\t\t\t<UseFullFontHeight>True</UseFullFontHeight>\n\t\t\t<Verticalized>False</Verticalized>\n\t\t\t<StyledText>\n\t\t\t\t<Element>\n\t\t\t\t\t<String xml:space=\"preserve\">Mesh:</String>\n\t\t\t\t\t<Attributes>\n\t\t\t\t\t\t<Font Family=\"Arial\" Size=\"8\" Bold=\"False\" Italic=\"False\" Underline=\"False\" Strikeout=\"False\"/>\n\t\t\t\t\t\t<ForeColor Alpha=\"255\" Red=\"0\" Green=\"0\" Blue=\"0\" HueScale=\"100\"/>\n\t\t\t\t\t</Attributes>\n\t\t\t\t</Element>\n\t\t\t</StyledText>\n\t\t</TextObject>\n\t\t<Bounds X=\"326\" Y=\"236.535401943511\" Width=\"460\" Height=\"251.464598056489\"/>\n\t</ObjectInfo>\n\t<ObjectInfo>\n\t\t<TextObject>\n\t\t\t<Name>MESH_FIELD</Name>\n\t\t\t<ForeColor Alpha=\"255\" Red=\"0\" Green=\"0\" Blue=\"0\"/>\n\t\t\t<BackColor Alpha=\"0\" Red=\"255\" Green=\"255\" Blue=\"255\"/>\n\t\t\t<LinkedObjectName/>\n\t\t\t<Rotation>Rotation0</Rotation>\n\t\t\t<IsMirrored>False</IsMirrored>\n\t\t\t<IsVariable>True</IsVariable>\n\t\t\t<HorizontalAlignment>Left</HorizontalAlignment>\n\t\t\t<VerticalAlignment>Middle</VerticalAlignment>\n\t\t\t<TextFitMode>None</TextFitMode>\n\t\t\t<UseFullFontHeight>True</UseFullFontHeight>\n\t\t\t<Verticalized>False</Verticalized>\n\t\t\t<StyledText>\n\t\t\t\t<Element>\n\t\t\t\t\t<String xml:space=\"preserve\">${mesh}</String>\n\t\t\t\t\t<Attributes>\n\t\t\t\t\t\t<Font Family=\"Arial\" Size=\"8\" Bold=\"False\" Italic=\"False\" Underline=\"False\" Strikeout=\"False\"/>\n\t\t\t\t\t\t<ForeColor Alpha=\"255\" Red=\"0\" Green=\"0\" Blue=\"0\" HueScale=\"100\"/>\n\t\t\t\t\t</Attributes>\n\t\t\t\t</Element>\n\t\t\t</StyledText>\n\t\t</TextObject>\n\t\t<Bounds X=\"896\" Y=\"236.535401943511\" Width=\"1720\" Height=\"251\"/>\n\t</ObjectInfo>\n</DieCutLabel>\n`);\n};\n\n\nexport const serialBluetoothMeshXML = (mesh, bluetooth) => {\n\treturn `\n\t\t\n<DieCutLabel>\n<PaperOrientation>Landscape</PaperOrientation>\n<Id>Small30346</Id>\n<IsOutlined>false</IsOutlined>\n<PaperName>30346 1/2 in x 1-7/8 in</PaperName>\n<DrawCommands>\n\t<RoundRectangle X=\"0\" Y=\"0\" Width=\"720\" Height=\"2700\" Rx=\"180\" Ry=\"180\"/>\n</DrawCommands>\n<ObjectInfo>\n\t<TextObject>\n\t\t<Name>TEXT</Name>\n\t\t<ForeColor Alpha=\"255\" Red=\"0\" Green=\"0\" Blue=\"0\"/>\n\t\t<BackColor Alpha=\"0\" Red=\"255\" Green=\"255\" Blue=\"255\"/>\n\t\t<LinkedObjectName/>\n\t\t<Rotation>Rotation0</Rotation>\n\t\t<IsMirrored>False</IsMirrored>\n\t\t<IsVariable>True</IsVariable>\n\t\t<HorizontalAlignment>Left</HorizontalAlignment>\n\t\t<VerticalAlignment>Middle</VerticalAlignment>\n\t\t<TextFitMode>None</TextFitMode>\n\t\t<UseFullFontHeight>True</UseFullFontHeight>\n\t\t<Verticalized>False</Verticalized>\n\t\t<StyledText>\n\t\t\t<Element>\n\t\t\t\t<String xml:space=\"preserve\">Mesh</String>\n\t\t\t\t<Attributes>\n\t\t\t\t\t<Font Family=\"Arial\" Size=\"8\" Bold=\"False\" Italic=\"False\" Underline=\"False\" Strikeout=\"False\"/>\n\t\t\t\t\t<ForeColor Alpha=\"255\" Red=\"0\" Green=\"0\" Blue=\"0\" HueScale=\"100\"/>\n\t\t\t\t</Attributes>\n\t\t\t</Element>\n\t\t</StyledText>\n\t</TextObject>\n\t<Bounds X=\"326\" Y=\"121.767700971755\" Width=\"580\" Height=\"251.464598056489\"/>\n</ObjectInfo>\n<ObjectInfo>\n\t<TextObject>\n\t\t<Name>TEXT_1</Name>\n\t\t<ForeColor Alpha=\"255\" Red=\"0\" Green=\"0\" Blue=\"0\"/>\n\t\t<BackColor Alpha=\"0\" Red=\"255\" Green=\"255\" Blue=\"255\"/>\n\t\t<LinkedObjectName/>\n\t\t<Rotation>Rotation0</Rotation>\n\t\t<IsMirrored>False</IsMirrored>\n\t\t<IsVariable>True</IsVariable>\n\t\t<HorizontalAlignment>Center</HorizontalAlignment>\n\t\t<VerticalAlignment>Middle</VerticalAlignment>\n\t\t<TextFitMode>None</TextFitMode>\n\t\t<UseFullFontHeight>True</UseFullFontHeight>\n\t\t<Verticalized>False</Verticalized>\n\t\t<StyledText>\n\t\t\t<Element>\n\t\t\t\t<String xml:space=\"preserve\">BT</String>\n\t\t\t\t<Attributes>\n\t\t\t\t\t<Font Family=\"Arial\" Size=\"8\" Bold=\"False\" Italic=\"False\" Underline=\"False\" Strikeout=\"False\"/>\n\t\t\t\t\t<ForeColor Alpha=\"255\" Red=\"0\" Green=\"0\" Blue=\"0\" HueScale=\"100\"/>\n\t\t\t\t</Attributes>\n\t\t\t</Element>\n\t\t</StyledText>\n\t</TextObject>\n\t<Bounds X=\"326\" Y=\"386.535401943511\" Width=\"475\" Height=\"251.464598056489\"/>\n</ObjectInfo>\n<ObjectInfo>\n\t<TextObject>\n\t\t<Name>TEXT_2</Name>\n\t\t<ForeColor Alpha=\"255\" Red=\"0\" Green=\"0\" Blue=\"0\"/>\n\t\t<BackColor Alpha=\"0\" Red=\"255\" Green=\"255\" Blue=\"255\"/>\n\t\t<LinkedObjectName/>\n\t\t<Rotation>Rotation0</Rotation>\n\t\t<IsMirrored>False</IsMirrored>\n\t\t<IsVariable>False</IsVariable>\n\t\t<HorizontalAlignment>Left</HorizontalAlignment>\n\t\t<VerticalAlignment>Top</VerticalAlignment>\n\t\t<TextFitMode>None</TextFitMode>\n\t\t<UseFullFontHeight>True</UseFullFontHeight>\n\t\t<Verticalized>False</Verticalized>\n\t\t<StyledText>\n\t\t\t<Element>\n\t\t\t\t<String xml:space=\"preserve\">${mesh}</String>\n\t\t\t\t<Attributes>\n\t\t\t\t\t<Font Family=\"Arial\" Size=\"8\" Bold=\"False\" Italic=\"False\" Underline=\"False\" Strikeout=\"False\"/>\n\t\t\t\t\t<ForeColor Alpha=\"255\" Red=\"0\" Green=\"0\" Blue=\"0\" HueScale=\"100\"/>\n\t\t\t\t</Attributes>\n\t\t\t</Element>\n\t\t</StyledText>\n\t</TextObject>\n\t<Bounds X=\"801\" Y=\"147\" Width=\"1815\" Height=\"251\"/>\n</ObjectInfo>\n<ObjectInfo>\n\t<TextObject>\n\t\t<Name>TEXT__1</Name>\n\t\t<ForeColor Alpha=\"255\" Red=\"0\" Green=\"0\" Blue=\"0\"/>\n\t\t<BackColor Alpha=\"0\" Red=\"255\" Green=\"255\" Blue=\"255\"/>\n\t\t<LinkedObjectName/>\n\t\t<Rotation>Rotation0</Rotation>\n\t\t<IsMirrored>False</IsMirrored>\n\t\t<IsVariable>False</IsVariable>\n\t\t<HorizontalAlignment>Left</HorizontalAlignment>\n\t\t<VerticalAlignment>Top</VerticalAlignment>\n\t\t<TextFitMode>None</TextFitMode>\n\t\t<UseFullFontHeight>True</UseFullFontHeight>\n\t\t<Verticalized>False</Verticalized>\n\t\t<StyledText>\n\t\t\t<Element>\n\t\t\t\t<String xml:space=\"preserve\">${bluetooth}</String>\n\t\t\t\t<Attributes>\n\t\t\t\t\t<Font Family=\"Arial\" Size=\"8\" Bold=\"False\" Italic=\"False\" Underline=\"False\" Strikeout=\"False\"/>\n\t\t\t\t\t<ForeColor Alpha=\"255\" Red=\"0\" Green=\"0\" Blue=\"0\" HueScale=\"100\"/>\n\t\t\t\t</Attributes>\n\t\t\t</Element>\n\t\t</StyledText>\n\t</TextObject>\n\t<Bounds X=\"801\" Y=\"417\" Width=\"1690\" Height=\"206\"/>\n</ObjectInfo>\n</DieCutLabel>\n\t`;\n}\n\n\n\nexport function getDymoPrinter(dymo)\n{\n    const printers = dymo.label.framework.getPrinters();\n    let printerName;\n\n    if(printers.length === 0)\n    {\n        return null;\n    }\n\n    for (let i = 0; i < printers.length; ++i)\n    {\n        let printer = printers[i];\n        if (printer.printerType == \"LabelWriterPrinter\")\n        {\n            return printerName = printer.name;\n            \n        }\n    }\n\n    return null;\n}\n\n\nexport function getDymoLabel(dymo, labelName)\n{\n    const label = dymo.label.framework.openLabelXml(labelName);\n\n    if(!label)\n    {\n        return null;\n    }\n\n    return label;\n}","import React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport Button from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core\";\nimport { Title } from '../Text';\nimport {Message} from \"../Common/Message\"\nimport {    ProductField, \n            CustomerField, \n            NumberField, \n            QuantityField,\n            RMAField,\n            OrderField,\n            MultipleSerials,\n        } from \"../Common/Fields\";\n\nconst useStyles = makeStyles(() => ({\n    root : {\n        display: \"flex\",\n        flexDirection: \"column\",\n        padding: 20,\n        marginTop: 15,\n        gap: 15,\n    },\n\n    childFlex : {\n        display:\"flex\",\n        gap: 15\n    },\n    button : {\n        alignSelf: \"flex-start\"\n    }\n}));\n\nclass New_Serial extends React.Component{\n\n    constructor(props){\n        super(props);\n        this.state = {\n            quantity: null,\n            product: null,\n            customer: null,\n            order: null,\n            rma: null,\n            error: null,\n            updated: null,\n        };\n    }\n\n    setQuantity = (event) =>{ \n        this.setState({quantity: parseInt(event.target.value)});\n    }\n\n    setCustomer = (event, customer) => {\n        this.setState({customer: customer});\n    }\n\n    setProduct = (event, product) => {\n        this.setState({product: product});\n    }\n    \n    setOrder = (event, order) => {\n        this.setState({order: order});\n    }\n\n    setRMA = (event, rma) => {\n        this.setState({rma: rma});\n    }\n    createSerials = () => {\n        const {quantity, product, order, rma,customer } = this.state;\n\n        if(quantity && customer && product)\n        {\n            const newSerial = { customerId: customer._id, \n                                quantity: quantity, \n                                productId: product.productId,\n                                RMANumber: (rma) ? rma.RMANumber : null,\n                                orderNumber: (order) ? order.orderNumber : null,\n                            };\n\n            const headers = {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify(newSerial),\n            };\n\n            fetch(\"/api/serials/create\", headers)\n                .then((res) => {\n                        if(res.ok){\n                            return res.json();\n                        }\n                        else{\n                            res.json().then((error) => this.setState({updated: {error: error.msg}}));\n                        }\n                })\n                .then((serials) => { \n                    this.setState({updated: true});\n\n                    serials.map((serial) => {\n                        serial.customer = customer;\n                        this.props.updateRoot(serial);\n                    });\n                    \n                })\n                .catch((error) => this.setState({updated : {error: error.toString()}}));\n        }\n        else{\n\n        }\n    }\n\n    render(){\n\n        const {quantity, product, order, rma,customer, updated} = this.state;\n        const {customers, products, classes, orders, rmas} = this.props;\n\n        return(\n            <div>\n                <Title>\n                    New Serials\n                </Title>\n                {updated && <Message error={updated.error} clear={() => this.setState({updated: null})}/>}\n                <Paper className={classes.root} elevation={1}>\n                    <div className={classes.childFlex}>\n                        <CustomerField customers={customers} value={customer} onChange={this.setCustomer} edit/>\n                        <ProductField products={products} value={product} onChange={this.setProduct} edit/>\n                    </div>\n                    <div className={classes.childFlex}>\n                        <OrderField edit orders={orders} value={order} onChange={this.setOrder}/>\n                        <RMAField   edit rmas={rmas} value={rma} onChange={this.setRMA}/>\n                    </div>\n                    <div className={classes.childFlex}>\n                        <QuantityField value={quantity} onChange={this.setQuantity}/>\n                    </div>\n                    <Button onClick={this.createSerials}className={classes.button} variant=\"contained\" color=\"primary\">\n                        Create    \n                    </Button>   \n                </Paper>\n            </div>\n        );\n    }\n}\n\nexport default function NewSerial(props){\n    const classes = useStyles();\n\n    return <New_Serial classes={classes} {...props} />\n}\n","import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\n// @inheritedComponent ButtonBase\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { fade, withStyles } from '@material-ui/core/styles';\nimport ButtonBase from '@material-ui/core/ButtonBase';\nimport { capitalize } from '@material-ui/core/utils';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: _extends({}, theme.typography.button, {\n      boxSizing: 'border-box',\n      borderRadius: theme.shape.borderRadius,\n      padding: 11,\n      border: \"1px solid \".concat(fade(theme.palette.action.active, 0.12)),\n      color: fade(theme.palette.action.active, 0.38),\n      '&$selected': {\n        color: theme.palette.action.active,\n        backgroundColor: fade(theme.palette.action.active, 0.12),\n        '&:hover': {\n          backgroundColor: fade(theme.palette.action.active, 0.15)\n        },\n        '& + &': {\n          borderLeft: 0,\n          marginLeft: 0\n        }\n      },\n      '&$disabled': {\n        color: fade(theme.palette.action.disabled, 0.12)\n      },\n      '&:hover': {\n        textDecoration: 'none',\n        // Reset on mouse devices\n        backgroundColor: fade(theme.palette.text.primary, 0.05),\n        '@media (hover: none)': {\n          backgroundColor: 'transparent'\n        },\n        '&$disabled': {\n          backgroundColor: 'transparent'\n        }\n      }\n    }),\n\n    /* Pseudo-class applied to the root element if `disabled={true}`. */\n    disabled: {},\n\n    /* Pseudo-class applied to the root element if `selected={true}`. */\n    selected: {},\n\n    /* Styles applied to the `label` wrapper element. */\n    label: {\n      width: '100%',\n      // Ensure the correct width for iOS Safari\n      display: 'inherit',\n      alignItems: 'inherit',\n      justifyContent: 'inherit'\n    },\n\n    /* Styles applied to the root element if `size=\"small\"`. */\n    sizeSmall: {\n      padding: 7,\n      fontSize: theme.typography.pxToRem(13)\n    },\n\n    /* Styles applied to the root element if `size=\"large\"`. */\n    sizeLarge: {\n      padding: 15,\n      fontSize: theme.typography.pxToRem(15)\n    }\n  };\n};\nvar ToggleButton = /*#__PURE__*/React.forwardRef(function ToggleButton(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      _props$disableFocusRi = props.disableFocusRipple,\n      disableFocusRipple = _props$disableFocusRi === void 0 ? false : _props$disableFocusRi,\n      onChange = props.onChange,\n      onClick = props.onClick,\n      selected = props.selected,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 'medium' : _props$size,\n      value = props.value,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"disabled\", \"disableFocusRipple\", \"onChange\", \"onClick\", \"selected\", \"size\", \"value\"]);\n\n  var handleChange = function handleChange(event) {\n    if (onClick) {\n      onClick(event, value);\n\n      if (event.isDefaultPrevented()) {\n        return;\n      }\n    }\n\n    if (onChange) {\n      onChange(event, value);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(ButtonBase, _extends({\n    className: clsx(classes.root, className, disabled && classes.disabled, selected && classes.selected, size !== 'medium' && classes[\"size\".concat(capitalize(size))]),\n    disabled: disabled,\n    focusRipple: !disableFocusRipple,\n    ref: ref,\n    onClick: handleChange,\n    onChange: onChange,\n    value: value,\n    \"aria-pressed\": selected\n  }, other), /*#__PURE__*/React.createElement(\"span\", {\n    className: classes.label\n  }, children));\n});\nprocess.env.NODE_ENV !== \"production\" ? ToggleButton.propTypes = {\n  /**\n   * The content of the button.\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the button will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the  keyboard focus ripple will be disabled.\n   */\n  disableFocusRipple: PropTypes.bool,\n\n  /**\n   * If `true`, the ripple effect will be disabled.\n   */\n  disableRipple: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * If `true`, the button will be rendered in an active state.\n   */\n  selected: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n\n  /**\n   * The value to associate with the button when selected in a\n   * ToggleButtonGroup.\n   */\n  value: PropTypes.any.isRequired\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiToggleButton'\n})(ToggleButton);","import React from 'react';\nimport Paper from \"@material-ui/core/Paper\";\nimport Button from \"@material-ui/core/Button\";\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\nimport {makeStyles} from \"@material-ui/core\";\nimport {RmaTestBox} from \"../Common/Buttons\";\nimport {NoteField, OrderField, RMAField} from \"../Common/Fields\";\nimport {Title} from \"../Text\";\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display : \"flex\",\n        flexDirection: \"column\",\n        padding:\"40px 20px 40px 20px\",\n        gap: 15,\n        borderTop: \"1px solid #E0E0E0\",\n        flexGrow: 1,\n    },\n    numberFields : {\n        display:\"flex\",\n        flexDirection: \"row\",\n        gap: 10,\n        height: \"100%\",\n    },\n    btnGroup:{\n        alignSelf: \"flex-start\",\n    },\n    test:{\n        color:  \"green\",\n    },\n    ship: {\n        color: \"blue\",\n    },\n    receive: {\n        color: \"purple\",\n    },\n}));\n\nclass Action extends React.Component{\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            action : \"\",\n            note: \"\",\n            orderNumber: null,\n            RMANumber: null,\n            passed: null,\n            buttonClicked: false,\n        }\n    }\n\n    onClick = (event, action) => {\n        this.setState({action: action});\n    }\n\n    setRma = (event, rma) => {\n        this.setState({RMANumber: (rma) ? rma.RMANumber : null});\n    }\n\n    setOrder = (event, order) => {\n\n        if(order && order.orderNumber){\n            this.setState({orderNumber: order.orderNumber });\n        }\n        else{\n            this.setState({orderNumber: order});\n        }\n    }\n    buttonClick = () => {\n        this.setState({buttonClicked: true});\n    }\n    setNote = (event) => {\n        this.setState({note: event.target.value});\n    }\n\n    setPassed = (i, value) => {\n        this.setState({passed: value});\n    }\n\n    addAction = () => {\n        const {action, note, orderNumber, RMANumber, passed} = this.state;\n\n        if(action){\n            this.props.addHistory({ \n                                    action: action, \n                                    note: note, \n                                    orderNumber: orderNumber, \n                                    RMANumber: RMANumber,\n                                    passed: passed,\n            });\n            this.setState({action: null, buttonClicked:false});\n        }\n    }\n\n    render()\n    {\n        const {classes} = this.props;\n        const {action, note, orderNumber, RMANumber, buttonClicked} = this.state;\n\n        return(\n            <div>\n            \n            { !buttonClicked && \n                <Button onClick={this.buttonClick} color=\"primary\">\n                    Add Action\n                </Button>\n            }{\n                buttonClicked &&\n                <Title variant=\"h5\">\n                    New Action\n                </Title>\n                    \n            }\n            { buttonClicked &&\n\n                <Paper className={classes.root} elevation={2}>\n                    <ToggleButtonGroup variant=\"outlined\" className={classes.btnGroup} exclusive value={action} onChange={this.onClick}>\n                        <ToggleButton className={classes.test} value=\"Tested\">\n                            Test\n                        </ToggleButton>\n                        <ToggleButton className={classes.ship} value=\"Shipped\">\n                            Ship\n                        </ToggleButton>\n                        <ToggleButton className={classes.receive} value=\"RMA\">\n                            RMA\n                        </ToggleButton>\n                    </ToggleButtonGroup>              \n                    <div className={classes.numberFields}>\n                            <OrderField edit orders={this.props.orders} value={{orderNumber: orderNumber}} onChange={this.setOrder}/>\n                            <RMAField edit rmas={this.props.rmas} value={{RMANumber: RMANumber}} onChange={this.setRma}/>\n                    </div>\n                {action === \"Tested\" && <RmaTestBox onChange={this.setPassed} i={0} />}\n                <NoteField edit rows={1} rowMax={1} value={note} onChange={this.setNote} /> \n                <Button variant=\"contained\" className={classes.btnGroup} color=\"primary\" onClick={this.addAction}>\n                    Submit\n                </Button>\n\n            </Paper>\n            }\n        </div>\n        );\n    }\n\n\n}\n\nexport default function NewAction(props){\n    const classes = useStyles();\n    return <Action classes={classes} {...props} />;\n}\n\n\n","\nimport React from \"react\";\nimport {Title} from \"../Text\";\nimport {SearchBar} from \"../Common/Search\";\nimport {Recent, RecentItem} from \"../Common/Recent\";\nimport {Display, DisplayItem} from \"../Common/Display\";\nimport NewSerial from \"./NewSerial\";\nimport HeadDisplay from \"../Common/HeadDisplay\";\nimport {Message} from \"../Common/Message\";\nimport NewAction from \"./NewAction\";\nimport {\n    IdentifierField,\n    MeshField,\n    CustomerField,\n    BluetoothField,\n    ProductField,\n    VersionField,\n\n} from \"../Common/Fields\";\nimport {GenTable, GenTableBody, GenTableHead, Row} from \"../Common/TemplateTable\";\n\nimport Typography from \"@material-ui/core/Typography\";\nimport Box from \"@material-ui/core/Box\";\nimport Button from \"@material-ui/core/Button\";\nimport {serialXML, serialMeshXML, serialBluetoothMeshXML,getDymoLabel, getDymoPrinter} from \"./SerialDymoXML\";\n\n\n\nconst dateString = (date) => {\n    let month = '' + (date.getMonth() + 1);\n    let day = '' + date.getDate();\n    let year = date.getFullYear();\n\n    return month + \"-\" + day + \"-\" + year;\n}\n\nexport default class SerialDisplay extends React.Component{\n\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            serial: null,\n            data : null,\n            newSerial: false,\n            recentSerials: null,\n            message:null,\n            change: false,\n            err: null,\n        };\n    }\n\n    componentDidMount(){\n        \n        const  state = this.props.location.state;\n\n        if(!state) //did the router render component with a state?\n        {\n          this.fetchRecent();\n        }\n        else if(state.serialNumber) //check if the router passed a prop to the newly rendered component\n        {\n          this.fetchSerial(state.serialNumber);\n        }\n\n    }\n\n    printSerial = () =>{\n\n        const dymo = window.dymo;\n\n        const printerName = getDymoPrinter(dymo);\n\n        if(!printerName)\n        {\n            this.setState({message: {error: true,\n                                    text: \"No Printer Found\"}});\n            return;\n        }\n\n        const label = getDymoLabel(dymo, serialXML);\n\n        if(!label)\n        {\n            this.setState({message: {error: true,\n                                    text: \"Could not create label\"}});\n            return;\n        }\n\n        label.setObjectText(\"BARCODE\", this.state.serial.serialNumber);\n        label.print(printerName);\n    }\n\n    printSerialDetails = () => {\n\n        const mesh = this.state.serial.mesh;\n        const bluetooth = this.state.serial.bluetooth;\n        const dymo = window.dymo;\n        const printerName = getDymoPrinter(dymo);\n\n        if(!printerName)\n        {\n            this.setState({message: {error: true,\n                                     text: \"No Printer Found\",\n                                    }});\n            return;\n        }\n        if(mesh && bluetooth)\n        {\n            const label = getDymoLabel(dymo, serialBluetoothMeshXML(mesh));\n\n            if(!label)\n            {\n                this.setState({message: {\n                                        error: true,\n                                        text:  \"Could not create label\",}\n                               });\n                return;\n            }\n            label.print(printerName);\n        }\n        else if(mesh)\n        {\n            const label = getDymoLabel(dymo, serialMeshXML(mesh));\n\n            if(!label)\n            {\n                this.setState({message: {\n                                            error: true,\n                                            text: \"Could not create label\",\n                                }});\n                return;\n            }\n            label.print(printerName);\n        }\n        else{\n            this.setState({message: {\n                                        error: true,\n                                        text: \"No mesh or bluetooth set\",\n                                    }});\n        }\n    }\n\n    historyToRows(serialHistory){\n        \n        const items = serialHistory.map((entry) => {\n                                            if(entry.action === \"Tested\"){\n                                                entry.action = <div style={{color: \"green\"}}>{entry.action}</div>\n                                            }\n                                            else if( entry.action === \"Shipped\")\n                                            {\n                                                entry.action = <div style={{color: \"blue\"}}>{entry.action}</div>\n                                            }\n                                            else if( entry.action === \"RMA\"){\n                                                entry.action = <div style={{color: \"purple\"}}>{entry.action}</div>\n                                            }\n                                            return <Row items={[   entry.action, \n                                                        dateString( new Date(entry.date)), \n                                                        entry.author,\n                                                        entry.RMANumber,\n                                                        entry.orderNumber,\n                                                        entry.note,\n                                                    ]}/>;\n                                        });                        \n        return items;\n\n    }\n\n    addHistory = (action) => {\n\n        const headers = {\n            method: 'PUT',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(action),\n        };\n\n        fetch(\"/api/serials/addHistory/\" + this.state.serial.serialNumber, headers)\n            .then((res) => {\n                    if(res.ok){\n                        return res.json();\n                    }\n                    else{\n                        res.json().then((error) => this.setState({message: {error: true, text:  error.message}}));\n                    }\n             })\n            .then((res) =>{\n                if(res)\n                {\n                    this.setState((prevstate) => \n                    ({serial: {...prevstate.serial, history: res.history}, message: {error: false, text: \"Successfully added to history\"}}));\n                }\n            })\n            .catch((err) => this.setState({message: {error: true, text: err.message}}));\n    }\n\n    updateHead = (event) => {\n\n        const serial = this.state.serial;\n\n        const serialObj = {\n            customerId: serial.customer._id,\n            productId: serial.product.productId,\n            version: serial.version,\n            bluetooth: serial.bluetooth,\n            mesh: serial.mesh,\n        }\n\n        const headers = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(serialObj),\n        };\n\n        fetch(\"/api/serials/update/\" + this.state.serial._id, headers)\n            .then( (res) => {\n                if(res.ok)\n                {\n                    return res.json();\n                }\n                else{\n                    res.json().then((err) => this.setState({message: {  error : true,\n                                                                        text: err.message\n                                                            }}));\n                }\n            })\n            .then((res) => {\n                if(res){\n                    this.setState({message: {error: false, text: \"Successfuly updated serial\"}, change: false});\n                }\n            })\n            .catch((err) => {\n                this.setState({message: {error: true,\n                                        text: err.message}});\n            });\n        \n    }\n\n    fetchSerial = async(serialNumber) => {\n\n        fetch(\"/api/serials/\" + serialNumber)\n            .then((res) => {    \n                    if(res.ok)\n                    {\n                        return res.json();\n                    }\n                    else{\n                        res.json().then((error) => this.setState({message: {error:true, text: error.message}}));\n                    }\n            })\n            .then((serial) => {\n                if(serial){\n\n                    serial.product = this.props.products.find((product) => product.productId === serial.productId);\n\n                    serial.customer = this.props.customers.find((customer) => customer._id === serial.customerId);\n\n                    this.setState({serial: serial});\n                }\n\n            })\n            .catch(err => this.setState({\n                            message: { \n                                error:true,\n                                text: err.message\n                            }\n                        }));\n    } \n\n\n\n    fetchRecent = () => {\n        fetch(\"/api/serials/recent/6\")\n            .then((res) => {\n                if(res.ok)\n                {\n                    return res.json();\n                }\n                \n                res.json().then((err) => this.setState({\n                    message: {\n                        text: err.message,\n                        error: true,\n                    }\n                }));\n                \n            })\n            .then((serials) => {   \n                if(!serials){return;}\n                this.setState({recentSerials: serials});\n            })\n            .catch((err) => {\n                this.setState({message: {\n                    error: true,\n                    text: err.message,\n                }})\n            })\n    }\n    setCustomer = (event, customer) => {\n        this.setState((prevstate) => ({ serial : { \n                                            ...prevstate.serial, \n                                            customer: customer \n                                        }, \n                                        change: true}));\n    }\n\n    setProduct = (event, product) => {\n        this.setState((prevstate) => ({ serial : { ...prevstate.serial, product: product }, change: true}));\n    }\n\n    setBluetooth = (event) => {\n        this.setState((prevstate) => ({ serial : { ...prevstate.serial, bluetooth: event.target.value }, change: true}));\n    }\n\n    setMesh = (event) => {\n        this.setState((prevstate) => ({ serial : { ...prevstate.serial, mesh: event.target.value }, change: true}));\n    }\n\n    setVersion = (event) => {\n        this.setState((prevstate) => ({ serial : { ...prevstate.serial, version: event.target.value }, change: true}));\n    }\n\n    setSerial = (event, value) => {        \n        if(!value)\n        {\n            this.fetchRecent();\n        }\n        else{\n            this.fetchSerial(value.serialNumber);\n        }\n    }\n\n    newSerial = () => {\n        this.setState({serial: null, newSerial: true, recentSerials: null });\n    }\n\n    getOptionLabel = (option) => {\n        return \"\" +  option.serialNumber + \" - \" + option.customer.customerName;\n    }\n\n    render(){\n        const { serial,  \n                err, \n                newSerial, \n                recentSerials, \n                message,\n                change\n               } = this.state;\n\n        const {customers, serials, products, orders, rmas} = this.props;\n\n        return(\n            <Display>\n                <SearchBar  label=\"Serial Numbers\"\n                            options={serials}\n                            getOptionLabel={this.getOptionLabel}\n                            newOrderFunction={this.newSerial}\n                            onChange={this.setSerial}    \n                />\n                {\n                    message && \n                    <Message \n                        text={message.text} \n                        error={message.error} \n                        clear={() => this.setState({message: null})}\n                    />\n                }\n                {\n                    !serial && !newSerial && recentSerials &&\n\n                    <DisplayItem>\n                        <Title variant=\"h5\">\n                            Recent Serials\n                        </Title>\n                        <Recent>\n                            {\n                                recentSerials.map((entry) => {\n                                    return (\n                                        <Button style={{textTransform: \"none\"}} onClick={(e) => this.setSerial(e, entry)}>\n                                            <RecentItem>{[\n                                                \"SN: \" + entry.serialNumber,\n                                                customers.find((customer) => customer._id === entry.customerId).customerName,\n                                                products.find((product) => product.productId === entry.productId).productName,\n                                            ]}\n                                        </RecentItem>\n                                        </Button>\n                                    );\n                                })\n                            }\n                        </Recent>\n\n                    </DisplayItem>\n\n                }\n                {  serial && \n                    <DisplayItem>\n                        <Typography variant=\"h5\">Serial Details</Typography>\n                        <Box display=\"flex\" style={{gap: 15, margin: \"15px 0px 15px 0px\"}}>\n                            <Button color=\"primary\" variant=\"contained\" onClick={this.printSerialDetails}>Print Details Label</Button>\n                            <Button color=\"primary\" variant=\"contained\" onClick={this.printSerial}>Print Serial Number</Button>\n                        </Box>\n                        <HeadDisplay edit={!newSerial} updateHead={this.updateHead} change={change}>\n                            <IdentifierField \n                                label=\"Serial Number\" \n                                value={serial.serialNumber}  \n                            /> \n                            <CustomerField  \n                                customers={customers} \n                                value={serial.customer} \n                                onChange={this.setCustomer}\n                            />\n                            <MeshField      \n                                value={serial.mesh} \n                                onChange={this.setMesh}\n                            />\n                            <BluetoothField \n                                value={serial.bluetooth} \n                                onChange={this.setBluetooth}\n                            />\n                            <ProductField   \n                                products={products} \n                                value={serial.product} \n                                onChange={this.setProduct}\n                            />\n                            <VersionField   \n                                value={serial.version}  \n                                onChange={this.setVersion}\n                            />\n                        </HeadDisplay>\n                    </DisplayItem>\n                }\n                {\n                    serial &&\n                    <DisplayItem>\n                        <NewAction orders={orders} rmas={rmas} addHistory={this.addHistory}/>\n                    </DisplayItem>\n                }\n                {\n                    serial && \n\n                    <DisplayItem>\n                        <Typography variant=\"h5\">Serial History</Typography>\n                        <GenTable>\n                            <GenTableHead>\n                                <b>Action</b>\n                                <b>Date</b>\n                                <b>Author</b>\n                                <b>RMA</b>\n                                <b>Order</b>\n                                <b>Notes</b>\n                            </GenTableHead>\n                            <GenTableBody>\n                                {this.historyToRows(serial.history)}\n                            </GenTableBody>\n                        </GenTable>\n                    </DisplayItem>\n\n                } \n                {\n\n                    newSerial\n                    &&\n                    <DisplayItem>\n                        <NewSerial  customers={customers}\n                                    products={products}\n                                    rmas={rmas}\n                                    orders={orders}\n                                    updateRoot={this.props.updateRoot}\n                        />\n                    </DisplayItem>\n                }\n            </Display>\n        );\n\n    }\n};\n\n\n"],"sourceRoot":""}