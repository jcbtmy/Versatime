{"version":3,"sources":["Common/Buttons.js","Common/Fields.js","Common/TemplateTable.js","Common/Search.js","Common/HeadDisplay.js","Customers/CustomerDisplay.js"],"names":["DownloadPackingSlipButton","props","style","padding","color","variant","onClick","UpdatePackingSlipsButton","SubmitButton","marginBottom","width","children","NewButton","title","placement","size","fontSize","EditButton","className","RmaTestBox","component","row","control","checked","passed","onChange","i","label","SaveChangesButton","FileUploadButton","marginLeft","type","display","name","id","value","file","uploadFile","accept","htmlFor","useStyles","makeStyles","textFieldRoot","identifierRoot","height","multilineRoot","fullWidth","flexGrow","noteWidth","labelIdRoot","labelRoot","labelFocused","getInputProps","params","classes","InputProps","root","edit","disableUnderline","CustomerField","options","customers","getOptionLabel","option","customerName","disabled","freeSolo","renderInput","InputLabelProps","shrink","ProductField","products","productName","DateField","now","Date","defaultValue","toISOString","substring","ShippingField","multiline","rows","rowsMax","ToField","IdentifierField","InProps","allowEdit","readOnly","error","helperText","focused","MeshField","BluetoothField","VersionField","NoteField","GeneralField","QuantityField","inputProps","min","SerialField","serials","String","serialNumber","OrderField","orders","orderNumber","RMAField","rmas","RMANumber","TrackingNumberField","POField","ShippingServiceField","BoxNumberField","container","overflowX","flexDirection","alignSelf","overflowY","repairTable","tableHead","backgroundColor","repairHead","expandedElement","alignItems","maxHeight","gap","margin","borderBottom","CollapseRow","React","useState","open","setOpen","Fragment","items","map","item","align","aria-label","colSpan","length","in","timeout","unmountOnExit","subItems","Row","RepairTable","Paper","GenTable","elevation","stickyHeader","GenTableHead","Children","GenTableBody","GenTableRow","TemplateTable","search","paddingBottom","searchBarContainer","justifyContent","marginTop","SearchInput","ListboxProps","SearchBar","noNew","newOrderFunction","rootConatiner","borderRadius","editButton","content","flexFlow","position","maxWidth","paddingTop","Head","changeEdit","state","setState","saveChanges","event","updateHead","this","child","noEdit","cloneElement","change","Component","HeadDisplay","CustomerDisplay","updateCustomerName","prevState","customer","target","redirectToOrder","redirectToSerial","redirectToRma","rmaNumber","setCustomer","newCustomer","createNewCustomer","headers","method","body","JSON","stringify","fetch","then","res","ok","json","message","msg","onUpdate","catch","toString","customerOrders","customerRmas","customerSerials","clear"],"mappings":"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","file":"static/js/11.f33cd9e5.chunk.js","sourcesContent":["import AddIcon from '@material-ui/icons/Add';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport {Button} from \"@material-ui/core\";\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\nimport {useState} from 'react';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\n\n\nexport const DownloadPackingSlipButton = (props) => {\n    return(\n        <Button style={{padding:7}}\n                color=\"primary\" \n                variant=\"contained\"\n                onClick={props.onClick}\n        >\n            Download Packing Slips\n        </Button>\n    );\n}\n\n\nexport const UpdatePackingSlipsButton = (props) => {\n    return(\n        <Button\n            style={{padding:7}}\n            color=\"primary\" \n            variant=\"contained\"\n            onClick={props.onClick}\n        > \n            Update Packing Slips\n        </Button>\n    );\n}\n\n\nexport const SubmitButton = (props) => {\n    return (\n        <Button\n            style={{ marginBottom: 30, width: '100%', padding: \"15px 0px 15px 0px\"}} \n            color=\"primary\" \n            variant=\"contained\"\n            onClick={props.onClick}\n        >\n            {props.children}\n        </Button>\n    );\n}\n\n\nexport const NewButton = (props) => {\n\n    return(\n        <Tooltip title={props.title} placement=\"top\">\n            <IconButton onClick={props.onClick} size=\"small\">\n                <AddIcon color=\"primary\" fontSize=\"large\"/>\n            </IconButton>\n        </Tooltip>\n    );\n};\n\nexport const EditButton = (props) => {\n    return(\n        <Tooltip title=\"Edit\" placement=\"top\">\n            <IconButton onClick={props.onClick} className={props.className}> \n                <EditIcon color={props.color}/>\n            </IconButton>\n        </Tooltip>\n    );\n}\n\nexport const OrderTestButton = (props) =>{\n\n    return(\n        <Tooltip title=\"Serials\" placement=\"top\">\n            <IconButton \n                    onClick={props.onClick}>\n            {\n                props.open && <KeyboardArrowUpIcon />\n            }\n            {\n                !props.open && <KeyboardArrowDownIcon />\n            }\n            </IconButton>\n        </Tooltip>\n    \n    );\n  \n};\n\n\nexport const RmaTestBox = (props) => {\n\n    const checkFailed = () => {\n        props.onChange(props.i, false);\n    };\n    const checkPassed = () => {\n        props.onChange(props.i, true);\n    }\n    \n    return(\n        <FormControl component=\"fieldset\">\n                        <FormGroup row>\n                            <FormControlLabel\n                                control={<Checkbox checked={(props.passed !== null && props.passed !== false) ? props.passed : null} style={{color: \"green\"}} onChange={checkPassed} />}\n                                label=\"Passed\"\n                            />\n                            <FormControlLabel\n                                control={<Checkbox checked={(props.passed === false) ? true : null } style={{color: \"red\"}} onChange={checkFailed} />}\n                                label=\"Failed\"\n                            />\n                        </FormGroup>\n        </FormControl>\n    );\n}\n\nexport const SaveChangesButton = (props) => {\n\n    return(\n        <Button onClick={props.onClick} color=\"primary\">\n                Save Changes\n        </Button>\n    );\n}\n\nexport const FileUploadButton = (props) => {\n    return(\n        <div style={{marginLeft: \"auto\"}}>\n            <input  type=\"file\" \n                    style={{display: \"none\"}} \n                    name=\"upload-file\"\n                    id=\"upload-file\"\n                    value={props.file}\n                    onChange={props.uploadFile}\n                    accept=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n                />\n                <label htmlFor=\"upload-file\" >\n                    <Button variant=\"contained\" color=\"primary\" onClick={props.onChange}>\n                        Upload File\n                    </Button>\n                </label>\n        </div>\n    );\n}\n\n\nexport const ShippingOrderByInput = (props) => {\n    return( \n        <ToggleButtonGroup exclusive value={props.value}>\n            \n        </ToggleButtonGroup>\n    );\n}\n\n","import TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport {makeStyles, requirePropFactory, useTheme} from \"@material-ui/core\";\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from\"@material-ui/core/Select\";\nimport React from \"react\";\n\nconst useStyles = makeStyles(() => ({\n    textFieldRoot: {\n        fontSize:  18,\n        \"& .Mui-disabled\": {\n            color: \"black\",\n        },\n        width: 275,\n    },\n    identifierRoot:{\n        fontSize:  20,\n        \"& .Mui-disabled\": {\n            color: \"black\",\n        },\n        height: \"auto\",\n        width:\"100%\",\n    },\n\n    multilineRoot:{\n        fontSize: 18,\n        \"& .Mui-disabled\": {\n            color: \"black\",\n        },\n        width: 275,\n    },\n    fullWidth : {\n        flexGrow: 0,\n    },\n    noteWidth : {\n        width: 275,\n        height: \"100%\",\n    },\n    labelIdRoot: {\n        fontSize: 20,\n        \n    },\n    labelRoot:{\n        fontSize: 20\n    },\n    labelFocused: {}\n\n\n}));\n\n\nconst getInputProps = (params, classes, props) => {\n\n    let InputProps;\n    if(params){\n        InputProps = {\n            ...params.InputProps,\n            classes: {root: classes.textFieldRoot},\n        }\n    }\n    else{\n        InputProps = {classes: {root: classes.textFieldRoot}};\n    }\n\n    if(!props.edit){\n        InputProps.disableUnderline = true;\n    }\n\n    return InputProps;\n\n}\n\n\nexport const CustomerField = (props) => {\n    \n    const classes = useStyles();\n\n    return(\n        <Autocomplete id=\"customer\"\n                options={props.customers}\n                getOptionLabel={(option) => option.customerName}\n                disabled={!props.edit}\n                onChange={props.onChange}\n                value={props.value}\n                freeSolo\n                className={classes.fullWidth}\n                renderInput={(params) => <TextField   {...params}\n                                                        label=\"Customer\"\n                                                        variant={(props.edit) ? \"outlined\" : \"standard\" }\n                                                        InputProps={getInputProps(params, classes, props)}\n                                                        InputLabelProps={{\n                                                             ...params.InputLabelProps,\n                                                            classes: {root: classes.labelRoot},\n                                                            shrink: true \n                                                        }}\n                                        \n                                                        />}\n                            />\n    );\n}\n\nexport const ProductField = (props) => {\n    const classes = useStyles();\n    \n    return(\n        <Autocomplete id=\"product\"\n                options={props.products}\n                getOptionLabel={(option) => option.productName}\n                disabled={!props.edit}\n                onChange={props.onChange}\n                value={props.value}\n                freeSolo\n                className={classes.fullWidth}\n                renderInput={(params) => <TextField   {...params}\n                                                        label=\"Product\"\n                                                        variant={(props.edit) ? \"outlined\" : \"standard\" }\n                                                        InputProps={getInputProps(params, classes, props)}\n                                                        InputLabelProps={{\n                                                            ...params.InputLabelProps,\n                                                           classes: {root: classes.labelRoot},\n                                                           shrink: true\n                                                        }}\n                                                        />}\n                            />\n    );\n};\n\nexport const DateField = (props) => {\n    const classes = useStyles();\n    const label = (!props.label) ? \"Expr Date\" : props.label;\n    const now = new Date();\n\n    return(\n        <TextField\n                        id=\"date\"\n                        label={label}    \n                        type=\"date\"\n                        defaultValue=\"yyyy-MM-dd\"\n                        variant={(props.edit) ? \"outlined\" : \"standard\" }\n                        value={(props.value) ? props.value.toISOString().substring(0, 10) : now.toISOString().substring(0,10)}\n                        disabled={!props.edit}\n                        className={classes.fullWidth}\n                        InputProps={getInputProps(null, classes, props)}\n                        InputLabelProps={{classes: {root: classes.labelRoot}, shrink: true}} \n                        onChange={props.onChange}\n            />\n    );\n}\n\nexport const ShippingField = (props) => {\n    const classes = useStyles();\n    return(\n        <TextField\n            id=\"customer-ship-to\"\n            label=\"Ship To\"\n            multiline\n            rows={4}\n            className={classes.fullWidth}\n            rowsMax={10}\n            value={(props.value) ? (props.value) : \"\"}\n            variant={(props.edit) ? \"outlined\" : \"standard\" }\n            InputProps={getInputProps(null, classes, props)}\n            InputLabelProps={{classes: {root: classes.labelRoot}, shrink: true}} \n            disabled={!props.edit}\n            onChange={props.onChange}\n        /> \n    );\n}\n\nexport const ToField = (props) => {\n    const classes = useStyles();\n\n    return(\n        <TextField\n            id=\"customer-to\"\n            label=\"To\"\n            value={(props.value) ? (props.value) : \"\"}\n            multiline\n            className={classes.fullWidth}\n            rows={4}\n            rowsMax={10}\n            variant={(props.edit) ? \"outlined\" : \"standard\" }\n            InputProps={getInputProps(null, classes, props)}\n            InputLabelProps={{classes: {root: classes.labelRoot}, shrink: true}} \n            disabled={!props.edit}\n            onChange={props.onChange}\n        />\n    );\n}\n\n\nexport const IdentifierField = (props) => {\n    const classes = useStyles();\n    let InProps = {\n        classes:{root: classes.identifierRoot}\n    }\n    if(!props.allowEdit)\n    {\n        InProps.readOnly = true;\n    }\n\n    return(\n        <TextField\n                error={!props.value}\n                variant={(props.edit) ? \"outlined\" : \"standard\" }\n                helperText={(!props.value) ? props.label + \" Required\" : \"\"}\n                label={props.label}\n                value={(props.value) ? props.value : \"\"}\n                InputProps={InProps}\n                fullWidth\n                onChange={props.onChange}\n                InputLabelProps={{\n                    classes: {\n                        root: classes.labelIdRoot,\n                        focused: classes.labelFocused\n                    },\n                    shrink: true\n                }}\n                    />\n\n    );\n}\n\n\nexport const MeshField  = (props) => {\n    const classes = useStyles();\n    return(\n        <TextField\n                label=\"Mesh\"\n                value={(props.value) ? (props.value) : \" \"}\n                variant={(props.edit) ? \"outlined\" : \"standard\" }\n                InputProps={getInputProps(null, classes, props)}\n                InputLabelProps={{classes: {root: classes.labelRoot}, shrink: true}} \n                className={classes.fullWidth}\n                disabled={!props.edit}\n                onChange={props.onChange}\n                />\n    );\n}\n\n\nexport const BluetoothField = (props) => {\n    const classes = useStyles();\n    return(\n        <TextField  label=\"BlueTooth\"\n                    variant={(props.edit) ? \"outlined\" : \"standard\" }\n                    value={(props.value) ? props.value : \"\"}\n                    InputProps={getInputProps(null, classes, props)}\n                    InputLabelProps={{classes: {root: classes.labelRoot}, shrink: true}} \n                    className={classes.fullWidth}\n                    disabled={!props.edit}\n                    onChange={props.onChange}\n            />\n    );\n}\n\n\nexport const VersionField = (props) => {\n    const classes = useStyles();\n    return(\n        <TextField      label=\"Version\"\n                        variant={(props.edit) ? \"outlined\" : \"standard\" }\n                        value={(props.value) ? props.value : \"\"}\n                        InputProps={getInputProps(null, classes, props)}\n                        InputLabelProps={{classes: {root: classes.labelRoot},shrink: true}} \n                        className={classes.fullWidth}\n                        disabled={!props.edit}\n                        onChange={props.onChange}\n                />\n    );\n}\nexport const NoteField = (props) => {\n    const classes = useStyles();\n    return(\n        <TextField  label=\"Notes\"\n                    value={(props.value) ? props.value : \"\"}\n                    variant={(props.edit) ? \"outlined\" : \"standard\" }\n                    onChange={props.onChange}\n                    multiline\n                    rows={(props.rows) ? props.rows : 4}\n                    rowsMax={(props.rowsMax) ? props.rowsMax : 10}\n                    InputProps={getInputProps(null, classes, props)}\n                    InputLabelProps={{classes: {root: classes.labelRoot}, shrink: true}}\n        />\n    );\n}\n\nexport const GeneralField = (props) => {\n    const classes = useStyles();\n    return(\n            <TextField  label={props.label}\n                        InputProps={getInputProps(null, classes, props)}\n                        InputLabelProps={{classes: {root: classes.labelRoot},shrink: true}} \n                        value={props.value}\n                        variant={(props.edit) ? \"outlined\" : \"standard\" }\n                        onChange={props.onChange}\n            />\n    );\n}\n\nexport const QuantityField = (props) => {\n    const classes = useStyles();\n    return(\n        <TextField\n                            InputProps={{classes: {root: classes.textFieldRoot}, inputProps:{min:0},disableUnderline: !props.edit,}}\n                            InputLabelProps={{classes: {root: classes.labelRoot}, shrink: true}} \n                            value={props.value}\n                            onChange={props.onChange}\n                            id=\"Quantity\"\n                            label=\"Quantity\"\n                            type=\"number\"\n                            variant={(props.edit) ? \"outlined\" : \"standard\" }\n                        />\n    );\n}\n\n\nexport const SerialField = (props) => {\n    const classes = useStyles();\n    return(\n        <Autocomplete id=\"serial\"\n            options={props.serials}\n            getOptionLabel={(option) => String(option.serialNumber)}\n            onChange={props.onChange}\n            value={props.value}\n            freeSolo\n            renderInput={(params) => <TextField label=\"Serial Number\"\n                                                 variant={(props.edit) ? \"outlined\" : \"standard\" }\n                                                {...params}\n                                                InputProps={getInputProps(params, classes, props)}\n                                                InputLabelProps={{\n                                                    ...params.InputLabelProps,\n                                                   classes: {root: classes.labelRoot},\n                                                   shrink: true \n                                                }}\n                                                />}\n                    />\n    );\n}\n\nexport const OrderField = (props) => {\n    const classes = useStyles();\n    return(\n        <Autocomplete id=\"order\"\n            options={props.orders}\n            getOptionLabel={(option) => (option.orderNumber) ? String(option.orderNumber) : \"\"}\n            onChange={props.onChange}\n            value={(props.value) ? (props.value) : {orderNumber: null}}\n            disabled={!props.edit}\n            freeSolo\n            renderInput={(params) => <TextField label=\"Order Number\"\n                                                variant={(props.edit) ? \"outlined\" : \"standard\" }\n                                                {...params}\n                                                InputProps={getInputProps(params, classes, props)}\n                                                InputLabelProps={{\n                                                    ...params.InputLabelProps,\n                                                   classes: {root: classes.labelRoot}, \n                                                   shrink: true,\n                                                }}\n                                                />}\n                    />\n    );\n}\n\nexport const RMAField = (props) => {\n    const classes = useStyles();\n    return(\n        <Autocomplete id=\"rma\"\n            options={props.rmas}\n            getOptionLabel={(option) => (option.RMANumber) ? String(option.RMANumber) : \"\"}\n            onChange={props.onChange}\n            value={(props.value) ? (props.value) : {RMANumber: null}}\n            disabled={!props.edit}\n            freeSolo\n            renderInput={ (params) => <TextField label=\"RMA Number\"\n                                                variant={(props.edit) ? \"outlined\" : \"standard\" }\n                                                {...params}\n                                                InputProps={getInputProps(params, classes, props)} \n                                                InputLabelProps={{\n                                                    ...params.InputLabelProps,\n                                                   classes: {root: classes.labelRoot}, \n                                                   shrink: true\n                                                }}\n                                        />\n\n            }\n        />\n    );\n}\n\n\nexport const TrackingNumberField = (props) => {\n    const classes = useStyles();\n    return(\n            <TextField  label=\"Tracking Number\"\n                        InputProps={getInputProps(null, classes, props)}\n                        InputLabelProps={{classes: {root: classes.labelRoot}, shrink: true}} \n                        value={(props.value) ? props.value: \"\"}\n                        variant={(props.edit) ? \"outlined\" : \"standard\" }\n                        onChange={props.onChange}\n                        disabled={!props.edit}\n            />\n    );\n}\n\nexport const POField = (props) => {\n    const classes = useStyles();\n    return(\n            <TextField  label=\"PO Number\"\n                        InputProps={getInputProps(null, classes, props)}\n                        InputLabelProps={{classes: {root: classes.labelRoot}, shrink: true}} \n                        value={(props.value) ? props.value : \" \"}\n                        variant={(props.edit) ? \"outlined\" : \"standard\" }\n                        onChange={props.onChange}\n                        disabled={!props.edit}\n            />\n    );\n}\n\nexport const ShippingServiceField = (props) => {\n    const classes = useStyles();\n    return(\n        <Autocomplete id=\"shipping\"\n        options={props.options}\n        getOptionLabel={(option) => option}\n        onChange={props.onChange}\n        value={(props.value) ? (props.value) : \"\"}\n        disabled={!props.edit}\n        freeSolo\n        renderInput={ (params) => <TextField label=\"Shipping Service\"\n                                            variant={(props.edit) ? \"outlined\" : \"standard\" }\n                                            {...params}\n                                            InputProps={getInputProps(params, classes, props)} \n                                            InputLabelProps={{\n                                                ...params.InputLabelProps,\n                                               classes: {root: classes.labelRoot}, \n                                               shrink: true\n                                            }}\n                                    />\n\n        }\n        />\n    );\n}\n\n\n\nexport const BoxNumberField = (props) => {\n    const classes = useStyles();\n\n    return(\n\n         <TextField label=\"Box Number\"\n                    InputProps={getInputProps(null, classes, props)}\n                    InputLabelProps={{classes: {root: classes.labelRoot}, shrink: true}} \n                    value={props.value}\n                    variant={\"standard\" }\n                    disabled={true}\n        />\n    );\n}\n\n\nexport const MultipleSerials = (props) => {\n\n    return (\n        <>\n            <InputLabel id=\"demo-mutiple-name-label\">{props.label}</InputLabel>\n            <Select\n                labelId=\"mutiple-serial-label\"\n                id=\"mutiple-name-serial\"\n                multiple\n                input={<Input />}\n                value={[]}\n                >\n                {props.serials.map((serial) => (\n                    <MenuItem key={serial} value={serial}>\n                        {serial}\n                    </MenuItem>\n                ))}\n            </Select>\n        </>\n    );\n}","import Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { makeStyles, Tab} from \"@material-ui/core\";\nimport Collapse from '@material-ui/core/Collapse';\nimport Box from \"@material-ui/core/Box\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\nimport React from 'react';\n\nconst useStyles = makeStyles({\n  root: {\n    width: '100%',\n  },\n  container: {\n    overflowX: \"hidden\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    width: \"100%\",\n    alignSelf: \"center\",\n    height: \"auto\",\n    overflowY:\"hidden\",\n  },\n\n  repairTable: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    width: \"100%\",\n    alignSelf: \"left\",\n    height:\"100%\",\n    overflowY: \"hidden\",\n    marginBottom: 15\n  },\n  tableHead: {\n    backgroundColor: \"#36435c\",\n    color: \"white\"\n  },\n  repairHead: {\n    backgroundColor: \t\"#1769aa\",\n    color: \"white\",\n  },\n  \n  expandedElement : {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"flex-start\",\n    maxHeight: 600,\n    overflowY: \"scroll\",\n    gap: 5,\n    margin: \"5px 15px 20px 15px\",\n  },\n  row: {\n    '& > *': {\n      borderBottom: 'unset',\n    }, \n  }\n});\n\nexport const CollapseRow = (props) => {\n\n    const classes = useStyles();\n    const [open, setOpen] = React.useState(false);\n\n    return(\n      <React.Fragment>\n        <TableRow className={classes.row}>\n            {\n                props.items.map((item, i) => <TableCell key={i} align={(i === 0) ? \"left\" : \"center\"}>{item}</TableCell>)\n            }\n            <TableCell>\n                <IconButton aria-label=\"expand row\"  size=\"small\" onClick={() => setOpen(!open)}>\n                    { open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n                </IconButton>\n            </TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell colSpan={props.items.length + 1} align=\"center\" style={{padding: \"0px 0px 0px 0px\"}}>\n              <Collapse in={open} timeout=\"auto\" unmountOnExit>\n                <Box className={classes.expandedElement}>\n                  {\n                    props.subItems\n                  }\n                </Box>\n              </Collapse>\n          </TableCell>\n      </TableRow>\n    </React.Fragment>\n    \n    );\n}\n\n\n\nexport const Row = (props) => {\n    const classes = useStyles();\n    return(\n        <TableRow>\n            {\n                props.items.map((item, i) =><TableCell key={i} align={(i === 0) ? \"left\" : \"center\"}>{item}</TableCell>)\n            }\n        </TableRow>\n    );\n}\n\nexport const RepairTable = (props) => {\n  const classes = useStyles();\n  return(\n    <TableContainer className={classes.repairTable} component={Paper}>\n      <Table>\n        <TableBody>\n          {\n            props.rows\n          }\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n\nexport function GenTable(props){\n  const classes = useStyles();\n\n  return(\n    <TableContainer component={Paper} className={classes.container} elevation={2} >\n              <Table stickyHeader>\n                {props.children}\n              </Table>\n    </TableContainer>\n  );\n}\n\nexport function GenTableHead(props){\n  const classes = useStyles();\n  return(\n    <TableHead>\n      <TableRow>\n      {\n        React.Children.map( props.children, (item, i) => <TableCell key={i} align={(i === 0) ? \"left\" : \"center\"} className={classes.tableHead}>{item}</TableCell>)\n      }\n      </TableRow>\n  </TableHead>\n  );\n}\n\nexport function GenTableBody(props){\n  return(\n    <TableBody>\n      {props.children}\n    </TableBody>\n  );\n}\n\nexport function GenTableRow(props){\n\n  return(\n      <TableRow>\n      {\n          React.Children.map(props.children, (item, i) =><TableCell key={i} align={(i === 0) ? \"left\" : \"center\"}>{item}</TableCell>)\n      }\n      </TableRow>\n  );\n}\n\nconst TemplateTable = (props) => {\n    const classes = useStyles(); \n    return(\n          <TableContainer component={Paper} className={classes.container} elevation={2}>\n              <Table stickyHeader>\n                <TableHead>\n                  <TableRow>\n                  {\n                    props.tableHead.map( (item, i) => <TableCell key={i} align={(i === 0) ? \"left\" : \"center\"} className={classes.tableHead}><b>{item}</b></TableCell>)\n                  }\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {\n                    props.rows\n                  }\n                </TableBody>\n              </Table>\n          </TableContainer>\n    );\n}\n\n\nexport default TemplateTable;","import React from 'react';\nimport {makeStyles} from \"@material-ui/core\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport {NewButton} from \"./Buttons\";\nimport {Title} from \"../Text\";\n\n \nconst useStyles = makeStyles(() => ({\n    search : {\n        flexGrow : 1,\n        display: \"flex\",\n        flexDirection: \"row\",\n        width: \"100%\",\n        height: \"auto\",\n        borderBottom: \"1px solid #E0E0E0\",\n        paddingBottom: 20,\n        marginBottom: 15,\n      },\n      searchBarContainer: {\n        display:\"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        gap: 3,\n        marginTop: 15,\n      },\n      in:{\n        fontSize: 20,\n      }\n}));\n\n\nconst SearchInput = (props) => {\n\n    \n    return(\n        <Autocomplete\n          id=\"combo-box-demo\"\n          onChange={props.onChange}\n          options={props.options}\n          ListboxProps={{ style: { maxHeight: \"25rem\" }}}\n          style={{width: \"100%\", alignSelf:\"center\", }}\n          getOptionLabel={props.getOptionLabel}\n          renderInput={(params) => <TextField \n                                            {...params}  \n                                            variant=\"outlined\"\n                                            InputProps={{...params.InputProps, classes: {root: props.className}}}\n                                          \n                                    />}\n          />\n    );\n};\n\n\nexport  const SearchBar = (props) => {\n    const classes = useStyles();\n    return(\n        <div className={classes.search}>\n                  <Title variant=\"h5\">\n                    {props.label}\n                    <div className={classes.searchBarContainer}>\n                      <SearchInput className={classes.in} onChange={props.onChange} options={props.options} getOptionLabel={props.getOptionLabel}/>\n                      {!props.noNew && <NewButton title=\"New\" onClick={props.newOrderFunction} />}\n                    </div>\n                  </Title>\n                  \n        </div>\n    )\n}","import React from 'react';\nimport { makeStyles} from \"@material-ui/core\";\nimport {EditButton} from \"../Common/Buttons\";\nimport Paper from \"@material-ui/core/Paper\";\nimport {SaveChangesButton} from \"../Common/Buttons\";\n\n\nconst useStyles = makeStyles(() => ({\n\n    rootConatiner: {\n        display: \"flex\",\n        flexDirection:\"column\",\n        gap: 10,\n        padding : \"10px 30px 30px 30px\",\n        borderRadius: 1,\n        marginTop: 15,\n    },\n\n    edit: {\n        display: \"flex\",\n        flexDirection: \"row-reverse\",\n    },\n    editButton:{ \n        fontSize: 10,\n        display:\"flex\",\n        flexDirection: \"column\",\n    },\n    content: {\n        gap: 20,\n        display: \"flex\",\n        flexFlow: \"wrap\",\n        position: \"relative\",\n        alignItems: \"center\",\n        maxWidth: 800,\n\n    },\n    item : {\n        display: \"flex\",\n        alignSelf:\"stretch\",\n        paddingTop: 7,\n        paddingBottom: 7,\n    },\n    id:{\n        width: \"100%\",\n        paddingBottom: 17,\n    }\n\n}));\n\nclass Head extends React.Component{\n\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            edit: false,\n            color: \"inherit\",\n        };\n    }\n\n    changeEdit = () => {\n        const color = (!this.state.edit) ? \"primary\" : \"inherit\";\n        this.setState({\n                        edit: !this.state.edit, \n                        color: color,\n        });\n    }\n\n\n    saveChanges = (event) => {\n        this.changeEdit();\n        this.props.updateHead(event);\n    }\n\n    render(){\n\n        const {classes} = this.props;\n        const {edit, color} = this.state;\n        \n\n        return(\n            <Paper className={classes.rootConatiner} elevation={2}>\n                {this.props.edit && \n                    <div className={classes.edit}>\n                        <EditButton onClick={this.changeEdit} className={classes.editButton} color={color} /> \n                    </div>\n                }\n                {\n                    !this.props.edit\n                    &&\n                    <div style={{paddingTop: 20}}></div>\n                }\n                <div className={classes.id}>{this.props.children[0]}</div>\n                <div className={classes.content}>\n                    {React.Children.map(this.props.children, (child, i) => {\n                                    if(i > 0){\n                                        let item;\n\n                                        if(child.props.noEdit)\n                                        {\n                                            item = React.cloneElement(child, {edit: false});\n                                        }\n                                        else if(this.props.edit)\n                                        {\n                                            item = React.cloneElement(child, {edit: this.state.edit});\n                                        }\n                                        else{\n                                            item = React.cloneElement(child, {edit: true});\n                                        }\n                                        return <div className={classes.item} key={i}>{item}</div>;\n                                    }\n                    })}\n                    \n                    <div style={{marginLeft: \"auto\", marginTop: 20,}}>{this.props.edit && this.props.change && <SaveChangesButton onClick={this.saveChanges} />}</div>\n                </div>\n            </Paper>\n        );\n    }\n}\n\nexport default function HeadDisplay(props){\n    const classes = useStyles();\n    return <Head classes={classes} {...props} />\n\n}","import React from 'react';\nimport {Display} from \"../Common/Display\";\nimport {SearchBar} from \"../Common/Search\";\nimport HeadDisplay from \"../Common/HeadDisplay\";\nimport { GeneralField } from '../Common/Fields';\nimport  Button from \"@material-ui/core/Button\";\nimport {Title} from \"../Text\";\nimport {Message} from \"../Common/Message\";\nimport TemplateTable from \"../Common/TemplateTable\";\n\n\n\nexport default class CustomerDisplay extends React.Component{\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            customer: null,\n            customerOrders: null,\n            customerRmas: null,\n            customerSerials: null,\n            newCustomer: false,\n            message: null,\n        };\n    }\n\n    getOptionLabel = (option) => {\n        return option.customerName;\n    }\n\n    updateCustomerName = (event) => {\n        this.setState((prevState) => ({\n            customer: {\n                ...prevState.customer,\n                customerName: event.target.value,\n            }\n        }));\n    }\n\n    redirectToOrder = (orderNumber) => {\n\n    }\n\n    redirectToSerial = (serialNumber) => {\n\n    }\n\n    redirectToRma = (rmaNumber) => {\n        \n    }\n\n    setCustomer = (option, customer) => {\n        this.setState({customer: customer});\n    }\n\n    newCustomer = () => {\n        this.setState({newCustomer: true, customer: { customerName: \"\"} });\n    }\n\n    createNewCustomer = () => {\n\n        const customer = this.state.customer;\n        \n        if(customer.customerName){\n            const headers = {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({customerName: customer.customerName}),\n            };\n\n            fetch(\"/api/customers/create\", headers)\n                .then((res) => {\n                        if(res.ok){\n                            return res.json();\n                        }\n                        else{\n                            res.json().then((error) => this.setState({message: {error: error.msg}}));\n                        }\n                })\n                .then((customer) => {\n                        if(customer){\n                            this.setState({customer: customer, message: {error:null}, newCustomer: false});\n                            this.props.onUpdate(customer);\n                         }\n                })\n                .catch((error) => this.setState({message : {error: error.toString()}}));\n        }\n    }\n\n\n    render()\n    {\n        const {customers} = this.props;\n        const {customer, customerOrders, customerRmas, customerSerials, newCustomer, message} = this.state;\n\n        return(\n            <Display>\n\n                    <SearchBar  label=\"Customers\"\n                                options={this.props.customers}\n                                getOptionLabel={this.getOptionLabel}\n                                newOrderFunction={this.newCustomer}\n                                onChange={this.setCustomer}    \n                    />\n                    {\n                        newCustomer && <Title variant=\"h5\">New Customer</Title>\n                    }\n                    {\n                        message && <Message error={message.error} clear={() => this.setState({message: null})}/>\n                    }\n                    {\n                        customer && \n                        <HeadDisplay edit={!newCustomer}>\n                            <></>\n                            <GeneralField label=\"Customer Name\" value={customer.customerName} onChange={this.updateCustomerName}/>\n                        </HeadDisplay>\n                    }\n                    {\n                        newCustomer &&  <Button style={{width: \"auto\"}} color=\"primary\" onClick={this.createNewCustomer}>Submit</Button>\n                    }\n                    {\n                        customerOrders && !newCustomer &&\n                        <TemplateTable \n                                tableHead={[\"Order Number\", \"Order Date\", ]}\n                            />\n                    }\n\n            </Display>\n        );\n    }\n}"],"sourceRoot":""}